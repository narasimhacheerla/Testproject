<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SrpAllInOne</name>
    </assembly>
    <members>
        <member name="T:Sovren.TaxonomyRoot">
            <summary>
            TaxonomyRoot is the root of a hierarchy of Taxonomies and Skills.
            Custom roots can only be created via TaxonomyCollection.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyRoot.#ctor(System.String,Sovren.Language)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyRoot.AddTaxonomy(System.String,System.String)">
            <summary>
            Add a taxonomy. If a taxonomy with the same Id already exists, it is replaced with this new empty one.
            </summary>
            <param name="id">The Id of the taxonomy.</param>
            <param name="name">The Name of the taxonomy.</param>
            <returns>The taxonomy object that was added.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.AddTaxonomy(System.String,System.String,System.String)">
            <summary>
            Add a taxonomy. If a taxonomy with the same Id already exists, it is replaced with this new empty one.
            </summary>
            <param name="id">The Id of the taxonomy.</param>
            <param name="name">The Name of the taxonomy.</param>
            <param name="parentId">The Id of the parent taxonomy, if any.</param>
            <returns>The taxonomy object that was added.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.AddSkill(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Add a skill. If a skill with the same Id already exists, it is replaced with this new one.
            </summary>
            <param name="id">The Id of the skill.</param>
            <param name="term">The term for the skill.</param>
            <param name="allowLowerCaseMatch">When false, only ProperCase or UPPERCASE variations of the term will match. When true, the lowercase variation will also match.</param>
            <param name="taxonomyId">The Id of the Taxonomy for this skill. Required if <paramref name="parentSkillId"/> is not specified, but ignored if it is.</param>
            <param name="parentSkillId">The Id of the parent skill, if any. If specified, the <paramref name="taxonomyId"/> is ignored.</param>
            <returns>The skill object that was added.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.GetSkill(System.String)">
            <summary>
            Get a skill.
            </summary>
            <param name="id">Id of the skill.</param>
            <returns>The skill with the specified <paramref name="id"/> if it exists; otherwise null.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.GetTaxonomy(System.String)">
            <summary>
            Get a taxonomy.
            </summary>
            <param name="id"></param>
            <returns>The taxonomy with the specified <paramref name="id"/> if it exists; otherwise null.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.RemoveSkill(System.String)">
            <summary>
            Remove a skill.
            </summary>
            <param name="id"></param>
            <returns><b>true</b>if the skill is successfully found and removed; otherwise false.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.RemoveTaxonomy(System.String)">
            <summary>
            Remove a taxonomy.
            </summary>
            <param name="id"></param>
            <returns><b>true</b>if the taxonomy is successfully found and removed; otherwise false.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRoot.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>Same as Id.</returns>
        </member>
        <member name="P:Sovren.TaxonomyRoot.Id">
            <summary>
            The Id uniquely identifies this root.
            </summary>
        </member>
        <member name="P:Sovren.TaxonomyRoot.Language">
            <summary>
            The language of all the text contained within this root.
            </summary>
        </member>
        <member name="P:Sovren.TaxonomyRoot.Skills">
            <summary>
            All of the Skill items.
            </summary>
        </member>
        <member name="P:Sovren.TaxonomyRoot.Taxonomies">
            <summary>
            All of the Taxonomy items.
            </summary>
        </member>
        <member name="T:Sovren.LanguageFactory">
            <summary>
            This class exposes static methods in <see cref="T:Sovren.Language"/> to COM clients.
            </summary>
        </member>
        <member name="M:Sovren.LanguageFactory.GetLanguage(System.String)">
            <summary>
            Gets the <see cref="T:Sovren.Language"/> associated with the specified ISO language code.
            </summary>
            <param name="isoCode">An ISO 639-1 code, which is a two-letter lower case string. For example "en" for English.</param>
            <returns>One of the supported <see cref="T:Sovren.Language"/> values; otherwise <see cref="P:Sovren.Language.Unknown"/>.</returns>
        </member>
        <member name="T:Sovren.Language">
            <summary>
            This class represents languages that are supported by the LanguageAnalyzer.
            </summary>
            <remarks>XML serialized as just the two letter ISO code.</remarks>
        </member>
        <member name="M:Sovren.Language.#ctor">
            <summary>
            Do not use this constructor. It is provided only to enable XML Serialization and Deserialization.
            </summary>
        </member>
        <member name="M:Sovren.Language.#ctor(System.String)">
            <summary>
            Create a Language instance given an ISO code.
            </summary>
            <param name="isoCode">The ISO 639-1 code (two letter lower-case) for the language.</param>
        </member>
        <member name="M:Sovren.Language.GetLanguage(System.String)">
            <summary>
            Gets the <see cref="T:Sovren.Language"/> associated with the specified ISO language code.
            </summary>
            <param name="isoCode">An ISO 639-1 code, which is a two-letter lower case string. For example "en" for English.</param>
            <returns>One of the supported <see cref="T:Sovren.Language"/> values; otherwise <see cref="P:Sovren.Language.Unknown"/>.</returns>
        </member>
        <member name="M:Sovren.Language.GetHashCode">
            <summary>
            Same as CultureInfo.GetHashCode().
            </summary>
            <returns>Hash code for this language.</returns>
        </member>
        <member name="M:Sovren.Language.Equals(System.Object)">
            <summary>
            Compares object reference and TwoLetterISOLanguageName to see if languages are equivalent.
            </summary>
            <returns>True if objects are equal; otherwise false.</returns>
        </member>
        <member name="M:Sovren.Language.ToString">
            <summary>
            Represent this language as a string.
            </summary>
            <returns>Same as TwoLetterISOLanguageName.</returns>
        </member>
        <member name="M:Sovren.Language.Equals(Sovren.Language,Sovren.Language)">
            <summary>
            Compares two Languages and returns true if they are equivalent.
            </summary>
            <returns>True if objects are equal; otherwise false.</returns>
        </member>
        <member name="M:Sovren.Language.Equals(Sovren.Language)">
            <summary>
            Compares object reference and TwoLetterISOLanguageName to see if languages are equivalent.
            </summary>
            <returns>True if objects are equal; otherwise false.</returns>
        </member>
        <member name="M:Sovren.Language.op_Equality(Sovren.Language,Sovren.Language)">
            <summary>
            Compares object reference and TwoLetterISOLanguageName to see if languages are equivalent.
            </summary>
            <returns>True if objects are equal; otherwise false.</returns>
        </member>
        <member name="M:Sovren.Language.op_Inequality(Sovren.Language,Sovren.Language)">
            <summary>
            Compares object reference and TwoLetterISOLanguageName to see if languages are not equivalent.
            </summary>
            <returns>True if objects are different; otherwise false.</returns>
        </member>
        <member name="P:Sovren.Language.EnglishName">
            <summary>
            English name for the language.
            </summary>
        </member>
        <member name="P:Sovren.Language.NativeName">
            <summary>
            Native name for the language.
            </summary>
        </member>
        <member name="P:Sovren.Language.TwoLetterISOLanguageName">
            <summary>
            The ISO 639-1 code (two letter lower-case) for the language.
            </summary>
        </member>
        <member name="P:Sovren.Language.Languages">
            <summary>
            List of all supported languages.
            </summary>
        </member>
        <member name="P:Sovren.Language.Unknown">
            <summary>
            The Unknown language. ISO 639-1 code = "iv".
            </summary>
        </member>
        <member name="P:Sovren.Language.English">
            <summary>
            The English language. ISO 639-1 code = "en".
            </summary>
        </member>
        <member name="P:Sovren.Language.Spanish">
            <summary>
            The Spanish language. ISO 639-1 code = "es".
            </summary>
        </member>
        <member name="P:Sovren.Language.French">
            <summary>
            The French language. ISO 639-1 code = "fr".
            </summary>
        </member>
        <member name="P:Sovren.Language.German">
            <summary>
            The German language. ISO 639-1 code = "de".
            </summary>
        </member>
        <member name="P:Sovren.Language.Dutch">
            <summary>
            The Dutch language. ISO 639-1 code = "nl".
            </summary>
        </member>
        <member name="P:Sovren.Language.Swedish">
            <summary>
            The Swedish language. ISO 639-1 code = "sv".
            </summary>
        </member>
        <member name="P:Sovren.Language.Italian">
            <summary>
            The Italian language. ISO 639-1 code = "it".
            </summary>
        </member>
        <member name="P:Sovren.Language.Greek">
            <summary>
            The Greek language. ISO 639-1 code = "el".
            </summary>
        </member>
        <member name="P:Sovren.Language.Hungarian">
            <summary>
            The Hungarian language. ISO 639-1 code = "hu".
            </summary>
        </member>
        <member name="P:Sovren.Language.Russian">
            <summary>
            The Russian language. ISO 639-1 code = "ru".
            </summary>
        </member>
        <member name="P:Sovren.Language.Norwegian">
            <summary>
            The Norwegian language. ISO 639-1 code = "no".
            </summary>
        </member>
        <member name="T:Sovren.LanguageAnalyzer">
            <summary>
            Determines the language of a piece of text. See <see cref="T:Sovren.Language"/>.
            </summary>
        </member>
        <member name="M:Sovren.LanguageAnalyzer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sovren.LanguageAnalyzer.GetLanguage(System.String)">
            <summary>
            Determines the language that makes up the majority of the text.
            </summary>
            <param name="text">The text to examine.</param>
            <returns>Best fit language, otherwise <see cref="P:Sovren.Language.Unknown"/>.</returns>
        </member>
        <member name="M:Sovren.LanguageAnalyzer.GetLanguageAndRatio(System.String,System.Double@)">
            <summary>
            Determines the language that makes up the majority of the text.
            </summary>
            <param name="text">The text to examine.</param>
            <param name="relativeRatio">The strength of the best match divided by the strength of the second best match.</param>
            <returns>Best fit language, otherwise <see cref="P:Sovren.Language.Unknown"/>.</returns>
        </member>
        <member name="T:Sovren.hrxmlTaxonomyIds">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for TaxonomyIds [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCollection">
            <summary>
            hrxmlCollection is the base class for all HR-XML classes that are just 
            collections of a single type.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlReference">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Reference [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.PositionHistoryByEndDateComparer">
            <summary>
            This is an IComparer implementation to allow sorting of PositionHistories by end date
            in either ascending or descending order.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPositionHistory">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PositionHistory [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlFormattedPublicationDescriptionType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for FormattedPublicationDescriptionType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlBase">
            <summary>
            hrxmlBase is the base class for all non-collection HR-XML classes.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlBase.ToString">
            <summary>
            DO NOT CALL ToString()!!! It will throw an exception!  Use one of the GetAs**** Methods instead.
            </summary>
            <returns>Throws a NotSupportedException exception.</returns>
        </member>
        <member name="T:Sovren.hrxmlBookType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for BookType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlBasicBibliographicRecordType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ArticleType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAssociationType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for AssociationType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAffixes">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Affix [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlAffixes.ToString(Sovren.hrxmlGlobals.AffixTypes,System.String)">
            <summary>
            Create a string containing a delimited list of all affixes of the specified types.
            </summary>
            <param name="affixTypes">The types of affixes to include in the result.</param>
            <param name="separator">The separator to place between each affix in the result.</param>
            <returns>A string containing a delimited list of affixes of the specified types, each separated by the specified separator.</returns>
        </member>
        <member name="T:Sovren.DateFound">
            <summary>
            This class is mainly a data container for strings found by DateParser2 instances.
            </summary>
        </member>
        <member name="M:Sovren.DateFound.Recalculate(Sovren.DateParser2)">
            <summary>
            Calculates TheDate from the Month, Day, Year values, NOT vice versa!!!!
            </summary>
            <param name="dateParser">Provides the parsing context (i.e. the allowable range of years).</param>
            <returns>true if the value was recalculated, otherwise false</returns>
        </member>
        <member name="T:Sovren.DateParser2">
            <summary>
            This class provides parsing of string dates in a huge variety of formats.
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.ScrubTextForDateParsing(System.String)">
            <summary>
            Clean up text to remove undesirables and red herrings before parsing it as a date.
            </summary>
            <param name="text">Text that may contain a date.</param>
            <returns>Scrubbed text</returns>
        </member>
        <member name="M:Sovren.DateParser2.GetCountHavingAllParts(Sovren.DateFound.DateParts)">
            <summary>
            Returns the number of dates having all of the required parts.
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Attempts to parse using the date formatting information specified by the settings
            of this instance, as well as the reverse Month-Day order.
            </summary>
            <param name="source">The text to parse.</param>
            <param name="value">The DateTime value, if valid.</param>
            <returns>True if a DateTime value was successfully parsed.</returns>
        </member>
        <member name="M:Sovren.DateParser2.TryParseDateTime(System.String,System.DateTime@,Sovren.ParserSettings)">
            <summary>
            Attempts to parse using the date formatting information specified by the settings, as well as the reverse Month-Day order.
            </summary>
            <param name="source">The text to parse.</param>
            <param name="value">The DateTime value, if valid.</param>
            <param name="settings">The parser settings to use when parsing.</param>
            <returns>True if a DateTime value was successfully parsed.</returns>
        </member>
        <member name="M:Sovren.DateParser2.GetSingleYMDDate(System.String)">
            <summary>
            Pass only the numeric date part as a single word.
            Just "060504", not "allianace 060504 for smarter business"
            </summary>
            <param name="text"></param>
            <returns>Valid DateFound, or null if no valid date found.</returns>
        </member>
        <member name="F:Sovren.DateParser2.badlyConcatenatedDatesPattern">
            <summary>
            2007-05-12-2008-09-21
            2007-07-2009-08
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.NormalizeDates(Sovren.ParserSettings,System.String)">
            <summary>
            Normalize dates to formats that are easier to parse.
            Remove ordinal text such as "1st", "2nd", "3rd", "4th".
            Remove connector words such as "4 of July" or "5 de Mayo"
            Remove ordinal/connector combinations such as "4th of July".
            Replace missing spaces such as "26june".
            Replace missing spaces such as "26june".
            Handle all languages.
            </summary>
            <param name="settings">Parser settings</param>
            <param name="text">Text containing dates to be normalized.</param>
            <returns>A string without ordinal text.</returns>
            <seealso href="http://en.wikipedia.org/wiki/Ordinal_indicator">Wikipedia: Ordinal indicator</seealso>
            <remarks>
            This method is optimized for processing the entire resume in one shot. It will not be efficient if you
            call it repeatedly for each line of text. In batches, this method runs in less than 1 ms per resume (as of 2009-08-15).
            <br/>
            Known issues:
            <list>
            <item>Removes trailing period for languages that use "." for ordinal text "xx Maerz 2. xx" --> "xx Maerz 2 xx"</item>
            <item>Removes ordinals in normal sentences "Finished the project on the 3rd of June." --> "on the 3 June."</item>
            </list>
            </remarks>
        </member>
        <member name="M:Sovren.DateParser2.GetDuration(Sovren.ParserSettings,System.String,System.Int32@,Sovren.DateParser2.DurationType@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Gets the value of a duration such as "10 months" or "20 weeks". DOES NOT get the value of the elapsed time between two discrete dates such as "05/2010 - 07/2010".
            </summary>
            <param name="_settings"></param>
            <param name="text"></param>
            <param name="duration"></param>
            <param name="durationType"></param>
            <param name="starts"></param>
            <param name="ends"></param>
            <param name="durationString"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.DateParser2.NormalizeEndDate(Sovren.ParserSettings,Sovren.hrxmlFlexibleDatesType)">
            <summary>
            When EndDate is YearOnly and same as RevisionDate.Year, then set the
            EndDate to be the same as the RevisionDate.
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.NormalizeEndDate(Sovren.ParserSettings,Sovren.DateFound)">
            <summary>
            When EndDate is YearOnly and same as RevisionDate.Year, then set the
            EndDate to be the same as the RevisionDate.
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.NormalizeEndDate(Sovren.ParserSettings,System.DateTime)">
            <summary>
            When EndDate > RevisionDate, set EndDate = RevisionDate.
            This method is not very intelligent, because DateTime object does not hold enough
            information to know when to adjust EndDate, so only call this method when you know the
            EndDate needs to be adjusted by RevisionDate.
            </summary>
        </member>
        <member name="M:Sovren.DateParser2.CreateTwoYearOnlyDateFromSingleNoAlphaDateBlockIfIndicated(Sovren.DateParser2)">
            <summary>
            Convert dates such as "1998-09" to be 1998 and 1999, based on ParserSettings and various tests.
            </summary>
            <param name="dates">The DateParser2 instance to be examined.</param>
            <returns>Will return either the same Dateparser2 instance that was passed in, without any changes, 
            or a new instance of DateParser2 if it needed to be modified. If null is passed, returns null!</returns>
        </member>
        <member name="P:Sovren.DateParser2.ResolutionStyleForAmbiguousTwoFactorDate">
            <summary>
            See documentation for AmbiguousDateHandling enumeration. Default value is
            AmbiguousDateHandling.DefaultPerParserSettingsAndContext.
            </summary>
        </member>
        <member name="P:Sovren.DateParser2.Text">
            <summary>
            Has side effect.
            </summary>
        </member>
        <member name="P:Sovren.DateParser2.AssumeDayBeforeMonth">
            <summary>
            True when the current culture specifies that Day appears before Month in
            ambiguous situations such as "1/3/2006".
            </summary>
        </member>
        <member name="M:Sovren.DateFoundComparer.GetHashCode(Sovren.DateFound)">
            <summary>
            Get hash code for the DateFound.
            </summary>
            <param name="obj">The DateFound.</param>
            <returns>Hash code for the DateFound.</returns>
        </member>
        <member name="T:Sovren.DataLists">
            <summary>
            <para>
            This class holds all of the language-dependent data lists used for parsing.
            </para>
            <para>
            At runtime, the non-English lists are merged with the English lists to created
            the actual lists that are used by the parser. If you make changes to any of the lists,
            call <see cref="M:Sovren.DataLists.CommitChanges"/> in order for your changes to be made available to the parser.
            </para>
            </summary>
            <remarks>
            <para>
            English is treated as an Invariant language. All other languages incorporate the English
            lists into their parsing. In some cases, a non-English list is empty and you may find
            a mixture of languages within the English list. For example, a person who went to school
            in Germany but goes to work in the UK will commonly use German terms to describe his
            Education History, such as schools and degree names. For that reason, degree names
            are consolidated into the English (invariant) list.
            </para>
            </remarks>
        </member>
        <member name="M:Sovren.DataLists.LoadDefaults">
            <summary>
            Call this method to invalidate any changes you have made to the data lists and
            revert back to the default values.
            </summary>
        </member>
        <member name="M:Sovren.DataLists.CommitChanges">
            <summary>
            Call this method after changing any of the DataLists. The parser needs to update
            internal tables and does not track every change that you make, so you need to
            call this method to commit your changes to all the necessary places for the next parse
            transaction to see your data.
            </summary>
        </member>
        <member name="M:Sovren.DataLists.GetString(System.String)">
            <summary>
            Get the value of a string resource.
            </summary>
            <param name="key">Key of the resource to be retrieved.</param>
            <returns>String value of the resource.</returns>
            <exception cref="T:System.ArgumentNullException">Key is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist.</exception>
        </member>
        <member name="M:Sovren.DataLists.SetString(System.String,System.String)">
            <summary>
            Change the value of a string resource.
            </summary>
            <param name="key">Key of the resource to be changed.</param>
            <param name="value">New value for the resource.</param>
        </member>
        <member name="P:Sovren.DataLists.English">
            <summary>
            All localized data for the English language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.French">
            <summary>
            All localized data for the French language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.German">
            <summary>
            All localized data for the German language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Spanish">
            <summary>
            All localized data for the Spanish language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Dutch">
            <summary>
            All localized data for the Dutch language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Swedish">
            <summary>
            All localized data for the Swedish language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Italian">
            <summary>
            All localized data for the Italian language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Greek">
            <summary>
             All localized data for the Greek language.
             </summary>
        </member>
        <member name="P:Sovren.DataLists.Hungarian">
            <summary>
            All localized data for the Hungarian language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Russian">
            <summary>
            All localized data for the Russian language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Norwegian">
            <summary>
            All localized data for the Russian language.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.Language">
            <summary>
            The language of this data list.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.ADVISORY_POSITION_MARKERS">
            <summary>
            Terms that mean that the person is loosely associated with that job,
            or that the title is out of respect, but the person has retired and is not 
            really acting in that role. "Chairman EMERITUS" means that the guy is just
            making a huge salary to pretend to be the chairman of the company,
            but in fact he probably never comes to work except for board meetings.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.HIGH_MANAGEMENT_WORDS">
            <summary>
            Keywords that are often part of a position title, and that indicate
            the position is at a high level of management.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.JOB_TITLES">
            <summary>
            Terms that are position titles or are commonly part of position titles.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.LOW_MANAGEMENT_WORDS">
            <summary>
            Keywords that are often part of a position title, and that indicate
            the position is at a low level of management.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.MID_MANAGEMENT_WORDS">
            <summary>
            Keywords that are often part of a position title, and that indicate
            the position is at a middle level of management.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.NOT_MANAGER_JOB">
            <summary>
            Part of a position title and indicates a non-management position.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.PHONE_TYPES">
            <summary>
            Paired with PHONE_WORDS. Sort order of both lists is by Ascending term.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.PHONE_WORDS">
            <summary>
            Paired with PHONE_TYPES. Sort order of both lists is by Ascending term.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_FUNCTIONAL_AREAS">
            <summary>
            Terms that may be within or part of a position title but by themselves do not indicate the presence of a position title.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_LEVEL_MARKERS">
            <summary>
            Part of position title, indicating its level of experience or authority, or indicates that a position may be nearby.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_DISQUALIFIED_AFTER">
            <summary>
            Reject a possible position title if it follows any of these.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_DISQUALIFIERS">
            <summary>
            Reject a possible position title if it contains any of these.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_DISQUALIFIERS_AT_END">
            <summary>
            Reject a possible position title if it ends with any of these.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_DISQUALIFIERS_AT_START">
            <summary>
            Reject a possible position title if it starts with any of these.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_FIELDS">
            <summary>
            Field labels that indicate a position title will follow.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_HEAVYHITTERS">
            <summary>
            Keywords that are almost certainly part of a job title.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.POSITION_TITLE_VALID_AT_END_ONLY">
            <summary>
            Keywords that are found at the end of job titles.
            </summary>
        </member>
        <member name="P:Sovren.DataLists.ROLES">
            <summary>
            Roles that are part of a position title or indicate that a title may be nearby.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResume">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Resume [HR-XML Resume 2.4].
            THIS IS THE TOP-LEVEL OBJECT  IN THE HR-XML Resume 2.4 SCHEMA HIERARCHY.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlResume.LoadXml(System.String)">
            <summary>
            Populates this hrxmlResume object from a string containing a valid HR-XML Resume.
            If the XML contains a ParserConfigurationString element, then those settings will
            be applied to the hrxmlResume.Settings property. WARNING: The ParserSettings object
            supplied in the hrxmlResume constructor may be modified by this method, so
            do not attempt to reuse that settings object.
            </summary>
            <param name="xml">The xml string to be loaded.</param>
        </member>
        <member name="M:Sovren.hrxmlResume.IsValidXml(System.String)">
            <summary>
            Validate HR-XML Resume using built-in schemas.
            </summary>
            <param name="xml">The XML string to validate.</param>
            <returns>True if the HR-XML Resume is valid; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.hrxmlResume.ValidateXml(System.String)">
            <summary>
            Validate HR-XML Resume using built-in schemas.
            </summary>
            <param name="xml">The XML string to validate.</param>
            <returns>Object containing zero or more validation events.</returns>
        </member>
        <member name="M:Sovren.hrxmlResume.ValidateXml(System.String,System.Boolean)">
            <summary>
            Validate HR-XML Resume using built-in schemas.
            </summary>
            <param name="xml">The XML string to validate.</param>
            <param name="stopOnFirstError">When true, only the first error is reported.</param>
            <returns>Object containing zero or more validation events.</returns>
        </member>
        <member name="M:Sovren.hrxmlResume.ValidateXml(System.String,System.Boolean,System.String[])">
            <summary>
            Specify your own locations for the schemas used to validate the XML. For HR-XML Resume documents,
            you need to specify the Xml.xsd, Resume.xsd and SovrenResumeExtensions.xsd.
            </summary>
            <param name="xml">The XML string to validate.</param>
            <param name="stopOnFirstError">When true, only the first error is reported.</param>
            <param name="schemaLocations">URIs for the schemas that you wish to validate the XML against.</param>
            <returns>Object containing zero or more validation events.</returns>
        </member>
        <member name="M:Sovren.hrxmlResume.AssignResume(Sovren.Xsd.Resume,Sovren.hrxmlResume)">
            <summary>
            The main worker method that maps properties from the loaded object to the hrxmlResume instance.
            </summary>
        </member>
        <member name="F:Sovren.hrxmlResume._xslTagToEmbed">
            
             MUST BE FULLY FORMED TAG
            
        </member>
        <member name="M:Sovren.hrxmlResume.GetAsXml">
            <summary>
            Retrieve the Resume formatted in HR-XML 2.4 format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.hrxmlResume.ToString">
            <summary>
            ONLY for this hrxml*** object, we override Object.ToString() to default it to GetAsXml()
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sovren.TaxonomyCacheFactory">
            <summary>
            This factory class is intended for use by COM clients to access the singleton
            instance of the TaxonomyCache class.
            </summary>
        </member>
        <member name="T:Sovren.TaxonomyCache">
            <summary>
            <para>
            This class caches custom taxonomies and skills. Multiple taxonomies and skills lists are
            cached independently. When new combinations of these lists are requested, a new cache root
            is created. When these lists are loaded from files, the files are monitored for changes
            and the lists are automatically refreshed from the files.
            </para>
            <para>
            This class is thread safe.
            </para>
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyCache.Add(Sovren.TaxonomyRoot)">
            <summary>
            Add a root that you have created programatically.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Sovren.TaxonomyCache.Clear">
            <summary>
            Removes all cached values, forcing data to be reloaded the next time it is accessed.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetBuiltinRoot(Sovren.Language)">
            <summary>
            Get the built-in Sovren TaxonomyRoot for a language.
            </summary>
            <param name="language">A supported language.</param>
            <returns>Built-in Sovren root for the language.</returns>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetBuiltinRoots(Sovren.Language[])">
            <summary>
            Get the built-in TaxonomyRoots for the specified languages.
            </summary>
            <param name="languages">One or more supported languages. If null, all languages are used.</param>
            <returns>
            Collection of built-in taxonomies for the language.
            </returns>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoots(System.String[])">
            <summary>
            Get a collection containing each of the specified root names.
            </summary>
            <param name="rootNames">Names of the TaxonomyRoot objects to get. If the list is null or empty, then all roots are returned.</param>
            <returns>A collection of the requested roots.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If a request root name does not exist.</exception>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoots(System.Boolean,System.String,System.String)">
            <summary>
            Get a collection that includes a combination of built-in data and data loaded from files.
            The language for the root is auto-detected based on the filenames (.xx.* extension where xx is the 2-letter ISO language code).
            </summary>
            <param name="includeBuiltinTaxonomy">When true, the built-in skills for the appropriate language will be lazy loaded while parsing.</param>
            <param name="taxonomyFile">File that contains a list of taxonomies.</param>
            <param name="skillFile">File that contains a list of skills.</param>
            <returns>A collection of TaxonomyRoot objects that define a set of taxonomies and skills.</returns>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoots(System.Boolean,System.String[],System.String[])">
            <summary>
            Get a collection that includes a combination of built-in data and data loaded from files.
            The language for the root is auto-detected based on the filenames (.xx.* extension where xx is the 2-letter ISO language code).
            </summary>
            <param name="includeBuiltinTaxonomy">When true, the built-in skills for the appropriate language will be lazy loaded while parsing.</param>
            <param name="taxonomyFiles">Files that contain lists of taxonomies.</param>
            <param name="skillFiles">Files that contain lists of skills.</param>
            <returns>A collection of TaxonomyRoot objects that define a set of taxonomies and skills.</returns>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoot(System.String)">
            <summary>
            Get a single cached TaxonomyRoot or one of the built-in language-specific Sovren taxonomies.
            </summary>
            <param name="rootName">
            Name of the root to get. If "Sovren", the built-in English root is returned.
            If "Sovren.xx" where xx is a two letter ISO language code, the built-in root for that language is returned.
            </param>
            <returns>The requested TaxonomyRoot, if found; otherwise, null.</returns>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoot(System.String,Sovren.Language,System.String,System.String)">
            <summary>
            Get a TaxonomyRoot based on the data loaded from files.
            </summary>
            <param name="rootName">Name of the root to be created. Any existing root of the same name will be overwritten.</param>
            <param name="language">Language of the data within the files. If null, Language will be determined from the filenames.</param>
            <param name="taxonomyFile">File that contains a list of taxonomies.</param>
            <param name="skillFile">File that contains a list of skills.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="taxonomyFile"/> or <paramref name="skillFile"/> is null or empty.</exception>
        </member>
        <member name="M:Sovren.TaxonomyCache.GetRoot(System.String,Sovren.Language,System.String[],System.String[])">
            <summary>
            Get a TaxonomyRoot based on the data loaded from files.
            </summary>
            <param name="rootName">Name of the root to be created. Any existing root of the same name will be overwritten.</param>
            <param name="language">Language of the data within the files. If null, Language will be determined from the filenames.</param>
            <param name="taxonomyFiles">Files that contain lists of taxonomies.</param>
            <param name="skillFiles">Files that contain lists of skills.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="taxonomyFiles"/> or <paramref name="skillFiles"/> is null or empty.</exception>
        </member>
        <member name="M:Sovren.TaxonomyCache.Remove(System.String)">
            <summary>
            Remove a cached TaxonomyRoot by name.
            </summary>
            <param name="rootName">Name of the TaxonomyRoot to be removed.</param>
        </member>
        <member name="M:Sovren.TaxonomyCache.DetermineLanguageFromFilenames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Examine a list of file names to detect the language they represent.
            </summary>
            <param name="filenames">List of filenames to examine.</param>
            <returns>
            Returns matching Language if all filenames are named as either
            XXXX.xx.XXX (little xx is the two-letter ISO language code) or XXXX.XXX (no language code).
            If there are no language codes or multiple language codes, then Language.Unknown is returned.
            </returns>
        </member>
        <member name="P:Sovren.TaxonomyCache.Instance">
            <summary>
            The singleton instance of the TaxonomyCache class.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyCache.TaxonomyRootCacheEntry.Build">
            <summary>
            This method is called when necessary to build the value for the TaxonomyRoot property.
            </summary>
            <returns>TaxonomyRoot built from the referenced file caches.</returns>
        </member>
        <member name="P:Sovren.TaxonomyCache.TaxonomyRootCacheEntry.TaxonomyRoot">
            <summary>
            TaxonomyRoot that is built from the custom taxonomies and skills files.
            </summary>
            <remarks>
            When a referenced cache entry changes, this property is lazily rebuilt.
            </remarks>
        </member>
        <member name="T:Sovren.TStringList">
            <summary>
            This class is a more fully featured alternative to StringCollection.  It mimics most of
            the features of the Delphi TStringList class.
            </summary>
        </member>
        <member name="M:Sovren.TStringList.EnsureExcessCapacity(System.Int32)">
            <summary>
            Ensures that Capacity exceeds Count by at least a specified excess.
            </summary>
            <param name="excess">The number of open slots to reserve.</param>
        </member>
        <member name="M:Sovren.TStringList.AddNonZeroLengthStrings(System.String[],System.Boolean)">
            <summary>
            Adds them if they are non-zero length.
            </summary>
            <param name="strings"></param>
            <param name="trim">When true, strings are trimmed before being added.
            When false, the trimmed-length is used to determine whether to add the string, but the string is not actually trimmed.</param>
        </member>
        <member name="M:Sovren.TStringList.BinarySearch(System.String,System.StringComparer)">
            <summary>
            Performs a binary search for the specified item. Assumes that the data is already sorted using the same comparer.
            </summary>
            <param name="item">The item to find.</param>
            <param name="comparer">The comparer used for searching/sorting.</param>
            <returns>
            Index of item if found; otherwise, a negative number that is the bitwise complement of the index of the next element
            that is larger than item or, if there is no larger element, the bitwise complement of Count.
            </returns>
        </member>
        <member name="M:Sovren.TStringList.ResetLinesBasedOnActualLineBreaks">
            <summary>
            This methodology is necessary to reset the lines based on the actual line breaks in the text.
            Use this method instead of TStringList.Text = TStringList.Text.
            </summary>
        </member>
        <member name="T:Sovren.Int2List">
            <summary>
            Int2List manages two defined-length arrays of integers.
            </summary>
        </member>
        <member name="M:Sovren.Int2List.SortByInteger1">
            <summary>
            Sorts the list in ascending order by Integer1, with secondary sort by Integer2.
            </summary>
        </member>
        <member name="M:Sovren.Int2List.SortByInteger2">
            <summary>
            Sorts the list in ascending order by Integer2, with secondary sorty by Integer1.
            </summary>
        </member>
        <member name="M:Sovren.Int2List.Reverse">
            <summary>
            Reverses the order of the list.
            </summary>
        </member>
        <member name="M:Sovren.Int2List.EndOfItem(System.Int32)">
            <summary>
            The offset of the last character of this item.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.Int2List.CombineNonBlankElements(Sovren.Int2List)">
            <summary>
            Avoids dupes.  If same Integer1Value, then only retains /longest/ Integer2Value. 
            </summary>
            <param name="itemsToAdd">Items to be added to this list.</param>
        </member>
        <member name="M:Sovren.Int2List.MergeOverlapsAndContiguous(System.Int32)">
            <summary>
            Reduces the number of items in the list by eliminating partial matches
            and concatenating adjacent items separated by a maximum allowable gap.
            Side effect: List is sorted by Integer1.
            </summary>
            <param name="allowableGap">If the distance (not necessarily the alphanumeric character count)
            between two items is less than this value, then the items will be merged.</param>
        </member>
        <member name="M:Sovren.Int2List.MergeOverlapsAndContiguous(System.Int32,System.Boolean,System.String)">
            <summary>
            Reduces the number of items in the list by eliminating partial matches
            and concatenating adjacent items separated by a maximum allowable gap.
            Side effect: List is sorted by Integer1.
            </summary>
            <param name="allowableGap">If the number of characters between adjacent items is less than this value, then the adjacent items will be merged.</param>
            <param name="allowOnlyNonAlphaNumericInGap">When true, a gap is disqualified if it contains alphanumeric characters. When false, the gap can contain any characters.</param>
            <param name="text">The text that these offsets and lengths are found within.</param>
        </member>
        <member name="M:Sovren.Int2List.MergeContiguousOnly(System.String,System.Int32,System.String[])">
            <summary>
            Reduces the number of items in the list by concatenating adjacent items 
            separated by a maximum allowable gap but not by any specified breaker.
            Side effect: List is sorted by Integer1.
            </summary>
            <param name="text"></param>
            <param name="allowableGap">If the number of characters between adjacent items is less than this value, then the adjacent items will be merged.</param>
            <param name="breakersThatShouldPreventMerge">Presence of any of these between items will prevent their merge.</param>
        </member>
        <member name="M:Sovren.Int2List.MergeContiguous(System.String,System.String[])">
            <summary>
            Reduces the number of items in the list by concatenating adjacent items 
            separated by any one of the specified connectors.
            Side effect: List is sorted by Integer1.
            </summary>
            <param name="text"></param>
            <param name="connectors">Presence of any of these between items will allow them to be merged.</param>
        </member>
        <member name="M:Sovren.Int2List.RemoveBlankItems(System.String)">
            <summary>
            Removes all empty or all-whitespace items from the list.
            </summary>
            <param name="text">The text associated with this list.</param>
        </member>
        <member name="M:Sovren.Int2List.GetIndicatedSubstrings(System.String,System.Boolean)">
            <summary>
            Get a list of all the indicated substrings.
            </summary>
            <param name="text">The text associated with this list.</param>
            <param name="skipBlankItems">When true, the list will not contain any blank items.</param>
        </member>
        <member name="P:Sovren.Int2List.MaxReach">
            <summary>
            Offset of last character of match that ends farthest.
            </summary>
        </member>
        <member name="P:Sovren.Int2List.FirstIndexOfItemWhoseLastCharacterIsAtTheFarthestOffset">
            <summary>
            Will return -1 if no such place exists.
            </summary>
        </member>
        <member name="P:Sovren.Int2List.FirstIndexOfLongestItemWhoseLastCharacterIsAtTheFarthestOffset">
            <summary>
            Will return -1 if no such place exists.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlTaxonomyId">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for TaxonomyId [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlStringValue">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for StringValue [CPO 2]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeAdditionalItemType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ResumeAdditionalItemType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatent">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Patent [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOccupationalCategoryType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OccupationalCategoryType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDoNotDistributeTo">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DoNotDistributeTo [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDeliveryAddress">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DeliveryAddress [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyEvidence">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyEvidence [CPO 1_1_1]
            </summary>
        </member>
        <member name="M:Sovren.hrxmlCompetencyEvidence.Update(Sovren.hrxmlCompetencyEvidence)">
             <summary>
            
             </summary>
             <param name="Evidence"></param>
             <returns>CumulativeMonthsUsed</returns>
        </member>
        <member name="T:Sovren.hrxmlArticle">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Article [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeUserAreaSection">
            <summary>
            Summary description for hrxmlResumeUserAreaSection.
            </summary>
        </member>
        <member name="T:Sovren.tokenizer">
            <summary>
            tokenizer is a configurable tokenizer for strings.  Integrators
            should not use this class directly.
            </summary>
        </member>
        <member name="M:Sovren.tokenizer.IsDoubleDelim(System.Int32)">
            <summary>
            Assumes that it IS a delimiter.
            </summary>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="T:Sovren.hrxmlSpeakingEventType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SpeakingEventType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlIssuingAuthorityType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for IssuingAuthorityType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEntityIdType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EntityIdType [CPO 2]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEduDegreeType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EduDegreeType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlClassRank">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ClassRank [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAuthorType">
            <summary>
            Summary description for hrxmlAuthorType.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPersonNameType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PersonNameType [CPO 1_1_1]
            </summary>
        </member>
        <member name="M:Sovren.hrxmlPersonNameType.GetPrefixesAsString">
            <summary>
            Get all of the name prefixes in a single space-delimited string.
            </summary>
            <returns>A space-delimited list of aristocratic titles (Honorable) and forms of address (Mr.).</returns>
        </member>
        <member name="M:Sovren.hrxmlPersonNameType.GetSuffixesAsString">
            <summary>
            Get all of the name suffixes in a single comma-delimited string.
            </summary>
            <returns>A comma-delimited list of generations (Jr.) and qualifications (MD).</returns>
        </member>
        <member name="T:Sovren.DataListsFactory">
            <summary>
            This class makes some static members of the DataLists class accessible to COM clients.
            </summary>
        </member>
        <member name="M:Sovren.DataListsFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Sovren.DataListAttribute.AutoMerge">
            <summary>
            When true, the English and Non-English data for a list are unioned when creating the Non-English version.
            </summary>
        </member>
        <member name="P:Sovren.DataListAttribute.SortType">
            <summary>
            Specifies the sort order of the list.
            </summary>
        </member>
        <member name="T:Sovren.RegexHelper">
            <summary>
            Utility methods for working with regular expressions.
            </summary>
        </member>
        <member name="M:Sovren.RegexHelper.CreateAlternation(System.String[])">
            <summary>
            Build an alternation string that escapes each item and skips null/empty items.
            </summary>
            <param name="list">A source list of strings.</param>
            <returns>Alternation string of the form (A|B|C) that contains each non-empty item, Regex escaped.</returns>
        </member>
        <member name="M:Sovren.RegexHelper.CreateAlternation(System.Collections.Generic.IList{System.String})">
            <summary>
            Build an alternation string that escapes each item and skips null/empty items.
            </summary>
            <param name="list">A source list of strings.</param>
            <returns>Alternation string of the form (A|B|C) that contains each non-empty item, Regex escaped.</returns>
        </member>
        <member name="M:Sovren.RegexHelper.CreateAlternationOfRegexes(System.String[])">
            <summary>
            Build an alternation string of regex expressions, ignoring any null/empty items.
            </summary>
            <param name="list">A list of regular expressions.</param>
            <returns>Alternation string of the form ((A)|(B)|(C)) that contains an alternation of each non-empty expression.</returns>
        </member>
        <member name="M:Sovren.RegexHelper.CreateAlternationOfRegexes(System.Collections.Generic.IList{System.String})">
            <summary>
            Build an alternation string of regex expressions, ignoring any null/empty items.
            </summary>
            <param name="list">A source list of regular expressions.</param>
            <returns>Alternation string of the form ((A)|(B)|(C)) that contains an alternation of each non-empty expression.</returns>
        </member>
        <member name="T:Sovren.StringDouble">
            <summary>
            Summary description for StringDouble.
            </summary>
        </member>
        <member name="M:Sovren.StringDouble.EnsureExcessCapacity(System.Int32)">
            <summary>
            Ensures that Capacity exceeds Count by at least a specified excess.
            </summary>
            <param name="excess">The number of open slots to reserve.</param>
        </member>
        <member name="M:Sovren.StringDouble.Add(System.String,System.Double)">
            <summary>
            Adds a key/value pair to the list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Index of added item, or -1 if item already existed.</returns>
        </member>
        <member name="M:Sovren.StringDouble.GetAllByKey(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="ignoreCase"></param>
            <param name="sortFirst"></param>
            <returns>Null unless matches were found.</returns>
        </member>
        <member name="M:Sovren.StringDouble.Intersect(Sovren.StringDouble)">
            <summary>
            Removes all records that are not also in the other list.
            </summary>
            <param name="otherList">The other list to intersect.</param>
        </member>
        <member name="M:Sovren.StringDouble.GetAsXml(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the data in an XML file using the supplied element names.
            </summary>
            <param name="DocumentElement"></param>
            <param name="ItemElement"></param>
            <param name="StringElement"></param>
            <param name="DoubleElement"></param>
            <returns></returns>
        </member>
        <member name="P:Sovren.StringDouble.AllowDuplicates">
            <summary>
            Determines whether duplicate keys are allowed, without consideration of the doubles' values.
            If IncrementOnDupes is set to true, it overrides this setting and duplicates are allowed.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlServiceDetail">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ServiceDetail [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSchoolOrInstitutionType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SchoolOrInstitutionType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.HrXmlReWriter">
            <summary>
            HrXmlReWriter creates a human-readable summary of a subset of the resume.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOtherHonors">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OtherHonors [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlName">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Name [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlLanguages">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Languages [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlIssnType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for issnType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlIdBase">
             <summary>
            hrxmlIdBase is the base class for all HR-XML XXXXXid objects.
             </summary>
        </member>
        <member name="T:Sovren.hrxmlDate">
            <summary>
            Summary description for hrxmlDate, which will handle ALL HR-XML dates for us.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlDate.IsCurrent">
            <summary>
            Returns true when the date value represents the floating "current" date rather than an explicit date.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAssociation">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Association [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.EUROPE">
            <summary>
            Summary description for EUROPE.
            </summary>
        </member>
        <member name="F:Sovren.EUROPE.fourDigitPostCodePlusCityLooseText">
            <summary>
            This regex is "loose" because it allows up to 7 words, some of which can be lowercase
            </summary>
        </member>
        <member name="M:Sovren.EUROPE.FindCityInFrance(Sovren.ParserSettings,System.String,System.String@,Sovren.RrLib1.MatchOptions)">
            <summary>
            Finds a city in France using the most efficient method.
            </summary>
            <param name="settings"></param>
            <param name="text"></param>
            <param name="city"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.EUROPE.FindCityRegionAndPostCodeInNetherlands(Sovren.ParserSettings,System.String,System.String@,System.String@,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Finds:        PostCode, City, Region
            BUT, almost always appears as:  PostCode, City
            Also valid:   PostCode, City
                          PostCode, City, Region
                          City, Region
            </summary>
            <param name="settings">The parser settings.</param>
            <param name="source">The text to search.</param>
            <param name="city">The city that we found.</param>
            <param name="region">The region that we found.</param>
            <param name="postCode">The PostCode that we found.</param>
            <param name="starts">The offset of the earliest item found.</param>
            <param name="ends">The offset of the character that is the end of the furthest item found.</param>
        </member>
        <member name="M:Sovren.EUROPE.FindFiveDigitZipAndMore(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,Sovren.ParserSettings)">
            <summary>
            Does NOT update the City, State, etc. properties! Only returns 
            the out parameters without setting the properties themselves.
            </summary>
            <param name="text"></param>
            <param name="zip"></param>
            <param name="city"></param>
            <param name="state"></param>
            <param name="region"></param>
            <param name="country"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.EUROPE.FindStreetAddressInNetherlands(System.String)">
            <summary>
            Finds all street address lines in the Netherlands format.
            </summary>
            <param name="source">The text to search.</param>
            <returns>A TStringList containing all of the suite and/or street address lines.</returns>
        </member>
        <member name="M:Sovren.EUROPE.FindStreetAddressInSweden(System.String)">
            <summary>
            Finds all street address lines in the Sweden format.
            </summary>
            <param name="source">The text to search.</param>
            <returns>A TStringList containing all of the suite and/or street address lines.</returns>
        </member>
        <member name="M:Sovren.EUROPE.IsValidHungarianPostalCode(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="postalCode"></param>
             <param name="city"></param>
             <returns></returns>
        </member>
        <member name="T:Sovren.hrxmlUserAreaExperienceSummary">
            <summary>
            Public class for implementing the Sovren ManagementSummary extension for HR-XML Resume.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaExperienceSummary.#ctor(Sovren.ParserSettings)">
            <summary>
            Standard constructor.
            </summary>
            <param name="settings">Parser settings</param>
        </member>
        <member name="M:Sovren.hrxmlUserAreaExperienceSummary.Clear">
            <summary>
            Reset all properties to default values.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaExperienceSummary.GetAsXml">
            <summary>
            Get the XML fragment for this bullet item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:ExperienceSummary&gt;></c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaExperienceSummary.GetAsRM21CompatibleXml">
            <summary>
            Get the XML fragment for this bullet item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:ExperienceSummary&gt;></c>.</returns>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.Description">
            <summary>
            Several sentences describing a calculated interpretation of this resume.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.MonthsOfWorkExperience">
            <summary>
            Number of months of experience as determined by the parser,
            according to EmploymentHistory parsing.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.YearsOfWorkExperience">
            <summary>
            Derived value calculated from MonthsOfWorkExperience, rounded to nearest whole number.
            This is provided for convenience.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.MonthsOfManagementExperience">
            <summary>
            Number of months of management experience as determined by the parser,
            according to EmploymentHistory parsing.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.YearsOfManagementExperience">
            <summary>
            Derived value calculated from MonthsOfManagementExperience, rounded to nearest whole number.
            This is provided for convenience.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.CurrentManagementLevel">
            <summary>
            The current level of management being worked, if any. Possible values include:
            low-or-no-level, low-level, mid-level, somewhat high-level, high-level, executive-level
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.HighestManagementScore">
            <summary>
            A numeric score that represents the highest level of management attained.
            <br/>00-29 = low level
            <br/>30-59 = mid level
            <br/>60+   = high level
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.ExecutiveType">
            <summary>
            The type of executive management position held, if any.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.ManagementStory">
            <summary>
            A plain text line-by-line story of the management experience.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaExperienceSummary.BestFitTaxonomies">
            <summary>
            List of best fit taxonomies, controlled by the following settings:
            <see cref="P:Sovren.ParserOutputFormatSettings.BestFitTaxonomyCount">BestFitTaxonomyCount</see>,
            and <see cref="P:Sovren.ParserOutputFormatSettings.BestFitTaxonomyDepth">BestFitTaxonomyDepth</see>.
            </summary>
        </member>
        <member name="M:Sovren.WorkHistorySection.GetModalLocationsSumForCompanyName">
            <summary>
            Find the locationSum value where most of the locations were found
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.WorkHistorySection.ProbablyInvalid(System.String)">
            <summary>
            Is the phrase almost certainly NOT a valid CompanyName or PositionTitle?
            </summary>
            <param name="Phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.WorkHistorySection.DetectAndUseAdditionalEvidenceOfCurrentDate(Sovren.WorkHistorySubSection,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="subSectionParser"></param>
            <param name="currentText"></param>
            <param name="nextLine"></param>
            <param name="twoForwardLine"></param>
            <returns>True if it "FoundTwoGoodDates"</returns>
        </member>
        <member name="T:Sovren.SovDateRangeMgr">
            <summary>
            SovDateRangeMgr is a class for storing date ranges, and performing calculations on the stored data.
            </summary>
        </member>
        <member name="T:Sovren.Logger">
            <summary>
            Summary description for Logger.
            </summary>
        </member>
        <member name="T:Sovren.PhoneSorterForHrXml">
            <summary>
            Public class for implementing TelcomNumberType SORTING.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlTelcomNumberType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for TelcomNumberType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSecurityCredential">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SecurityCredential [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSchoolIds">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SchoolIds [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPublicationHistory">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PublicationHistory [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEducationMeasureType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EducationMeasureType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlContactMethod">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ContactMethod [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.ApplyPackStyle">
            <summary>
            Applies the rules specified by Settings.OutputFormat.ContactMethod.PackStyle.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.ApplyPackStyle(Sovren.ContactMethodPackStyles)">
            <summary>
            Applies the specified <see cref="T:Sovren.ContactMethodPackStyles"/>.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.Split">
            <summary>
            Ensures that each ContactMethod contains at most one child element. Additional
            ContactMethod elements are created as needed.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.Pack(System.Boolean)">
            <summary>
            Packs ContactMethods so that as many child elements are populated as possible.
            </summary>
            <param name="allowOverflow">
            When true, additional ContactMethods are created when there are multiple child elements of the same type.
            When false, there will be at most one ContactMethod for personal/home and one for business/office (WARNING: this may cause loss of data).
            </param>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetPhoneNumbers">
            <summary>
            Get all phone numbers of any type.
            </summary>
            <returns>An array containing all phone numbers.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetPhoneNumbers(Sovren.hrxmlGlobals.PhoneTypes)">
            <summary>
            Get all phone numbers of the specified type.
            </summary>
            <param name="phoneType">
            One of <see cref="T:Sovren.hrxmlGlobals.PhoneTypes"/>.
            </param>
            <returns>An array containing all phone numbers of the specified type, or a zero-length array if there are no matches.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetPhoneNumbers(Sovren.hrxmlGlobals.ContactMethodLocationTypes,Sovren.hrxmlGlobals.PhoneTypes)">
            <summary>
            Get all phone numbers of the specified type.
            </summary>
            <param name="locationType">
            One of <see cref="T:Sovren.hrxmlGlobals.ContactMethodLocationTypes"/>.
            </param>
            <param name="phoneType">
            One of <see cref="T:Sovren.hrxmlGlobals.PhoneTypes"/>.
            </param>
            <returns>An array containing all phone numbers of the specified type, or a zero-length array if there are no matches.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPhoneNumber">
            <summary>
            Get the first phone number of any type.
            </summary>
            <returns>A phone number, if available, otherwise null.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPhoneNumber(System.String)">
            <summary>
            Get the first phone number object matching the digits in the specified phone number.
            </summary>
            <returns>A phone number, if found, otherwise null.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPhoneNumber(Sovren.hrxmlGlobals.ContactMethodLocationTypes,Sovren.hrxmlGlobals.PhoneTypes)">
            <summary>
            Get the first phone number of the specified type.
            </summary>
            <param name="locationType">
            One of <see cref="T:Sovren.hrxmlGlobals.ContactMethodLocationTypes"/>.
            </param>
            <param name="phoneType">
            One of <see cref="T:Sovren.hrxmlGlobals.PhoneTypes"/>.
            </param>
            <returns>A matching number, if available, otherwise null.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPhoneNumber(Sovren.hrxmlGlobals.PhoneTypes)">
            <summary>
            Get the first phone number of the specified type.
            </summary>
            <param name="phoneType">
            One of <see cref="T:Sovren.hrxmlGlobals.PhoneTypes"/>.
            </param>
            <returns>A matching number, if available, otherwise null.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetAreaCodes">
            <summary>
            Returns a list of all AreaCityCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetPostalAddresses(Sovren.hrxmlGlobals.ContactMethodLocationTypes)">
            <summary>
            Returns a list containing each PostalAddress having the specific location type.
            </summary>
            <param name="locationType">Filter the results by this location type.</param>
            <returns>A list of zero or more matching hrxmlPostalAddressType objects.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPostalAddress(Sovren.hrxmlGlobals.ContactMethodLocationTypes)">
            <summary>
            Returns the first PostalAddress having the specific location type.
            </summary>
            <param name="locationType">The desired location type.</param>
            <returns>A PostalAddress or null if a match is not found.</returns>
        </member>
        <member name="M:Sovren.hrxmlContactMethod.GetFirstPostalAddress">
            <summary>
            Returns the first PostalAddress of any type.
            </summary>
            <returns>A PostalAddress or null if a match is not found.</returns>
        </member>
        <member name="T:Sovren.hrxmlAuthor">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Author [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.EnumHelper">
            <summary>
            Utility methods for working with Enum types.
            </summary>
        </member>
        <member name="M:Sovren.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants
            to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="T">The Type of the enumeration.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">A member of type T whose value is represented by <c>value</c>. If the parse was unsuccessful, then this holds the default value for type T.</param>
            <returns>True if the parse was successful. Otherwise false.</returns>
        </member>
        <member name="M:Sovren.EnumHelper.TryParse``1(System.String,``0@,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants
            to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="T">The Type of the enumeration.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">A member of type T whose value is represented by <c>value</c>. If the parse was unsuccessful, then this holds the default value for type T.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>True if the parse was successful. Otherwise false.</returns>
        </member>
        <member name="M:Sovren.EnumHelper.TryParse``1(System.String,``0@,``0)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants
            to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="T">The Type of the enumeration.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">A member of type T whose value is represented by <c>value</c>. If the parse was unsuccessful, then this holds <c>defaultValue</c>.</param>
            <param name="defaultValue">The value to be returned in <c>result</c> when the parse is unsuccessful.</param>
            <returns>True if the parse was successful. Otherwise false.</returns>
        </member>
        <member name="M:Sovren.EnumHelper.TryParse``1(System.String,``0@,System.Boolean,``0)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants
            to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="T">The Type of the enumeration.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="result">A member of type T whose value is represented by <c>value</c>. If the parse was unsuccessful, then this holds <c>defaultValue</c>.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <param name="defaultValue">The value to be returned in <c>result</c> when the parse is unsuccessful.</param>
            <returns>True if the parse was successful. Otherwise false.</returns>
        </member>
        <member name="M:Sovren.EnumHelper.Parse``1(System.String,System.Boolean,``0)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants
            to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="T">The Type of the enumeration.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <param name="defaultValue">The value to be returned in <c>result</c> when the parse is unsuccessful.</param>
            <returns>A member of type T whose value is represented by <c>value</c>. If the parse was unsuccessful, then this holds <c>defaultValue</c>.</returns>
        </member>
        <member name="T:Sovren.EncodingHelper">
            <summary>
            Utility methods for text encoding. See <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="M:Sovren.EncodingHelper.GetBytesWithPreamble(System.String,System.Text.Encoding)">
            <summary>
            Get string as an encoded byte array, plus the preamble (if any).
            </summary>
            <param name="text">The text to encode.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Byte array representation of the string, using the specified encoding, and including the encoding's preamble (if any).</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.GetProbableEncoding(System.Byte[])">
            <summary>
            Determines the most likely text encoding for the stream.
            </summary>
            <param name="bytes">Data to examine.</param>
            <returns>A probable match for <see cref="T:System.Text.Encoding"/> was found.</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.GetProbableEncoding(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Determines the most likely text encoding for the stream.
            </summary>
            <param name="bytes">Data to examine.</param>
            <param name="startAt">The index to start at.</param>
            <param name="count">The number of bytes to consider.</param>
            <returns>A probable match for <see cref="T:System.Text.Encoding"/> was found.</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.GetUnicodePreamble(System.Byte[])">
            <summary>
            Determine if bytes has a Unicode preamble.
            </summary>
            <param name="bytes">The document bytes to examine.</param>
            <returns>The Encoding that matches the preamble. If no preamble was found, returns null.</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.GetUnicodePreamble(System.Byte[],System.Int32)">
            <summary>
            Determine if bytes has a Unicode preamble.
            </summary>
            <param name="bytes">The document bytes to examine.</param>
            <param name="startAt">The first byte position to examine.</param>
            <returns>The Encoding that matches the preamble. If no preamble was found, returns null.</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.ReadStringWithAutoDetectEncoding(System.Byte[])">
            <summary>
            Read a stream as a string with a best effort at automatically detecting the encoding type.
            </summary>
            <param name="bytes">Bytes to be read as a string.</param>
            <returns>Text representation of the stream.</returns>
            <remarks>
            Auto detects the following:
            <list type="bullet">
            <item><description>Unicode preambles</description></item>
            <item><description>HTML meta tag for "Content-Type"</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sovren.EncodingHelper.ReadStringWithAutoDetectEncoding(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes as a string with a best effort at automatically detecting the encoding type.
            </summary>
            <param name="bytes">Bytes to be read as a string.</param>
            <param name="startAt">The index within <i>bytes</i> to start at.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Text representation of the stream.</returns>
            <remarks>
            Auto detects the following:
            <list type="bullet">
            <item><description>Unicode preambles</description></item>
            <item><description>HTML meta tag for "Content-Type"</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sovren.EncodingHelper.IndexAfterUnicodePreamble(System.Byte[],System.Int32)">
            <summary>
            Find the position of the first character after the preamble.
            </summary>
            <param name="bytes">The bytes to examine.</param>
            <param name="startAt">The position within bytes that the preamble may exist at.</param>
            <returns>Index of first character after the preamble.</returns>
        </member>
        <member name="M:Sovren.EncodingHelper.StripUnicodePreamble(System.Byte[])">
            <summary>
            If Unicode preamble exists at the beginning of a byte array, then strip it off.
            </summary>
            <param name="bytes">The document bytes to examine.</param>
            <returns>A byte array without a Unicode preamble.</returns>
        </member>
        <member name="T:Sovren.StreamHelper">
            <summary>
            Utility class for working with Streams.
            </summary>
        </member>
        <member name="M:Sovren.StreamHelper.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy one stream to another, using a 4 KB buffer.
            </summary>
            <param name="input">The stream to read from.</param>
            <param name="output">The stream to write to.</param>
        </member>
        <member name="M:Sovren.StreamHelper.ReadAllBytes(System.IO.Stream)">
            <summary>
            Read stream contents as a byte[].
            </summary>
            <param name="input">The stream to read from.</param>
        </member>
        <member name="M:Sovren.StreamHelper.WriteStream(System.String,System.IO.Stream)">
            <summary>
            Writes the complete contents of the stream to a file. Prevents reading of the file until the operation is complete.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="stream">The stream to write to the file.</param>
        </member>
        <member name="T:Sovren.DateSpan">
            <summary>
            Represents the number of years, months and days spanned by two dates (inclusive).
            </summary>
        </member>
        <member name="M:Sovren.DateSpan.GetSpan(System.DateTime,System.DateTime)">
            <summary>
            Calculate the span for two dates.
            </summary>
            <param name="from">First date.</param>
            <param name="to">Second date.</param>
            <returns>A <see cref="T:Sovren.DateSpan"/> value.</returns>
        </member>
        <member name="M:Sovren.DateSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Calculate the span for two dates.
            </summary>
            <param name="from">First date.</param>
            <param name="to">Second date.</param>
        </member>
        <member name="M:Sovren.DateSpan.ToString">
            <summary>
            Returns a string of the form "1 year, 2 months and 3 days".
            </summary>
            <returns>String representation of this <see cref="T:Sovren.DateSpan"/> object.</returns>
        </member>
        <member name="P:Sovren.DateSpan.Years">
            <summary>
            Number of 12-month periods covered by the two dates.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.Months">
            <summary>
            Number of months not included in Years.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.Days">
            <summary>
            Number of days not included in Months.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.TotalDays">
            <summary>
            Total number of days.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.TotalMonths">
            <summary>
            Total number of months.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.TotalMonthsRoundUp">
            <summary>
            Total number of months, rounded up if the remainder days &gt;= 15.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.TotalWeeks">
            <summary>
            Total number of weeks.
            </summary>
        </member>
        <member name="P:Sovren.DateSpan.TotalWeeksRoundUp">
            <summary>
            Total number of weeks, rounded up if the remainder days &gt;= 4.
            </summary>
        </member>
        <member name="T:Sovren.SkillsSection">
            <summary>
            Summary description for SkillsSection.
            </summary>
        </member>
        <member name="T:Sovren.rrCityState">
            <summary>
            Summary description for rrCityState.
            </summary>
        </member>
        <member name="M:Sovren.rrCityState.CityOrStateContextIsOk(Sovren.ParserSettings,System.String,System.String)">
            <summary>
            DO NOT USE THIS FOR FRANCE!!!!
            </summary>
        </member>
        <member name="M:Sovren.rrCityState.FindCountry(Sovren.ParserSettings,System.String,System.String@,System.String@)">
            <summary>
            Find the country name or abbreviation.
            </summary>
            <param name="settings">Parser settings</param>
            <param name="InText">Look in this text for the country.</param>
            <param name="countryText">The country text that was found.</param>
            <param name="countryCode">The country code that is indicated by the country text.</param>
            <returns>'true' if country was found; otherwise false.</returns>
        </member>
        <member name="M:Sovren.rrCityState.SetValues(Sovren.ParserSettings,System.String,System.String,System.String,System.String,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
            <summary>
            Assumption: if city is blank, exit without processing.
            </summary>
        </member>
        <member name="T:Sovren.Resume21ObjComparer">
            <summary>
            Summary description for Resume21ObjComparer.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlYearMonth">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for YearMonth [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSpeakingEvent">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SpeakingEvent [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlRoleType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for RoleType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentMilestone">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentMilestone [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentDetail">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentDetail [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlNumericValue">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for NumericValue [CPO 2]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlMinorType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for MinorType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlJobLevelInfoType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for JobLevelInfoType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlGlobals">
            <summary>
            Constants used globally in hrxmlXXXXX classes.
            </summary>
        </member>
        <member name="F:Sovren.hrxmlGlobals.MIN_ACCEPTABLE_SECTIONS">
            <summary>
            When the resume is sectioned, we must find at least MIN_ACCEPTABLE_SECTIONS
            or we will re-do the sectioning without case sensitivity.
            </summary>
        </member>
        <member name="F:Sovren.hrxmlGlobals.CurrentDateSurrogateStringLiteral">
            <summary>
            When a date is reported as being the current date, but a string literal surrogate
            is desired rather than a discrete date, this is the literal that will be used.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlGlobals.ThreeValuedBoolean">
            <summary>
            A three-state boolean value.
            </summary>
        </member>
        <member name="F:Sovren.hrxmlGlobals.ThreeValuedBoolean.Yes">
            <summary>
            Yes, affirmitive
            </summary>
        </member>
        <member name="F:Sovren.hrxmlGlobals.ThreeValuedBoolean.No">
            <summary>
            No, negative
            </summary>
        </member>
        <member name="F:Sovren.hrxmlGlobals.ThreeValuedBoolean.NoData">
            <summary>
            Value is undefined.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEmployerOrg">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EmployerOrg [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeUserAreaCulture">
            <summary>
            Summary description for hrxmlResumeUserAreaCulture.
            </summary>
        </member>
        <member name="T:Sovren.Xsd.DegreeUserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DegreeUserArea.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DegreeUserArea.Graduated">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DegreeUserArea.GraduatedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DegreeUserArea.NormalizedGPA">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DegreeUserArea.NormalizedGPASpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.FlexibleDatesType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.FlexibleDatesType.Item">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.FlexibleDatesType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.FlexibleDatesType.dateDescription">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemChoiceType.AnyDate">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemChoiceType.MonthDay">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemChoiceType.StringDate">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemChoiceType.Year">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemChoiceType.YearMonth">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BestFitTaxonomyType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.BestFitTaxonomy">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.rootId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.weight">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.percentOfOverall">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BestFitTaxonomyType.percentOfParent">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MoneyType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MoneyType.currency">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MoneyType.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CultureType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CultureType.Language">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CultureType.Country">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CultureType.CultureInfo">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionHistoryUserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.CompanyNameProbability">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.CompanyNameProbabilitySpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.PositionTitleProbability">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.PositionTitleProbabilitySpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.OffsetOfFarthestDataFound">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.OffsetOfFarthestDataFoundSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.IsSelfEmployed">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.IsSelfEmployedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.SelfEmploymentPhrase">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.NumberOfEmployeesSupervised">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.NumberOfEmployeesSupervisedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryUserArea.Bullets">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BulletsTypeBullet">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BulletsTypeBullet.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BulletsTypeBullet.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BulletsTypeBulletType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.BulletsTypeBulletType.sentence">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.BulletsTypeBulletType.creativeTerm">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.Culture">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.PersonalInformation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ExperienceSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.TrainingHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.Hobbies">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.Sections">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.CustomData">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.CoverLetterText">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ParsedTextLength">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.SearchHints">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ParseTime">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ParseTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.TimedOut">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ParserConfigurationString">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserArea.ParserVersion">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaPersonalInformation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.DateOfBirth">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.DateOfBirthSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.Birthplace">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.Nationality">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.NationalIdentityNumber">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.Gender">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.GenderSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.MaritalStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.MaritalStatusSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.DrivingLicense">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.CurrentLocation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.PreferredLocation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.WillingToRelocate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.WillingToRelocateSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.FamilyComposition">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.FathersName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.MothersMaidenName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.VisaStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.PassportNumber">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.CurrentSalary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaPersonalInformation.RequiredSalary">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaPersonalInformationGender">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationGender.Male">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationGender.Female">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationGender.Unknown">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus.Married">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus.Single">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus.Divorced">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus.Separated">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaPersonalInformationMaritalStatus.Unknown">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.YesNoType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.YesNoType.Yes">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.YesNoType.No">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaExperienceSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.MonthsOfWorkExperience">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.MonthsOfWorkExperienceSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.YearsOfWorkExperience">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.YearsOfWorkExperienceSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.MonthsOfManagementExperience">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.MonthsOfManagementExperienceSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.YearsOfManagementExperience">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.YearsOfManagementExperienceSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.CurrentManagementLevel">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.CurrentManagementLevelSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.HighestManagementScore">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.HighestManagementScoreSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.ExecutiveType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.ExecutiveTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.ManagementStory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaExperienceSummary.BestFitTaxonomies">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.lowornolevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.lowlevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.midlevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.somewhathighlevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.highlevel">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryCurrentManagementLevel.executivelevel">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.none">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.executive">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.admin">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.accounting">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.operations">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.financial">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.marketing">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.business_dev">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.it">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.general">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaExperienceSummaryExecutiveType.learning">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaTrainingHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistory.Text">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistory.Training">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.Type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.TrainingName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.Qualifications">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.Entity">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTrainingHistoryTraining.EndDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.Unknown">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.Professional">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.Vocational">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.Personal">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.LowerCraft">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.MiddleCraft">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTrainingHistoryTrainingType.HigherCraft">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaHobbies">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaHobbies.Text">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaSection">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaSection.starts">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaSection.ends">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaSection.sectionType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaSection.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaCustomDataMatch">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaCustomDataMatch.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaCustomDataMatch.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaTimedOut">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTimedOut.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ResumeUserAreaTimedOut.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ResumeUserAreaTimedOutType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTimedOutType.hard">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ResumeUserAreaTimedOutType.soft">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AchievementType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AchievementType.Date">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AchievementType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AchievementType.IssuingAuthority">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.Achievements">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Achievements.Achievement">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.Association">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AssociationType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.Link">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.Role">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Association.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EntityIdType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdType.IdValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdType.validFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdType.validTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdType.idOwner">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EntityIdTypeIdValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdTypeIdValue.name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EntityIdTypeIdValue.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AssociationTypeRole">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationTypeRole.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationTypeRole.Deliverable">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationTypeRole.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationTypeRole.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AssociationTypeRole.Comments">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.Associations">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Associations.Association">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.CompetencyId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.TaxonomyId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.CompetencyEvidence">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.CompetencyWeight">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.Competency">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.required">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyType.requiredSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyTypeCompetencyId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyId.id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyId.idOwner">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyId.description">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyTypeTaxonomyId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeTaxonomyId.id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeTaxonomyId.idOwner">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeTaxonomyId.description">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyTypeCompetencyEvidence">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.EvidenceId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.Item">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.SupportingInformation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.dateOfIncident">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.typeDescription">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.expirationDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.typeId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.required">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.requiredSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidence.lastUsed">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyTypeCompetencyEvidenceEvidenceId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidenceEvidenceId.id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidenceEvidenceId.idOwner">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyEvidenceEvidenceId.description">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.NumericValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.minValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.minValueSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.maxValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.maxValueSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.interval">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.intervalSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NumericValue.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.StringValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StringValue.minValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StringValue.maxValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StringValue.description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StringValue.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CompetencyTypeCompetencyWeight">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyWeight.Item">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyWeight.SupportingInformation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CompetencyTypeCompetencyWeight.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.UserAreaType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.UserAreaType.Any">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DunsNumberDataType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DunsNumberDataType.dunsNumberType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DunsNumberDataType.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DunsNumberDataTypeDunsNumberType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.DunsNumberDataTypeDunsNumberType.standardDuns">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.DunsNumberDataTypeDunsNumberType.globalultimate">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.DunsNumberDataTypeDunsNumberType.domesticultimate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EducationHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationHistoryType.SchoolOrInstitution">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolOrInstitutionType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.SchoolName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.School">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.LocationSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.PostalAddress">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.OrganizationUnit">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.Degree">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.Major">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.Minor">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.Measure">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.DatesOfAttendance">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionType.schoolType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolDataType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolDataType.InternetDomainName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolDataType.SchoolId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolDataType.SchoolName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolDataType.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolDataType.typeSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.InternetDomainNameType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.InternetDomainNameType.primaryIndicator">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.InternetDomainNameType.primaryIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.InternetDomainNameType.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolTypeType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolTypeType.current">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolTypeType.prior">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolTypeType.joint">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolTypeType.degree">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolOrInstitutionTypeLocationSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeLocationSummary.Municipality">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeLocationSummary.Region">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeLocationSummary.CountryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeLocationSummary.PostalCode">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PostalAddressType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.CountryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.Region">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.Municipality">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.DeliveryAddress">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.Recipient">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressType.typeSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PostalAddressTypeDeliveryAddress">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeDeliveryAddress.AddressLine">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeDeliveryAddress.StreetName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeDeliveryAddress.BuildingNumber">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeDeliveryAddress.Unit">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeDeliveryAddress.PostOfficeBox">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PostalAddressTypeRecipient">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeRecipient.PersonName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeRecipient.AdditionalText">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeRecipient.Organization">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PostalAddressTypeRecipient.OrganizationName">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.FormattedName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.LegalName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.GivenName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.PreferredGivenName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.MiddleName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.FamilyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.Affix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.AlternateScript">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameType.script">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeFamilyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeFamilyName.primary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeFamilyName.primarySpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeFamilyName.prefix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeFamilyName.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeFamilyNamePrimary">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeFamilyNamePrimary.true">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeFamilyNamePrimary.false">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeFamilyNamePrimary.undefined">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAffix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAffix.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAffix.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAffixType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAffixType.aristocraticTitle">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAffixType.formOfAddress">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAffixType.generation">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAffixType.qualification">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAlternateScript">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.FormattedName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.LegalName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.GivenName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.PreferredGivenName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.MiddleName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.FamilyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.Affix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScript.script">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyName.primary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyName.primarySpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyName.prefix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyName.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyNamePrimary">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyNamePrimary.true">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyNamePrimary.false">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptFamilyNamePrimary.undefined">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAlternateScriptAffix">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptAffix.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PersonNameTypeAlternateScriptAffix.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PersonNameTypeAlternateScriptAffixType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptAffixType.aristocraticTitle">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptAffixType.formOfAddress">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptAffixType.generation">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PersonNameTypeAlternateScriptAffixType.qualification">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PostalAddressTypeType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PostalAddressTypeType.postOfficeBoxAddress">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PostalAddressTypeType.streetAddress">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PostalAddressTypeType.militaryAddress">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.PostalAddressTypeType.undefined">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnit">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnit.organizationType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnit.attendanceStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnit.attendanceStatusSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnit.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnitAttendanceStatus">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnitAttendanceStatus.current">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnitAttendanceStatus.prior">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.SchoolOrInstitutionTypeOrganizationUnitAttendanceStatus.unknown">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EduDegreeType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DegreeName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DegreeDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.OtherHonors">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DegreeMajor">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DegreeMinor">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DegreeMeasure">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.DatesOfAttendance">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.degreeType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.examPassed">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.examPassedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.graduatingDegree">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeType.graduatingDegreeSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EduDegreeTypeDegreeName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeTypeDegreeName.academicHonors">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeTypeDegreeName.honorsProgram">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeTypeDegreeName.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EduDegreeTypeOtherHonors">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeTypeOtherHonors.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduDegreeTypeOtherHonors.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MajorType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MajorType.ProgramId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MajorType.DegreeConcentration">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MajorType.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MajorType.Option">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MinorType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MinorType.ProgramId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MinorType.Name">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EducationalMeasureType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.EducationalMeasure">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditCodeSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.CourseLevelCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.CourseLevelCodeSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.CumulativeSummaryIndicator">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.CumulativeSummaryIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursIncluded">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursIncludedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursAttempted">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursAttemptedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursEarned">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.AcademicCreditHoursEarnedSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.ClassRank">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureType.measureType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EducationMeasureType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.MeasureSystem">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.MeasureValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.LowestPossibleValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.HighestPossibleValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.ExcessiveValueIndicator">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.ExcessiveValueIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.GoodStudentIndicator">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationMeasureType.GoodStudentIndicatorSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MeasureValueType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MeasureValueType.Item">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AcademicCreditCodeType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.A">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.C">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.G">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.N">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.Q">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.S">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.U">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.V">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.AcademicCreditCodeType.X">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CourseLevelCodeType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item1">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item2">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item3">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item4">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item5">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item6">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item7">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item8">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item9">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item10">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item11">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item12">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item13">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item14">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item15">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item16">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item17">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item18">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.Item19">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.A">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.AR">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.B">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.D">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.DL">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.E">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.F">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.G">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.H">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.I">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.L">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.M">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.P">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.R">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.T">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.U">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.CourseLevelCodeType.V">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EducationalMeasureTypeClassRank">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureTypeClassRank.numberOfStudents">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EducationalMeasureTypeClassRank.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DatesOfAttendanceType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.enrollmentStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.currentlyEnrolled">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.currentlyEnrolledSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.studentInGoodStanding">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfAttendanceType.studentInGoodStandingSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.GraduatingDegreeType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.GraduatingDegreeType.graduating">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.GraduatingDegreeType.qualifying">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EduMeasureType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduMeasureType.MeasureSystem">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduMeasureType.MeasureValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EduMeasureType.measureType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DeprecatedDatesOfAttendanceType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.enrollmentStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.currentlyEnrolled">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.currentlyEnrolledSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.studentInGoodStanding">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DeprecatedDatesOfAttendanceType.studentInGoodStandingSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmploymentHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentHistoryType.EmployerOrg">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmployerOrgDataType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmployerOrgDataType.EmployerOrgName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmployerOrgDataType.EmployerContactInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmployerOrgDataType.PositionHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmployerOrgDataType.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmployerOrgDataType.employerOrgType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmpContactInfoType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmpContactInfoType.PersonName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmpContactInfoType.ContactMethod">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmpContactInfoType.LocationSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmpContactInfoType.InternetDomainName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmpContactInfoType.contactType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ContactMethodType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Use">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Location">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.WhenAvailable">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Telephone">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Mobile">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Fax">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.Pager">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.TTYTDD">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.InternetEmailAddress">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.InternetWebAddress">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ContactMethodType.PostalAddress">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.TelcomNumberType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.TelcomNumberType.Items">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.TelcomNumberType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.AreaCityCode">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.Extension">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.FormattedNumber">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.InternationalCountryCode">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.NationalNumber">
            <remarks/>
        </member>
        <member name="F:Sovren.Xsd.ItemsChoiceType.SubscriberNumber">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MobileTelcomNumberType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MobileTelcomNumberType.smsEnabled">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MobileTelcomNumberType.smsEnabledSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmploymentLocationSummaryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentLocationSummaryType.Municipality">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentLocationSummaryType.Region">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentLocationSummaryType.CountryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentLocationSummaryType.PostalCode">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmployerOrgDataTypePositionHistory">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Title">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.OrgName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.OrgInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.OrgIndustry">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.OrgSize">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Compensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Verification">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.JobLevelInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.JobCategory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.Competency">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.positionType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.currentEmployer">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionHistoryType.currentEmployerSpecified">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionOrgNameType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgNameType.OrganizationName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgNameType.OrgName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgNameType.organizationType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionOrgInfoType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgInfoType.PositionLocation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgInfoType.WebSite">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgInfoType.LocationSummary">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionOrgIndustryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgIndustryType.IndustryDescription">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgIndustryType.IndustryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgIndustryType.primaryIndicator">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionOrgIndustryTypeIndustryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgIndustryTypeIndustryCode.classificationName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionOrgIndustryTypeIndustryCode.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionCompensationType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationType.StartingCompensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationType.EndingCompensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationType.OtherCompensation">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionCompensationTypeStartingCompensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeStartingCompensation.currency">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeStartingCompensation.intervalType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeStartingCompensation.validFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeStartingCompensation.validTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeStartingCompensation.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionCompensationTypeEndingCompensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeEndingCompensation.currency">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeEndingCompensation.intervalType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeEndingCompensation.validFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeEndingCompensation.validTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeEndingCompensation.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PositionCompensationTypeOtherCompensation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeOtherCompensation.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeOtherCompensation.validFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeOtherCompensation.validTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PositionCompensationTypeOtherCompensation.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.VerificationType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.ContactInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.ReasonForLeaving">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.PermissionToContact">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.PermissionToContactSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.VerifyEmployment">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.VerifyEmploymentSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.EligibleForRehire">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.EligibleForRehireSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.AttendanceRating">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.OverallPerformanceRating">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationType.QuestionAnswerPair">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.VerificationTypeContactInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationTypeContactInfo.PersonName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.VerificationTypeContactInfo.ContactMethod">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.RatingType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingType.Item">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.RatingTypeNumericValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.minValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.minValueSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.maxValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.maxValueSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeNumericValue.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.RatingTypeStringValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeStringValue.minValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeStringValue.maxValue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeStringValue.description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RatingTypeStringValue.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.EmploymentQuestionAnswerPairType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentQuestionAnswerPairType.Question">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.EmploymentQuestionAnswerPairType.Answer">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.JobLevelInfoType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.JobLevelInfoType.JobPlan">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.JobLevelInfoType.JobGrade">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.JobLevelInfoType.JobStep">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.JobLevelInfoType.Comments">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.OccupationalCategoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryType.TaxonomyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryType.CategoryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryType.CategoryDescription">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryType.JobCategory">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.OccupationalCategoryTypeTaxonomyName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryTypeTaxonomyName.version">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OccupationalCategoryTypeTaxonomyName.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.Language">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.LanguageCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.Read">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.ReadSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.Write">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.WriteSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.Speak">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.SpeakSpecified">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Language.Comments">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CredentialType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialType.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialType.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialType.IssuingAuthority">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialType.EffectiveDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.IssuingAuthorityType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.IssuingAuthorityType.countryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.IssuingAuthorityType.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CredentialTypeEffectiveDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialTypeEffectiveDate.ValidFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialTypeEffectiveDate.ValidTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CredentialTypeEffectiveDate.FirstIssuedDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.LicensesAndCertifications">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.LicensesAndCertifications.LicenseOrCertification">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MilitaryHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.CountryServed">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.ServiceNumber">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.ServiceDetail">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryType.UserArea">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.MilitaryHistoryTypeServiceDetail">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.UnitOrDivision">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.RankAchieved">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.DatesOfService">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.Campaign">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.AreaOfExpertise">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.RecognitionAchieved">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.DisciplinaryAction">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.DischargeStatus">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.MilitaryHistoryTypeServiceDetail.branch">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.RankAchievedType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RankAchievedType.StartRank">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.RankAchievedType.CurrentOrEndRank">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DatesOfServiceType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfServiceType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DatesOfServiceType.EndDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.NonXMLResumeType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NonXMLResumeType.TextResume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NonXMLResumeType.LinkToResume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NonXMLResumeType.SupportingMaterials">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NonXMLResumeType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.NonXMLResumeType.RevisionDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.StaffingSupportingMaterialsType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StaffingSupportingMaterialsType.Item">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StaffingSupportingMaterialsType.Description">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.StaffingSupportingMaterialsTypeAttachmentReference">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StaffingSupportingMaterialsTypeAttachmentReference.context">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StaffingSupportingMaterialsTypeAttachmentReference.mimeType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StaffingSupportingMaterialsTypeAttachmentReference.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PatentHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentHistoryType.Patent">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PatentDescriptionType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionType.PatentTitle">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionType.Inventors">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionType.PatentDetail">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionType.Link">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PatentDescriptionTypePatentDetail">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetail.IssuingAuthority">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetail.PatentMilestone">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PatentDescriptionTypePatentDetailIssuingAuthority">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetailIssuingAuthority.countryCode">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetailIssuingAuthority.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PatentDescriptionTypePatentDetailPatentMilestone">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetailPatentMilestone.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetailPatentMilestone.Status">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PatentDescriptionTypePatentDetailPatentMilestone.Date">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PublicationHistoryType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryType.FormattedPublicationDescription">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryType.Article">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryType.Book">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryType.ConferencePaper">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryType.OtherPublication">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.PublicationHistoryTypeFormattedPublicationDescription">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryTypeFormattedPublicationDescription.type">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.PublicationHistoryTypeFormattedPublicationDescription.Value">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ArticleType">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BasicBibliographicRecordType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Title">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.PublicationDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Link">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Abstract">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Copyright">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.JournalOrSerialName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.ISSN">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.Volume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.Issue">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.PageNumber">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ArticleType.PublicationLanguage">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BasicBibliographicRecordTypeName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BasicBibliographicRecordTypeName.role">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CopyrightType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CopyrightType.CopyrightDates">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CopyrightType.CopyrightText">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.CopyrightTypeCopyrightDates">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CopyrightTypeCopyrightDates.OriginalDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.CopyrightTypeCopyrightDates.MostRecentDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.OtherPublicationType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.ISSN">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.ISBN">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.NumberOfPages">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.PublisherName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.PublisherLocation">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.OtherPublicationType.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ConferencePaperType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ConferencePaperType.EventName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ConferencePaperType.ConferenceDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ConferencePaperType.ConferenceLocation">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.BookType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.Edition">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.Chapter">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.ISSN">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.ISBN">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.NumberOfPages">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.PublisherName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.BookType.PublisherLocation">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.ReferenceType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ReferenceType.PersonName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ReferenceType.PositionTitle">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ReferenceType.ContactMethod">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ReferenceType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.ReferenceType.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.References">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.References.Reference">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.Resume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.ResumeId">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.DistributionGuidelines">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.StructuredXMLResume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.NonXMLResume">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.UserArea">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.Resume.lang">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DistributionGuidelinesType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionGuidelinesType.DistributeTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionGuidelinesType.DoNotDistributeTo">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DistributionGuidelinesTypeDistributeTo">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.DistributionType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionType.Id">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionType.Name">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionType.validFrom">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionType.validTo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.DistributionGuidelinesTypeDistributeTo.ContactMethod">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.StructuredXMLResumeType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.ContactInfo">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.ExecutiveSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Objective">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.EmploymentHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.EducationHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.LicensesAndCertifications">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.MilitaryHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.PatentHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.PublicationHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.SpeakingEventsHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Qualifications">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Languages">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Achievements">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Associations">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.References">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.SecurityCredentials">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.ResumeAdditionalItems">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.SupportingMaterials">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.ProfessionalAssociations">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.Comments">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeType.RevisionDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SEPContactInfoType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SEPContactInfoType.PersonName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SEPContactInfoType.ContactMethod">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SpeakingEventType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.Title">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.Role">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.EndDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.EventName">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.EventType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.Location">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.AffiliatedOrganization">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.Link">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventType.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.StructuredXMLResumeTypeQualifications">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeTypeQualifications.QualificationSummary">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.StructuredXMLResumeTypeQualifications.Competency">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AdditionalItemType">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AdditionalItemType.EffectiveDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AdditionalItemType.Description">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AdditionalItemType.type">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.AdditionalItemTypeEffectiveDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AdditionalItemTypeEffectiveDate.StartDate">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.AdditionalItemTypeEffectiveDate.EndDate">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SecurityCredentials">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SecurityCredentials.SecurityCredential">
            <remarks/>
        </member>
        <member name="T:Sovren.Xsd.SpeakingEventsHistory">
            <remarks/>
        </member>
        <member name="P:Sovren.Xsd.SpeakingEventsHistory.SpeakingEvent">
            <remarks/>
        </member>
        <member name="T:Sovren.UniversalConstants">
            <summary>
            These constants may be used by any class or project within the Sovren namespace or
            in any Sovren code regardless of namespace.
            </summary>
        </member>
        <member name="F:Sovren.UniversalConstants.FOOTER_START_MARKER">
            <summary>
            This marker is added to the Sovren Document Converter's PlainText output immediately
            before the footer text, so that the Sovren Resume Parser can easily identify the footer
            in plain text format.
            </summary>
        </member>
        <member name="F:Sovren.UniversalConstants.HEADER_END_MARKER">
            <summary>
            This marker is added to the Sovren Document Converter's PlainText output immediately
            after the header text, so that the Sovren Resume Parser can easily identify the header
            in plain text format.
            </summary>
        </member>
        <member name="T:Sovren.rrResConst">
             <summary>
             Holds constants and lookup lists used in resume parsing.<br/><br/>
            
             This class is (essentially) static and sealed, and contains a static
             class constructor that sorts any arrays in the correct order before
             they are ever used.<br/><br/>
            
             ARRAY SORT ORDER IS EXTREMELY IMPORTANT FOR BOTH PERFORMANCE
             AND ACCURACY.<br/><br/>
            
             For instance, STATE arrays must be sorted alphabetically because they
             are used in Array.BinarySearch() calls.<br/><br/>
            
             Other arrays are used in RrLib1.GetArray...() calls and therefore should be sorted
             by length descending.  
             
             Other arrays should NEVER be sorted because they are used to find the
             FIRST instance of a matching term and the order of the array terms has been
             tuned for accuracy.  COMPANY_WORDS would be an example of a NEVER-SORT array.
             </summary>
        </member>
        <member name="T:Sovren.StringSearchResultEvaluator">
            <summary>
            This delegate determines if a search result should be returned.
            </summary>
            <param name="result">A potential search result that was found.</param>
            <returns>True if the search result should be returned, otherwise false.</returns>
        </member>
        <member name="T:Sovren.IStringSearchAlgorithm">
            <summary>
            Interface containing all methods to be implemented
            by string search algorithm
            </summary>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindAll(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns all occurrences of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindAll(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns all occurrences of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindAll(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns all occurrences of any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirst(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirst(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirst(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirst(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirstLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirstLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirstLongest(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindFirstLongest(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLastLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLastLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLastLongest(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLastLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLastLongest(System.String,System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="prefix">Prefix required for matching terms</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword anywhere within the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword anywhere within the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Returns the longest keyword anywhere within the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongestStartsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword at the start of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword that the text starts with (or StringSearchResult.Empty if text does not start with a keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongestStartsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Returns the longest keyword at the start of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword that the text starts with (or StringSearchResult.Empty if text does not start with a keyword)</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongestEndsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches the text and returns the longest occurence of a keyword at the end of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at end of the text (or StringSearchResult.Empty if text does not end with a keyword).</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.FindLongestEndsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches the text and returns the longest occurence of a keyword at the end of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword at end of the text (or StringSearchResult.Empty if text does not end with a keyword).</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.ContainsAny(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns true if text contains any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>True when text contains any keyword</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.ContainsAny(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns true if text contains any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>True when text contains any keyword</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.EndsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Determines if text ends with a keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>True if text ends with a keyword.</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.EndsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Determines if text ends with a keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>True if text ends with a keyword.</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.EndsWith(System.String,System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Determines if text ends with a keyword, preceded by a required prefix.
            </summary>
            <param name="text">Text to search</param>
            <param name="prefix">Prefix that must proceed any matching keywords</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>True if text ends with a keyword.</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.StartsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Determines if text starts with a keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>True if text starts with a keyword.</returns>
        </member>
        <member name="M:Sovren.IStringSearchAlgorithm.StartsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Determines if text starts with a keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>True if text starts with a keyword.</returns>
        </member>
        <member name="P:Sovren.IStringSearchAlgorithm.Keywords">
            <summary>
            List of keywords to be found.
            </summary>
        </member>
        <member name="P:Sovren.IStringSearchAlgorithm.MaxKeywordLength">
            <summary>
            The length of the longest keyword.
            </summary>
        </member>
        <member name="T:Sovren.StringSearchResult">
            <summary>
            Structure containing results of search 
            (keyword and position in original text)
            </summary>
        </member>
        <member name="M:Sovren.StringSearchResult.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initialize string search result
            </summary>
            <param name="searchedText">The text that this result was found within.</param>
            <param name="index">Index in text</param>
            <param name="keyword">Found keyword</param>
            <param name="keywordIndex">Index of keyword within Keywords list</param>
        </member>
        <member name="P:Sovren.StringSearchResult.HasValue">
            <summary>
            Returns true when this value is not empty.
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.Index">
            <summary>
            Returns index of found keyword in original text
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.IndexOfLastCharacter">
            <summary>
            Returns index of the last matched character in the original text.
            Returns -1 when HasValue is false.
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.Keyword">
            <summary>
            Returns keyword found by this result
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.KeywordIndex">
            <summary>
            Returns the index of the found item within the Keywords list
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.Length">
            <summary>
            Returns length of the match (i.e. length of the keyword)
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.MatchedText">
            <summary>
            Returns the raw text of this match.
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.SearchedText">
            <summary>
            Returns the text that this match was found within.
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResult.Empty">
            <summary>
            Returns empty search result
            </summary>
        </member>
        <member name="T:Sovren.ListBase`1">
            <summary>
            Class that fully implements the List(T) interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.GetFirstLongest">
            <summary>
            Get the first result. If multiple results exist at the same
            offset then the longest one is returned.
            </summary>
            <returns>First search result.</returns>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.GetLastLongest">
            <summary>
            Get the last result. If multiple results end at the same offset,
            then the longest one is returned.
            </summary>
            <returns>Last search result.</returns>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.GetLastLongest(System.Int32)">
            <summary>
            Get the last result. If multiple results end at the same offset,
            then the longest one is returned.
            </summary>
            <param name="before">Only return results that end before this offset.</param>
            <returns>Last search result.</returns>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.GetLongest">
            <summary>
            Get the longest match. If there is more than one match with the same length, the first one is returned.
            </summary>
            <returns>Longest match that starts at the specified index.</returns>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.GetLongestAt(System.Int32)">
            <summary>
            Get the longest match that starts at the specified index.
            </summary>
            <param name="index">The position within the search string that is the start of a match.</param>
            <returns>Longest match that starts at the specified index.</returns>
        </member>
        <member name="M:Sovren.StringSearchResultCollection.RemovePartials">
            <summary>
            Removes all matches that are contained within the bounds of other matches. For example,
            if the term "twenty-two blackbirds" is matched as "twenty", "two", and "twenty-two"
            then this method removes the results for "twenty" and "two".
            </summary>
        </member>
        <member name="P:Sovren.StringSearchResultCollection.KeywordCount">
            <summary>
            Returns the number of unique keywords found.
            </summary>
        </member>
        <member name="T:Sovren.Index3CS">
            <summary>
            This is a very specialized class used to index text and provide matching services.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPhones">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Phones [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlPhones.GetByType(Sovren.hrxmlGlobals.PhoneTypes)">
            <summary>
            Get first occurrence of phone type in the list.
            </summary>
            <param name="phoneType">The phone type to get.</param>
            <returns><see cref="T:Sovren.hrxmlTelcomNumberType"/> if found, otherwise null.</returns>
            <remarks>Returns the first occurrence in the list of an item having the specified phone type.</remarks>
        </member>
        <member name="T:Sovren.hrxmlOrganizationUnit">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OrganizationUnit [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlLanguage">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Language [CPO 1_1_1]
            </summary>
        </member>
        <member name="M:Sovren.hrxmlLanguage.Clear">
            <summary>
            Has assumed defaults!!!
            </summary>
        </member>
        <member name="T:Sovren.hrxmlJobCategoryParser">
            <summary>
            For a given hrxmlPositionHistoryType instance, 
            calculates and stores the hrxmlJobCategoryInfo.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlJobCategoryParser.#ctor(Sovren.ParserSettings,Sovren.hrxmlPositionHistoryType)">
            <summary>
            For a given hrxmlPositionHistoryType instance, 
            calculates and stores the hrxmlJobCategoryInfo.
            </summary>
            <param name="settings">Parser settings</param>
            <param name="positionHistory">hrxmlPositionHistoryType to categorize</param>
        </member>
        <member name="M:Sovren.hrxmlJobCategoryParser.SetFunctionalArea">
            <summary>
            Set functional area category code.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlJobCategoryParser.Clear">
            <summary>
            Do not use.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:Sovren.hrxmlJobCategoryParser.GetAsXml">
            <summary>
            Do not use.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:Sovren.hrxmlJobCategoryParser.GetAsRM21CompatibleXml">
            <summary>
            Do not use.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Sovren.Comparers">
            <summary>
            Commonly needed implementations of IComparer&lt;T&gt; and IEqualityComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringLength">
            <summary>
            Compares strings by length in ascending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringLengthDescending">
            <summary>
            Compares strings by length in descending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringInvariantCulture">
            <summary>
            Compares strings using an InvariantCulture ascending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringInvariantCultureDescending">
            <summary>
            Compares strings using an InvariantCulture and Descending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringInvariantCultureIgnoreCase">
            <summary>
            Compares strings using an InvariantCultureIgnoreCase ascending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringInvariantCultureIgnoreCaseDescending">
            <summary>
            Compares strings using an InvariantCulture and Descending order, ignoring case.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringOrdinal">
            <summary>
            Compares strings using an Ordinal ascending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringOrdinalDescending">
            <summary>
            Compares strings using an Ordinal and Descending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringOrdinalIgnoreCase">
            <summary>
            Compares strings using an OrdinalIgnoreCase ascending order.
            </summary>
        </member>
        <member name="P:Sovren.Comparers.StringOrdinalIgnoreCaseDescending">
            <summary>
            Compares strings using an Ordinal and Descending order, ignoring case.
            </summary>
        </member>
        <member name="T:Sovren.StringLengthComparer">
            <summary>
            Compares strings by length in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.StringLengthComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings by length in ascending order.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; 1 if x.Length &gt; y.Length; -1 if x.Length &lt; y.Length</returns>
        </member>
        <member name="M:Sovren.StringLengthComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings have an equal length.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both null or have the same length; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringLengthComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the length of the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the length of the string.</returns>
        </member>
        <member name="T:Sovren.StringLengthDescendingComparer">
            <summary>
            Compares strings by length in descending order.
            </summary>
        </member>
        <member name="M:Sovren.StringLengthDescendingComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings by length in descending order.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; -1 if x.Length &gt; y.Length; 1 if x.Length &lt; y.Length</returns>
        </member>
        <member name="M:Sovren.StringLengthDescendingComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings have an equal length.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both null or have the same length; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringLengthDescendingComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the length of the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the length of the string.</returns>
        </member>
        <member name="T:Sovren.StringInvariantCultureDescendingComparer">
            <summary>
            Compares strings using an InvariantCulture and Descending order.
            </summary>
        </member>
        <member name="M:Sovren.StringInvariantCultureDescendingComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings using an InvariantCulture and Descending order.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; -1 if x &gt; y; 1 if x &lt; y</returns>
        </member>
        <member name="M:Sovren.StringInvariantCultureDescendingComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings are equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both are equivalent; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringInvariantCultureDescendingComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the string.</returns>
        </member>
        <member name="T:Sovren.StringInvariantCultureIgnoreCaseDescendingComparer">
            <summary>
            Compares strings using an InvariantCulture and Descending order, ignoring case.
            </summary>
        </member>
        <member name="M:Sovren.StringInvariantCultureIgnoreCaseDescendingComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings using an InvariantCulture and Descending order, ignoring case.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; -1 if x &gt; y; 1 if x &lt; y</returns>
        </member>
        <member name="M:Sovren.StringInvariantCultureIgnoreCaseDescendingComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings are equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both are equivalent; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringInvariantCultureIgnoreCaseDescendingComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the string.</returns>
        </member>
        <member name="T:Sovren.StringOrdinalDescendingComparer">
            <summary>
            Compares strings using an Ordinal and Descending order.
            </summary>
        </member>
        <member name="M:Sovren.StringOrdinalDescendingComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings using an Ordinal and Descending order.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; -1 if x &gt; y; 1 if x &lt; y</returns>
        </member>
        <member name="M:Sovren.StringOrdinalDescendingComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings are equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both are equivalent; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringOrdinalDescendingComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the string.</returns>
        </member>
        <member name="T:Sovren.StringOrdinalIgnoreCaseDescendingComparer">
            <summary>
            Compares strings using an Ordinal and Descending order, ignoring case.
            </summary>
        </member>
        <member name="M:Sovren.StringOrdinalIgnoreCaseDescendingComparer.Compare(System.String,System.String)">
            <summary>
            Compare strings using an Ordinal and Descending order, ignoring case.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>0 if strings are both null or the same; -1 if x &gt; y; 1 if x &lt; y</returns>
        </member>
        <member name="M:Sovren.StringOrdinalIgnoreCaseDescendingComparer.Equals(System.String,System.String)">
            <summary>
            Determine if two strings are equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>true if strings are both are equivalent; otherwise false.</returns>
        </member>
        <member name="M:Sovren.StringOrdinalIgnoreCaseDescendingComparer.GetHashCode(System.String)">
            <summary>
            Get hash code for the string.
            </summary>
            <param name="obj">The string.</param>
            <returns>Hash code for the string.</returns>
        </member>
        <member name="T:Sovren.hrxmlUserAreaBullets">
            <summary>
            Public class for implementing Sovren Bullet extension of HR-XML Resume 2.4 output.
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.TrainingType.Clear">
            <summary>
            Does not clear ParserSettings or ElementName.
            </summary>
        </member>
        <member name="T:Sovren.TaxonomyRootCollection">
            <summary>
            TaxonomyRootCollection holds a collection of TaxonomyRoot objects.
            </summary>
        </member>
        <member name="F:Sovren.TaxonomyRootCollection.SUBSET_ALL">
            <summary>
            Use this as a value for TaxonomySubset to instruct the parser to include
            all Taxonomies within a TaxonomyRoot.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.#ctor">
            <summary>
            Parameterless default constructor.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Add(System.String,Sovren.Language)">
            <summary>
            Use this method to add a new TaxonomyRoot object to the collection. If a root with the same Id already exists, it is replaced with this one.
            </summary>
            <param name="id">The unique identifier for this root.</param>
            <param name="language">The language of all skills within this root.</param>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.AddRange(Sovren.TaxonomyRootCollection)">
            <summary>
            Use this method to add TaxonomyEntries to the collection. If a root with the same Id already exists, it is replaced with this one.
            </summary>
            <param name="collection">Collection of TaxonomyRoot objects to be added.</param>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Contains(System.String)">
            <summary>
            Method to check whether the collection currently holds a TaxonomyRoot object with the specified id.
            </summary>
            <param name="id">The <see cref="P:Sovren.TaxonomyRoot.Id"/> value.</param>
            <returns>True if there is a TaxonomyRoot item with the specified Id; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Get(System.String)">
            <summary>
            Get the TaxonomyRoot item with the specified Id, or null if no such item exists.
            </summary>
            <param name="id">The Id of the TaxonomyRoot to get.</param>
            <returns>TaxonomyRoot object or null if none exists with the specified Id.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null or empty.</exception>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.GetEnumerator">
            <summary>
            Get an enumerator that iterates over the list of TaxonomyRoot objects.
            </summary>
            <returns>An enumerator that iterates over the list of TaxonomyRoot objects.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator that iterates over the list of TaxonomyRoot objects.
            </summary>
            <returns>An enumerator that iterates over the list of TaxonomyRoot objects.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Add(Sovren.TaxonomyRoot)">
            <summary>
            Use this method to add a TaxonomyRoot object to the collection. If a root with the same Id already exists, it is replaced with this one.
            </summary>
            <param name="root">The TaxonomyRoot object to be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is null or its Id property is null or empty.</exception>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Clear">
            <summary>
            Clears the collection of all items.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Contains(Sovren.TaxonomyRoot)">
            <summary>
            Determine if this collection contains the specified root.
            </summary>
            <param name="root">The root to look for.</param>
            <returns>True if this collection contains a root with the same id; otherwise false.</returns>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.CopyTo(Sovren.TaxonomyRoot[],System.Int32)">
            <summary>
            Copies all the TaxonomyRoot objects into the specified array, in no particular order.
            </summary>
            <param name="array">The target array.</param>
            <param name="arrayIndex">The start index within the target array.</param>
        </member>
        <member name="M:Sovren.TaxonomyRootCollection.Remove(Sovren.TaxonomyRoot)">
            <summary>
            Remove the specified root.
            </summary>
            <param name="root">The root to be removed.</param>
            <returns>True if the root was found and removed.</returns>
        </member>
        <member name="P:Sovren.TaxonomyRootCollection.IncludeBuiltinRoots">
            <summary>
            When true, this collection will lazy load the built-in Sovren TaxonomyRoot(s) for the
            language that is being parsed. This is useful when creating custom collections
            and you don't want to load the language-specific version in advance.
            <br/>Default = false.
            </summary>
        </member>
        <member name="P:Sovren.TaxonomyRootCollection.TaxonomySubset">
            <summary>
            Specify the subset of Taxonomies within this collection to include during skills parsing.
            If none are specified, then all Taxonomies are included.
            For each specified Taxonomy, all of its subtaxonomies will also be included.
            <br/>Default = empty.
            <para>Key: Id of the TaxonomyRoot object.</para>
            <para>Value: Id of a Taxonomy within the specified TaxonomyRoot.</para>
            <para>Value of null (or empty list) indicates use of all taxonomies within the TaxonomyRoot.</para>
            <para>Value of TaxonomyCollection.ALL_TAXONOMIES ("+ALL+") indicates use of all taxonomies within the TaxonomyRoot.</para>
            </summary>
            <remarks>
            <para>
            The number of skills that are available as potential matches can run to the
            tens or hundreds of thousands.  The more skills there are in the "match to"
            lists, the longer it will take to parse.  In many cases, the applicant's
            primary skills area can be discovered in advance, providing the opportunity to
            use just the subset of the total skills lists for parsing. If this property
            is left null, then all Taxonomies are included during parsing.
            </para>
            </remarks>
        </member>
        <member name="P:Sovren.TaxonomyRootCollection.Item(System.String)">
            <summary>
            Get the TaxonomyRoot item with the specified Id, or null if no such item exists.
            </summary>
            <param name="id">The Id of the TaxonomyRoot to get.</param>
            <returns>TaxonomyRoot object or null if none exists with the specified Id.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null or empty.</exception>
        </member>
        <member name="P:Sovren.TaxonomyRootCollection.Count">
            <summary>
            Property that indicates how many TaxonomyRoot objects are in the collection.  Read only.
            </summary>
        </member>
        <member name="P:Sovren.TaxonomyRootCollection.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:Sovren.StringHelper">
            <summary>
            Utility methods for strings.
            </summary>
        </member>
        <member name="M:Sovren.StringHelper.ChangeLineSeparator(System.String,System.String)">
            <summary>
            Changes all of the line separators in the text to the specified separator.
            </summary>
            <param name="text">The text to modify.</param>
            <param name="separator">The separator between lines. Must be one of the following: \r, \n, \r\n.</param>
            <returns>The text modified to consistently use the specified separator.</returns>
        </member>
        <member name="M:Sovren.StringHelper.CountLetter(System.String)">
            <summary>
            Count the number of letters within the text.
            </summary>
            <param name="text">The string to examine.</param>
            <returns>
            The number of letters within the text.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountLetter(System.String,System.Int32,System.Int32)">
            <summary>
            Count the number of letters within a range of text.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="start">The position to start searching from.</param>
            <param name="length">The number of characters to examine.</param>
            <returns>
            The number of letters within the specified range of text.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountLetterOrDigit(System.String)">
            <summary>
            Count the number of alphanumeric characters within some text.
            </summary>
            <param name="text">The string to examine.</param>
            <returns>
            The number of letters or digits within the text.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountLetterOrDigit(System.String,System.Int32,System.Int32)">
            <summary>
            Count the number of alphanumeric characters within a range of text.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="start">The position within text to begin searching.</param>
            <param name="count">The number of characters to search.</param>
            <returns>
            The number of letters or digits within the text range.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Count the number of whitespace characters within some text.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="start">The position within text to start at.</param>
            <param name="length">The number of characters within text to examine.</param>
            <returns>
            The number of whitespace characters within the text.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountLines(System.String)">
            <summary>
            Determine number of lines of text.
            Null or empty = 0.
            Text with no linebreak = 1.
            All other text = number of line breaks plus 1.
            </summary>
            <param name="text">Count lines within this text.</param>
            <returns>Number of lines of text.</returns>
        </member>
        <member name="M:Sovren.StringHelper.GetLengthOfLongestLine(System.String)">
            <summary>
            Get the length of the longest line.
            </summary>
            <param name="text">The text to examine.</param>
            <returns>Length of the longest line. Zero if empty.</returns>
        </member>
        <member name="M:Sovren.StringHelper.CountOccurrences(System.String,System.String,System.Globalization.CompareOptions)">
            <summary>
            Count the number of times that a string appears within another string.
            </summary>
            <param name="inWhat">The string to look within.</param>
            <param name="ofWhat">The string to look for.</param>
            <param name="options">Comparison options, such as OrdinalIgnoreCase.</param>
            <returns>
            The number of times that <c>ofWhat</c> appears within <c>inWhat</c>.
            Returns 0 if no occurrences are found or either string is null or empty.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountOccurrences(System.String,System.Char)">
            <summary>
            Count the number of times that a character appears within a string.
            </summary>
            <param name="inWhat">The string to look within.</param>
            <param name="ofWhat">The character to look for.</param>
            <returns>
            The number of times that <c>ofWhat</c> appears within <c>inWhat</c>.
            Returns 0 if no occurrences are found or if the string is null or empty.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountOccurrences(System.String,System.Char[])">
            <summary>
            Count the number of times that characters appear within a string.
            </summary>
            <param name="inWhat">The string to look within.</param>
            <param name="ofWhat">The characters to look for.</param>
            <returns>
            The number of times that the characters appear within <c>inWhat</c>.
            Returns 0 if no occurrences are found or if the string is null or empty.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.CountOccurrences(System.String,System.Int32,System.Int32,System.Char[])">
            <summary>
            Count the number of times that characters appear within a string.
            </summary>
            <param name="inWhat">The string to look within.</param>
            <param name="startAt">Start at this index within the string.</param>
            <param name="count">The number of characters to examine, beginning at startAt.</param>
            <param name="ofWhat">The characters to look for.</param>
            <returns>
            The number of times that the characters appear within <c>inWhat</c>.
            Returns 0 if no occurrences are found or if the string is null or empty.
            </returns>
        </member>
        <member name="M:Sovren.StringHelper.EndsWithBlankLine(System.String)">
            <summary>
            Returns true if the specified text contains a trailing line break followed only by whitespace.
            </summary>
            <param name="text">The text to examine.</param>
            <returns>True if the specified text contains a trailing line break followed only by whitespace; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String)">
            <summary>
            Fast alternative to String.IndexOf. Uses Ordinal comparisons.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String,System.Int32)">
            <summary>
            Fast alternative to String.IndexOf. Uses Ordinal comparisons.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <param name="startAt">The position within source to begin searching from.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Fast alternative to String.IndexOf. Uses Ordinal comparisons.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <param name="startAt">The position within source to begin searching from.</param>
            <param name="length">The number of characters to search within.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
            <summary>
            Fast alternative to String.IndexOf. Uses specified comparisons.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <param name="options">Options that define how source and pattern should be compared.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
            <summary>
            Fast alternative to String.IndexOf.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <param name="startAt">The position within source to begin searching from.</param>
            <param name="options">Options that define how source and pattern should be compared.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
            <summary>
            Fast alternative to String.IndexOf.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="pattern">The text to search for.</param>
            <param name="startAt">The position within source to begin searching from.</param>
            <param name="length">The number of characters to search within.</param>
            <param name="options">Options that define how source and pattern should be compared.</param>
            <returns>Index of first occurrence of pattern in source; otherwise, -1 if not found.</returns>
        </member>
        <member name="M:Sovren.StringHelper.PrivateFastIndexOf(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Slightly faster than String.IndexOf(..., StringComparison.Ordinal)
            </summary>
        </member>
        <member name="F:Sovren.StringHelper._firstCharArray">
            <summary>
            Allocate a char array once per thread, so that we can avoid frequent allocations, since
            this method may be called millions of times per parse. DO NOT allocate the array here
            or in the static initializer because those only get called once, and we need to allocate
            this per thread.
            </summary>
        </member>
        <member name="M:Sovren.StringHelper.PrivateFastIndexOfIgnoreCase(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Performs an OrdinalIgnoreCase search that is 3-5x as fast as String.IndexOf(..., StringComparison.OrdinalIgnoreCase)
            </summary>
        </member>
        <member name="M:Sovren.StringHelper.GetFirstNonWhiteSpaceChar(System.String)">
            <summary>
            Get the first non-whitespace character from a string.
            </summary>
            <param name="s">The string</param>
            <returns>First non-whitespace character. If all whitespace or empty string, returns Char.MinValue (0).</returns>
        </member>
        <member name="M:Sovren.StringHelper.GetLastNonWhiteSpaceChar(System.String)">
            <summary>
            Get the last non-whitespace character from a string.
            </summary>
            <param name="s">The string</param>
            <returns>Last non-whitespace character. If all whitespace or empty string, returns Char.MinValue (0).</returns>
        </member>
        <member name="M:Sovren.StringHelper.GetLastNonWhiteSpaceChar(System.String,System.Int32,System.Int32)">
            <summary>
            Get the last non-whitespace character from a string.
            </summary>
            <param name="s">The string</param>
            <param name="index">The first character position of the substring to examine</param>
            <param name="length">The length of the substring to examine</param>
            <returns>Last non-whitespace character. If all whitespace or empty string, returns Char.MinValue (0).</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Find first occurrence of a character in a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to examine</param>
            <param name="c">The character to find within <i>sb</i>.</param>
            <returns>Index of first occurrence of <i>c</i> within <i>sb</i>, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLastNonWhiteSpaceChar(System.String,System.Int32,System.Int32)">
            <summary>
            Get the index of the last non-whitespace character from a string.
            </summary>
            <param name="s">The string</param>
            <param name="index">The first character position of the substring to examine</param>
            <param name="length">The length of the substring to examine</param>
            <returns>Index of Last non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsBlank(System.String)">
            <summary>
            Returns true if a string is blank (i.e. null, zero length, or only whitespace).
            </summary>
            <param name="s">The string to examine.</param>
            <returns>True if s is null, zero length, or contains only whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsBlank(System.String,System.Int32,System.Int32)">
            <summary>
            Returns true if a string is blank (i.e. null, zero length, or only whitespace).
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to begin examining.</param>
            <param name="length">The number of character positions to examine.</param>
            <returns>True if s is null, zero length, or if the specified range contains only whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsBlank(System.Text.StringBuilder)">
            <summary>
            Returns true if a string is blank (i.e. null, zero length, or only whitespace).
            </summary>
            <param name="sb">The string to examine.</param>
            <returns>True if sb is null, zero length, or contains only whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsLower(System.String)">
            <summary>
            Determine if all the letters in a string are lower case.
            </summary>
            <param name="text">The string to examine.</param>
            <returns>True if all letters that appear in the string, if any, 
            are lowercase. False if any there are any uppercase letters.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsUpper(System.String)">
            <summary>
            Determine if all the letters in a string are upper case.
            </summary>
            <param name="text">The string to examine.</param>
            <returns>True if all letters that appear in the string, if any, are uppercase. False if any there are any lowercase letters.</returns>
        </member>
        <member name="M:Sovren.StringHelper.Join(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Joins a list of strings together using a specified separator.
            </summary>
            <param name="separator">Separator placed between each word.</param>
            <param name="items">Items to be joined.</param>
            <returns>String containing each item separated by specified separator.</returns>
            <remarks>The separator is only placed between items, not before the first item or after the last item.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLetterOrDigit(System.String,System.Int32)">
            <summary>
            Determine the index of the first LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the first LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLetterOrDigit(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the first LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the first LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLetterOrDigit(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determine the index of the first LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="stopAtLineBreak">When true, the examination will stop if a line break is encountered.</param>
            <returns>Index of the first LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLineBreak(System.String,System.Int32)">
            <summary>
            Determine the index of the next line break character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the next line break character; -1 if there is no next line break.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfLineBreak(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the next line break character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the next line break character; -1 if there is no next line break within the specified range.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNextLine(System.String,System.Int32)">
            <summary>
            Determine the index of the first character of the next line.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the first character of the next line; -1 if there is no next line.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNextLine(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the first character of the next line.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the first character of the next line; -1 if there is no next line.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNonWhiteSpace(System.String,System.Int32)">
            <summary>
            Determine the index of the first non-whitespace character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the first non-whitespace character in the specified range; -1 if string is null or empty or all whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNonWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the first non-whitespace character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the first non-whitespace character in the specified range; -1 if string is null or empty or all whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNonWhiteSpace(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determine the index of the first non-whitespace character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="stopAtLineBreak">When true, the examination will stop if a line break is encountered.</param>
            <returns>Index of the first non-whitespace character in the specified range; -1 if string is null or empty or all whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfWhiteSpace(System.String,System.Int32)">
            <summary>
            Determine the index of the first whitespace character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the first whitespace character in the specified range; -1 if string is null or empty or has no whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the first whitespace character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the first whitespace character in the specified range; -1 if string is null or empty or has no whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IndexOfNormalized(System.String,System.String,System.StringComparison,System.Int32@)">
            <summary>
            Find the first occurrence of a string, according to text normalization rules (see <see cref="M:Sovren.StringHelper.NormalizeText(System.String,Sovren.List{System.Int32,System.Int32}@)"/>).
            </summary>
            <param name="source">The string to search within.</param>
            <param name="value">The string to seek within <i>source</i>.</param>
            <param name="comparisonType">The cultural string comparison rule.</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.StringHelper.FirstIndexOfNonWhiteSpace(System.String,System.Int32)">
            <summary>
            Get the first non-whitespace character from a string.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from left to right).</param>
            <returns>First non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FirstIndexOfNonWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Get the first non-whitespace character from a string.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from left to right).</param>
            <param name="count">The number of characters to inspect.</param>
            <returns>First non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FirstIndexOfAnyExcept(System.String,System.Int32,System.Char[])">
            <summary>
            Get the first character that is not one of the specified characters.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from left to right).</param>
            <param name="chars">The chars to skip.</param>
            <returns>First non-matching character. If all that character or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.FirstIndexOfAnyExcept(System.String,System.Int32,System.Int32,System.Char[])">
            <summary>
            Get the first character that is not one of the specified characters.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from left to right).</param>
            <param name="count">The number of characters to inspect.</param>
            <param name="chars">The chars to skip.</param>
            <returns>First non-matching character. If all that character or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfNonWhiteSpace(System.String)">
            <summary>
            Get the last non-whitespace character from a string.
            </summary>
            <param name="s">The string to examine.</param>
            <returns>Last non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfNonWhiteSpace(System.String,System.Int32)">
            <summary>
            Get the last non-whitespace character from a string.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from right to left).</param>
            <returns>Last non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfNonWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Get the last non-whitespace character from a string.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from right to left).</param>
            <param name="count">The number of characters to inspect.</param>
            <returns>Last non-whitespace character. If all whitespace or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfAnyExcept(System.String,System.Int32,System.Char[])">
            <summary>
            Get the last character that is not one of the specified characters.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from right to left).</param>
            <param name="chars">The chars to skip.</param>
            <returns>Last non-matching character. If all that character or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfAnyExcept(System.String,System.Int32,System.Int32,System.Char[])">
            <summary>
            Get the last character that is not one of the specified characters.
            </summary>
            <param name="s">The string to examine.</param>
            <param name="startAt">The character position to start searching at (from right to left).</param>
            <param name="count">The number of characters to inspect.</param>
            <param name="chars">The chars to skip.</param>
            <returns>Last non-matching character. If all that character or empty string, returns -1.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfLetterOrDigit(System.String,System.Int32)">
            <summary>
            Determine the index of the last LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <returns>Index of the last LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfLetterOrDigit(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the index of the last LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>Index of the last LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.LastIndexOfLetterOrDigit(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determine the index of the last LetterOrDigit character.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="startAt">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="stopAtLineBreak">When true, the examination will stop if a line break is encountered.</param>
            <returns>Index of the last LetterOrDigit character in the specified range; -1 if string is null or empty or has no LetterOrDigit.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsLineBlank(System.String,System.Int32)">
            <summary>
            Determines if the line beginning at the specified position is blank.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="indexOfLine">Position of the first character of the line, or the position of the line break for zero length lines.</param>
            <returns>True if the line that begins at <c>indexOfLine</c> is empty or contains only whitespace; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsLineBreak(System.Char)">
            <summary>
            Determines if the specified character is a line break character.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>True if the specified character is a line break character; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.StringHelper.NormalizeText(System.String)">
            <summary>
            Normalizes strings so that string searching is unaffected by excess internal whitespace and leading/trailing punctuation.
            </summary>
            <param name="source">The string to remove spaces from.</param>
            <returns>The source text modified to contain no more than one adjacent space character.</returns>
            <remarks>
            <para>Reduce spans of adjacent space characters to a single space character.</para>
            <para>Remove leading and trailing non-alphanumeric characters.</para>
            </remarks>
        </member>
        <member name="M:Sovren.StringHelper.NormalizeText(System.String,Sovren.List{System.Int32,System.Int32}@)">
            <summary>
            Normalizes strings so that string searching is unaffected by excess internal whitespace and leading/trailing punctuation.
            Information about the normalization is preserved so that searches can return the full un-normalized substring.
            </summary>
            <param name="source">The string to remove spaces from.</param>
            <param name="deletedSpans">The list of space spans that were removed, if any; otherwise, null.</param>
            <returns>The source text modified to contain no more than one adjacent space character.</returns>
            <remarks>
            <para>Reduce spans of adjacent space characters to a single space character.</para>
            <para>Remove leading and trailing non-alphanumeric characters.</para>
            </remarks>
        </member>
        <member name="M:Sovren.StringHelper.ReadLines(System.String)">
            <summary>
            Split text into a list of lines.
            </summary>
            <param name="text">The text to be split.</param>
            <returns>The text as a list of lines. The line break characters are removed.</returns>
        </member>
        <member name="M:Sovren.StringHelper.TrimLines(System.Collections.Generic.IList{System.String})">
            <summary>
            Trim all strings in a list.
            </summary>
            <param name="list">The list of strings to trim.</param>
        </member>
        <member name="M:Sovren.StringHelper.ToUpper(System.String)">
            <summary>
            Converts the string to uppercase.
            Only allocates new memory if the string contains lowercase characters.
            </summary>
            <param name="s">The string to convert</param>
            <returns>The uppercase version of <i>s</i>.</returns>
        </member>
        <member name="M:Sovren.StringHelper.ToUpper(System.String,System.Globalization.TextInfo)">
            <summary>
            Converts the string to uppercase using the specified TextInfo.
            Only allocates new memory if the string contains lowercase characters.
            </summary>
            <param name="s">The string to convert</param>
            <param name="textInfo">Culture information for the conversion</param>
            <returns>The uppercase version of <i>s</i> according to <i>textInfo</i>.</returns>
        </member>
        <member name="M:Sovren.StringHelper.TrimmedLength(System.String)">
            <summary>
            Determine the length of a string, excluding any leading or trailing whitespace.
            </summary>
            <param name="s">The string.</param>
            <returns>Length of the string, excluding and trailing whitespace.</returns>
            <remarks>The length is calculated without performing any memory allocations. The built-in
            Trim functions are not used.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimmedLength(System.String,System.Int32,System.Int32)">
            <summary>
            Determine the length of a string, excluding any leading or trailing whitespace.
            </summary>
            <param name="s">The string.</param>
            <param name="startAt">The character position within <c>s</c> to begin examining.</param>
            <param name="count">The number of character positions within <c>s</c> to examine.</param>
            <returns>Length of the string, excluding and trailing whitespace.</returns>
            <remarks>The length is calculated without performing any memory allocations. The built-in
            Trim functions are not used.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimmedLineLength(System.String,System.Int32)">
            <summary>
            Length of the trimmed line within some text that contains the specified index.
            </summary>
            <param name="text">The text to examine.</param>
            <param name="index">Position of any character within the line or one of the line break characters for that line.</param>
            <returns>Length of line containing the <c>startAt</c> position, excluding leading and trailing whitespace.</returns>
        </member>
        <member name="M:Sovren.StringHelper.GetLineInfo(System.String,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Gets the placement of a line within a string.
            </summary>
            <param name="text">The string to examine.</param>
            <param name="index">The position of a character (or line break character) within a line in the text.</param>
            <param name="startAt">The position of the first character in the line.</param>
            <param name="count">The number of characters in the line, not counting the line break characters.</param>
            <param name="trimmed">When true, the <c>startAt</c> and <c>count</c> values exclude leading and trailing whitespace.</param>
        </member>
        <member name="M:Sovren.StringHelper.TrimNonLetterOrDigit(System.String)">
            <summary>
            Remove all leading and trailing characters that are neither letters nor digits.
            </summary>
            <param name="s">The string to be trimmed.</param>
            <returns>The string with leading and trailing characters removed.</returns>
            <remarks>A new string object is only allocated if it is different than the original string.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimStartNonLetterOrDigit(System.String)">
            <summary>
            Remove all leading characters that are neither letters nor digits.
            </summary>
            <param name="s">The string to be trimmed.</param>
            <returns>The string with leading characters removed.</returns>
            <remarks>A new string object is only allocated if it is different than the original string.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimBlankLines(System.String)">
            <summary>
            Remove all leading and trailing blank lines from some text.
            </summary>
            <param name="text">The text to be trimmed.</param>
            <returns>The text without any leading and trailing blank lines.</returns>
            <remarks>A new string object is only allocated if it is different than the original string.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimEndNonLetterOrDigit(System.String)">
            <summary>
            Remove all trailing characters that are neither letters nor digits.
            </summary>
            <param name="s">The string to be trimmed.</param>
            <returns>The string with trailing characters removed.</returns>
            <remarks>A new string object is only allocated if it is different than the original string.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.TrimNonLetterOrDigit(System.String,System.Boolean,System.Boolean)">
            <summary>
            Remove leading and/or trailing characters that are neither letters nor digits.
            </summary>
            <param name="s">The string to be trimmed.</param>
            <param name="trimStart">When true, the start is trimmed.</param>
            <param name="trimEnd">When true, the end is trimmed.</param>
            <returns>The string with leading and/or trailing characters removed.</returns>
            <remarks>A new string object is only allocated if it is different than the original string.</remarks>
        </member>
        <member name="M:Sovren.StringHelper.IsBullet(System.Char)">
            <summary>
            Returns true if the specified character is commonly used as a bullet.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>True if <i>c</i> is commonly used as a bullet; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.StringHelper.IsBulleted(System.String)">
            <summary>
            Returns true if the text contains bulleted lines.
            </summary>
            <param name="text">The text to examine.</param>
            <returns>True if the text contains bulleted lines; otherwise, false.</returns>
        </member>
        <member name="T:Sovren.WalkingTheObjectProperties">
            <summary>
            This unit is intended to show you how to extract data from the 
            parser after parsing.
            
            Several useful Sovren utility methods are also demonstrated here.
            
            This unit is available in source code form by request. 
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughParserOutput(Sovren.ParserMapper)">
            <summary>
            Walk through commonly used parts of the parser output.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughName(Sovren.ParserMapper)">
            <summary>
            This is how you extract the candidate's name.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughEmailAddressesAndURLs(Sovren.ParserMapper)">
            <summary>
            This is how you extract the candidate's email address(es) and personal webpage.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughPostalAddresses(Sovren.ParserMapper)">
            <summary>
            This is how you extract the candidate's postal address(es).  Candidates may 
            have more than one address.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughPhones(Sovren.ParserMapper)">
            <summary>
            This is how you get the candidate's phone info.  DO NOT USE any other method.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughWorkHistory(Sovren.ParserMapper)">
            <summary>
            This is how you iterate through the candidate's job history and pull out the 
            data job-by-job.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughPersonalData(Sovren.ParserMapper)">
            <summary>
            We can parse for a LOT of personal data.  This is how to access that data after parsing,
            assuming you turned that type of parsing on in the parser configuration.
            There are regulatory and legal issues surrounding this data, and you need to
            be careful that you do not capture data that is not in compliance with your locale's
            governance.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughEducation(Sovren.ParserMapper)">
            <summary>
            This is how you iterate through the candidate's educational history 
            and pull out the school/degree history one by one.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughLanguages(Sovren.ParserMapper)">
            <summary>
            This is how you can get the foreign language data, if you have set the 
            parser to parse for that.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughSkills(Sovren.ParserMapper)">
            <summary>
            This is how you get to the skills data, skill by skill.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughCertificationsAndLicenses(Sovren.ParserMapper)">
            <summary>
            This is how you access license and certification data, if you have enabled that in the parser.
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.WalkThroughReferences(Sovren.ParserMapper)">
            <summary>
            This is how to access data on references.  The HR-XML Resume 2_4 schema
            does not have a place for Employer name, unfortunately....
            </summary>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.ConvertPhoneToJustNumbers(System.String)">
            <summary>
            This shows how to use the RrLib1.LeaveJustIntegers() method to take a
            string such as a phone number and strip out everything other than the 
            digits.  Thus, "(505) 678-0987" would be returned as "5056780987".
            </summary>
            <param name="aPhone"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.LoadMyFileIntoAByteArray(System.String)">
            <summary>
            This shows using the FileHelper.ReadAllBytes method for loading 
            a diskfile into a byte array.  This byte array can then be passed to 
            the DoConversion() method of the Sovren Document Converter. The advantage
            of this method over <see cref="M:System.IO.File.ReadAllBytes(System.String)"/> is that this method
            can read files that are currently open by other applications like Microsoft Word.
            </summary>
            <param name="pathToFile">Pathname for file to be loaded.</param>
            <returns>A byte array containing the contents of the file. If file does not exist,
            then an empty array is returned.</returns>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.LoadStringIntoByteArray(System.String)">
            <summary>
            This method shows how to load a string into a byte array.
            You have to know what kind of encoding you want to use.
            A Unicode encoding such as UTF-8 is usually the best option.
            </summary>
            <param name="myString">The string to be loaded into the byte array.</param>
            <returns>The string encoded in UTF-8 format.</returns>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.StripOutCharactersThatCauseXMLAndSoapToRejectTheData(System.String)">
            <summary>
            Certain characters, such as control characters, cause an otherwise valid
            XML string to be unusable in SOAP calls, and in loading and validating 
            the XML.  This method shows how to use the RrLib1.CleanTextForSoapTransport()
            method to clean out bad xml data.  IF YOU EVER GET XML ERRORS WORKING WITH
            Sovren XML output (and you never should...), this method can be applied to 
            the data to fix it.
            </summary>
            <param name="xmlData">The XML data to be cleaned.  DO NOT pass binary data!</param>
            <returns>A cleaned string with no XML-invalid characters.</returns>
        </member>
        <member name="M:Sovren.WalkingTheObjectProperties.ChangeDataInAParserDataArrayBeforeParsing">
            <summary>
            There are hundreds of public data lists (see DataLists class), and all of those lists
            are user-modifiable at runtime.  Changing the data
            in these arrays will affect the output of the Parser.  For instance, changing the data
            in the COMPANY_NAME_EXCEPTIONS list will affect the recognition of company names that
            are unrecognizable (usually because they were thought up by some marketing firm).  So,
            if "BGUP" is a company, and the Parser is not recognizing it as a company, then you 
            could change COMPANY_NAME_EXCEPTIONS to include "BGUP", and the Parser would
            then find BGUP as a company.
            
            These changes are global, meaning that all instances of the Parser
            will use the new data.  Of course, that does not mean that **after you bring the app down**,
            the new data is somehow "saved" and reused.  These changes are in-memory only.
            </summary>
        </member>
        <member name="T:Sovren.TreSearchType">
            <summary>
            Enums for search types.
            </summary>
        </member>
        <member name="T:Sovren.Gender">
            <summary>
            A person's gender.
            </summary>
        </member>
        <member name="F:Sovren.Gender.Unknown">
            <summary>
            Gender is not specified.
            </summary>
        </member>
        <member name="F:Sovren.Gender.Male">
            <summary>
            Person is male.
            </summary>
        </member>
        <member name="F:Sovren.Gender.Female">
            <summary>
            Person is female.
            </summary>
        </member>
        <member name="T:Sovren.MaritalStatus">
            <summary>
            A person's marital status.
            </summary>
        </member>
        <member name="F:Sovren.MaritalStatus.Unknown">
            <summary>
            Marital status is not known.
            </summary>
        </member>
        <member name="F:Sovren.MaritalStatus.Single">
            <summary>
            Person is single.
            </summary>
        </member>
        <member name="F:Sovren.MaritalStatus.Married">
            <summary>
            Person is married.
            </summary>
        </member>
        <member name="F:Sovren.MaritalStatus.Divorced">
            <summary>
            Person is divorced.
            </summary>
        </member>
        <member name="F:Sovren.MaritalStatus.Separated">
            <summary>
            Person is separated.
            </summary>
        </member>
        <member name="T:Sovren.YesNo">
            <summary>
            A three-state boolean value: Unknown, No, Yes.
            </summary>
        </member>
        <member name="F:Sovren.YesNo.Unknown">
            <summary>
            Value is not known.
            </summary>
        </member>
        <member name="F:Sovren.YesNo.No">
            <summary>
            No, negative
            </summary>
        </member>
        <member name="F:Sovren.YesNo.Yes">
            <summary>
            Yes, affirmitive
            </summary>
        </member>
        <member name="T:Sovren.rrRegEx">
            <summary>
            This class is used to provide fast, flexible parsing for a variety of
            parsing routines.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.GetGermanEduTitles(Sovren.ParserSettings,System.String,System.Boolean)">
            <summary>
            Finds German educational titles using the patterns in GERMAN_EDUCATIONAL_TITLE_REGEXES.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to inspect.</param>
            <param name="adhereTitleToPrecedingColonPhrase">If true, then any preceding phrase that starts with a colon will be returned as a prefix to the title (like: Diploma: Dipl. Something).</param>
            <returns>CAUTION!!! May return null. Else, returns each title and the offset of that title in the text.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.GetSSNString(System.String,System.Int32@)">
            <summary>
            Get SNN and any preceding label.
            </summary>
            <param name="text">Text to search.</param>
            <param name="offset">The offset in the text at which the SSN was found, or -1.</param>
            <returns>Return value includes preceding label, if any.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.GetSSNString(System.String,System.Int32@,System.String@)">
            <summary>
            Get SNN and any preceding label.
            </summary>
            <param name="text">Text to search.</param>
            <param name="offset">The offset in the text at which the SSN was found, or -1.</param>
            <param name="justTheNumber">Just the number, no label.</param>
            <returns>Return value includes preceding label, if any.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.GetMatchPattern(Sovren.TreSearchType)">
            <summary>
            Returns the RegEx Pattern string for a given search type enumerated value.
            </summary>
            <param name="searchType"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.ExpungePageNumbers(System.String)">
            <summary>
            Removes Page ## markers from resumes.  Fuzzy match.
            DANGEROUS: CAN APPEAR TO HANG ON LONG GARBAGE TEXTS.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.ExpungePageNumbers(Sovren.TStringList,System.String,System.String,System.String)">
            <summary>
            Removes Page ## markers from resumes.  Fuzzy match.  DANGEROUS: CAN APPEAR TO HANG ON LONG GARBAGE TEXTS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.ExpungeCopyrightLines(System.String)">
            <summary>
            Remove copyright phrases beginning with some combination of "Copyright, © or (c)" followed
            by a 4-digit number and continuing until the end of the line.
            </summary>
            <param name="InText">Multiline text</param>
            <returns>Text with all copyright phrases removed.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.FindPossibleCityState(System.String,System.String@,System.String@)">
            <summary>
            Finds cities and states without lookup lists.
            </summary>
            <param name="inText"></param>
            <param name="city"></param>
            <param name="state"></param>
        </member>
        <member name="M:Sovren.rrRegEx.BestNameMatch(Sovren.ParserSettings,System.String)">
            <summary>
            Given any text, finds the best human name match.
            </summary>
            <param name="settings"></param>
            <param name="inText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.PossibleEngineeringDegree(Sovren.ParserSettings,System.String,System.Boolean@)">
            <summary>
            Finds 4-letter engineering degrees.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.PossibleMinor(Sovren.ParserSettings,System.String,System.String@)">
            <summary>
            Finds college majors in text.  No lookup lists used.
            </summary>
            <param name="settings"></param>
            <param name="InText">The text to find a minor within. For example: B.S. Computer Science, Minor in Mathematics</param>
            <param name="phrase">The full phrase that was matched. For example: Minor in Mathematics</param>
            <returns>The name of the minor, without the leading phrase. For example: Mathematics</returns>
        </member>
        <member name="M:Sovren.rrRegEx.PossibleCompanyNameBySuffix(Sovren.ParserSettings,System.String,System.String@,System.String@)">
            <summary>
            Finds company names by looking for words ending in certain suffixes,
            and with certain capitalization patterns.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.CollapseExpandedWords(System.String)">
            <summary>
            Collapses E X P A N D E D  W O R D S.
            </summary>
            <param name="text">The text to be examined.</param>
            <returns>The collapsed text.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.CollapseSpaces(System.Text.StringBuilder)">
            <summary>
            Collapse all spans of space characters to a single space.
            </summary>
            <param name="text">The text containing space spans to be collapsed.</param>
        </member>
        <member name="M:Sovren.rrRegEx.IsValidIPAddress(System.String)">
            <summary>
            Is the dotted address valid for IP?
            </summary>
            <param name="dottedAddress">\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.FindUrl(Sovren.ParserSettings,System.String)">
            <summary>
            Find a URL.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to be searched.</param>
            <returns>Text of the URL, or String.Empty if a URL was not found.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.FindUrl(Sovren.ParserSettings,System.String,System.Int32,System.Int32@)">
            <summary>
            Find a URL.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to be searched.</param>
            <param name="startAt">The index to start searching at.</param>
            <param name="foundAt">This is the index at which the URL was found (or -1 if URL was not found).</param>
            <returns>Text of the URL, or String.Empty if a URL was not found.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.PhoneIsDisqualified(System.String,System.String,System.Int32,Sovren.ParserSettings,System.Collections.Generic.List{System.String}@)">
            <summary>
            Determine if the phone number text (and its surrounding context) indicate a false positive.
            </summary>
            <param name="text">The section of text that the phone number was found within.</param>
            <param name="matchText">The phone number text that was matched.</param>
            <param name="matchIndex">The index of <c>matchText</c> within <c>line</c>.</param>
            <param name="settings"></param>  
            ///<param name="phonesFound">Returns the list of phones when multiple phones were found.</param>
            <returns>True if the text is not a phone number.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.FindPhones(Sovren.ParserSettings,System.String@,System.Boolean)">
            <summary>
            Finds all the phone numbers in the text, and tries to find their respective phone number types.
            </summary>
            <param name="settings">Settings for parsing</param>
            <param name="inText">Text to be parsed for phones</param>
            <param name="scrubOutData">If true, phones and their type text will be replaced with spaces and the inText parameter value will change accordingly.</param>
            <returns>List of phones/types if any were found. Empty list if nothing was found. Never returns null.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.IsDatesNotPhone(System.String,Sovren.ParserSettings)">
            <summary>
            DO NOT use this on general text strings or it will give the wrong answer. This is for use on strings that are suspected of being phones, but which ma actually be dates instead.
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.ScrubPhoneText(System.String)">
            <summary>
            When the phone did not exactly match a pattern, then we need to scrub it. This
            method removes parts of the matched text that are invalid.
            </summary>
            <param name="text">The text that was matched with a loose pattern.</param>
            <returns>Phone text with bad leading/trailing parts removed.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.FindPhoneNumber(System.String)">
            <summary>
            Alternate method for parsing a phone number from text.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="F:Sovren.rrRegEx._regexUrl">
            <summary>
            DO NOT USE. NOT ACCURATE. MANY FALSE POSITIVES.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.FindNumberOfMonths(Sovren.ParserSettings,System.String)">
            <summary>
            Find phrases like "7 months" or "(72 months)", BUT NOT embedded phrases like
            "I was going to leave in around 11 months, but I never did."
            </summary>
            <param name="settings">Parser settings.</param>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrRegEx.GetYesNo(Sovren.ParserSettings,System.String)">
            <summary>
            Determines whether the string represents the value Yes, No or neither.
            </summary>
            <param name="settings"></param>
            <param name="s">The string to be parsed</param>
            <returns>A YesNo value that is the best match for the specified string.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.GetStringField(System.String,System.Text.RegularExpressions.Regex,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Gets the value for a string field specified by regex.
            </summary>
            <param name="source">A string that may contain a field.</param>
            <param name="regex">A regular expression describing the field format.</param>
            <param name="phrase">The entire field label/value phrase.</param>
            <param name="phraseIndex">The index within source of phrase.</param>
            <param name="settings">Parser settings.</param>
            <returns>A string representation of the field value, or String.Empty if not specified.</returns>
        </member>
        <member name="M:Sovren.rrRegEx.StringFieldMatch(System.Text.RegularExpressions.Match,System.Object@,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Matches a string field value, unless the text:
              1) indicates that the value is "unspecified", or
              2) is a resume section header
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.YesNoFieldMatch(System.Text.RegularExpressions.Match,System.Object@,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Matches a Yes/No field value.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.MoneyFieldMatch(System.Text.RegularExpressions.Match,System.Object@,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Matches a Money field value.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.DateOfBirthFieldMatch(System.Text.RegularExpressions.Match,System.Object@,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Matches a Date of Birth field value.
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.GenderFieldMatch(System.Text.RegularExpressions.Match,System.Object@,System.String@,System.Int32@,Sovren.ParserSettings)">
            <summary>
            Matches a string field value, unless the text indicates that the value is "unspecified".
            </summary>
        </member>
        <member name="M:Sovren.rrRegEx.GetPhrasesThatStartWithASingleCapitalizedWord(Sovren.ParserSettings,System.String)">
            <summary>
            Must have > 1 words.
            </summary>
        </member>
        <member name="T:Sovren.rrRegEx.FieldMatchDelegate">
            <summary>
            This method is invoked by GetFieldValue for each matching field to determine whether it contains a valid value.
            When this method returns true, GetFieldValue stops searching and returns the current value and phrase.
            When this method returns false, GetFieldValue looks for the next match.
            </summary>
        </member>
        <member name="T:Sovren.TDoubleList">
            <summary>
            Manages list of two string fields.
            </summary>
        </member>
        <member name="F:Sovren.TDoubleList.FIELD_SEPARATOR">
            <summary>
            Use an improbable value.
            </summary>
        </member>
        <member name="P:Sovren.TDoubleList.Marker">
            <summary>
            This property is a user-defined convenience field like the Tag property.  It has no intrinsic usage nor meaning.
            </summary>
        </member>
        <member name="P:Sovren.TDoubleList.Tag">
            <summary>
            This property is a user-defined convenience field like the Marker property.  It has no intrinsic usage nor meaning.
            </summary>
        </member>
        <member name="T:Sovren.Tuple`2">
            <summary>
            This generic tuple represents two strongly typed values.
            </summary>
            <typeparam name="A">The type of the first value in each tuple.</typeparam>
            <typeparam name="B">The type of the second value in each tuple.</typeparam>
        </member>
        <member name="T:Sovren.Tuple`3">
            <summary>
            This generic tuple represents three strongly typed values.
            </summary>
            <typeparam name="A">The type of the first value in each tuple.</typeparam>
            <typeparam name="B">The type of the second value in each tuple.</typeparam>
            <typeparam name="C">The type of the third value in each tuple.</typeparam>
        </member>
        <member name="T:Sovren.List`2">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="A">The type of the first value in each tuple.</typeparam>
            <typeparam name="B">The type of the second value in each tuple.</typeparam>
        </member>
        <member name="M:Sovren.List`2.#ctor">
            <summary>
            Initializes a new instance of this class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Sovren.List`2.#ctor(System.Collections.Generic.IEnumerable{Sovren.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of this class that contains elements copied from the specified
            collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:Sovren.List`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Sovren.List`2.Add(`0,`1)">
            <summary>
            Adds an entry to the end of the list.
            </summary>
            <param name="a">A value of type <paramref name="a"/>.</param>
            <param name="b">A value of type <paramref name="b"/>.</param>
        </member>
        <member name="M:Sovren.List`2.IndexOfValue1(`0)">
            <summary>
            Find the first occurrence of Value1.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue1">
            <summary>
            Sort the list by Value1 in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue1(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the list by Value1 according to the specified comparer.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue1Descending">
            <summary>
            Sort the list by Value1 in descending order.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue2">
            <summary>
            Sort the list by Value2 in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue2(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sort the list by Value2 according to the specified comparer.
            </summary>
        </member>
        <member name="M:Sovren.List`2.SortByValue2Descending">
            <summary>
            Sort the list by Value2 in descending order.
            </summary>
        </member>
        <member name="T:Sovren.List`3">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="A">The type of the first value in each tuple.</typeparam>
            <typeparam name="B">The type of the second value in each tuple.</typeparam>
            <typeparam name="C">The type of the third value in each tuple.</typeparam>
        </member>
        <member name="M:Sovren.List`3.#ctor">
            <summary>
            Initializes a new instance of this class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Sovren.List`3.#ctor(System.Collections.Generic.IEnumerable{Sovren.Tuple{`0,`1,`2}})">
            <summary>
            Initializes a new instance of this class that contains elements copied from the specified
            collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:Sovren.List`3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Sovren.List`3.Add(`0,`1,`2)">
            <summary>
            Adds an entry to the end of the list.
            </summary>
            <param name="a">A value of type <paramref name="a"/>.</param>
            <param name="b">A value of type <paramref name="b"/>.</param>
            <param name="c">A value of type <paramref name="c"/>.</param>
        </member>
        <member name="M:Sovren.List`3.SortByValue1">
            <summary>
            Sort the list by Value1 in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.List`3.SortByValue1Descending">
            <summary>
            Sort the list by Value1 in descending order.
            </summary>
        </member>
        <member name="M:Sovren.List`3.SortByValue2">
            <summary>
            Sort the list by Value2 in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.List`3.SortByValue2Descending">
            <summary>
            Sort the list by Value2 in descending order.
            </summary>
        </member>
        <member name="M:Sovren.List`3.SortByValue3">
            <summary>
            Sort the list by Value3 in ascending order.
            </summary>
        </member>
        <member name="M:Sovren.List`3.SortByValue3Descending">
            <summary>
            Sort the list by Value3 in descending order.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlRole">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Role [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOtherPublicationType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OtherPublicationType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlMilitaryHistory">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for MilitaryHistory [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlLicenseOrCertification">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for LicenseOrCertification [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlInventors">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Inventors [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCopyrightType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CopyrightType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCollectionHD">
             <summary>
            hrxmlCollectionHD is the base class for some HR-XML classes that are just 
             collections of a single type.
             </summary>
        </member>
        <member name="T:Sovren.Searchers">
            <summary>
            Targeted performance-tuned string searches.
            </summary>
        </member>
        <member name="M:Sovren.Searchers.RefreshStringSearchAlgorithmCache">
            <summary>
            Purges the entire StringSearchAlgorithm cache.  WARNING: This will soon be relocated to the data management APIs.
            </summary>
        </member>
        <member name="M:Sovren.Searchers.RefreshStringSearchAlgorithmCache(System.String[])">
            <summary>
            Purges the specified list from the StringSearchAlgorithm cache.  WARNING: This will soon be relocated to the data management APIs.
            </summary>
        </member>
        <member name="M:Sovren.ResumeSectionList.TotalSpanForSectionType(System.String)">
            <summary>
            "Span" means EndLine - StartLine.
            </summary>
        </member>
        <member name="T:Sovren.ResumeSections">
            <summary>
            This class is used for sectioning a resume.
            </summary>
        </member>
        <member name="F:Sovren.ResumeSections.AdditionalSections">
            <summary>
            This info is being accumulated but not used. This is where we put
            headers that appear to be "microinformation" inside of a job, like
            "Skills used" that may appear inside each job text.
            </summary>
        </member>
        <member name="F:Sovren.ResumeSections.INCOMPLETE_WORK_HISTORY_MARKERS">
            <summary>
            Integrators: Don't use this directly.
            </summary>
        </member>
        <member name="M:Sovren.ResumeSections.FindEducationHeaderLineNbrsDisregardFollowing">
            <summary>
            Look for things like:     Education   1988 UVa B.S. in Commerce
            </summary>
        </member>
        <member name="M:Sovren.ResumeSections.GetPattern(Sovren.ResumeSections.HeaderType)">
            <summary>
            Prepares this class for re-use on another resume.
            </summary>
        </member>
        <member name="M:Sovren.ResumeSections.HasForeignLanguages">
            <summary>
            Foreign, not computer...
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.ResumeSections.LocateHeaders(Sovren.TStringList)">
            <summary>
            PREFERRED method for performance reasons.  Very efficient.
            Methodology:  
            1) Iterates over the resume lines only once.
            2) Skips lines that do not begin with an uppercase letter.
            3) Only tries to match header names that start with the same 
               first letter as the line.
            </summary>
            <param name="resumeLines"></param>
        </member>
        <member name="M:Sovren.ResumeSections.NormalizeHeaderLine(System.String)">
            <summary>
            Encapsulates all the work to normalize a header line, so that other classes can
            rely on this logic to disqualify lines that are headers.
            </summary>
            <param name="line">A possible header line.</param>
            <returns>A line of text that has been normalized for the purpose of checking to see if it is a header.</returns>
        </member>
        <member name="M:Sovren.ResumeSections.SearchForHeader(System.String,System.Int32,System.Char)">
            <summary>
            Seeks matching header names.
            </summary>
            <param name="normalizedLine">Line of text to be evaluated.</param>
            <param name="lineNbr">Line number being evaluated.</param>
            <param name="arrayLetterOverride">Use a different "first letter" to find a possible section header match.</param>
        </member>
        <member name="M:Sovren.ResumeSections.LooksLikeEducationContent(Sovren.ResumeSection)">
            <summary>
            Check to see if a section contains Education content.
            </summary>
            <param name="section">The section to inspect.</param>
            <returns>True if section contains Education content; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.ResumeSections.Clear(System.Boolean)">
            <summary>
            DRASTIC.  This unloads all of the hundreds of possible section header 
            names that it needs to function.  Probably no reason to ever do this.
            </summary>
            <param name="clearPersistentDataToo"></param>
        </member>
        <member name="T:Sovren.hrxmlSupportingMaterial">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SupportingMaterial [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlRankAchievedType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for RankAchievedType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.SortEmployerOrgsByEndDateDesc">
            <summary>
            Sorts EmployerOrg by descending order of EndDate.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEmploymentHistoryType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EmploymentHistory [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlEmploymentHistoryType.HasBeenSelfEmployed">
            <summary>
            Has the candidate ever been self employed?
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Sovren.hrxmlEmploymentHistoryType.Sort">
            <summary>
            Sorts by End Date, descending (reverse chronological order, i.e., correct resume order).
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDistributeTo">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DistributeTo [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Add a key/value pair. Duplicates are allowed.
            </summary>
            <param name="key">The key portion.</param>
            <param name="value">The value portion.</param>
            <remarks>
            This is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Sovren.MultiDictionary`2.ContainsValue(`1)">
            <summary>
            Determine if this collection contains the specified value.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>True if this collection contains the <paramref name="value"/>; otherwise false.</returns>
            <remarks>
            This is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Sovren.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            Remove the specified key/value pair, including all duplicates.
            </summary>
            <param name="key">The key portion of the pair.</param>
            <param name="value">The value portion of the pair.</param>
            <returns>True if value existed; otherwise false.</returns>
            <remarks>
            The cost is O(1) to find the key plus and O(n) where n is the number of values for that key.
            </remarks>
        </member>
        <member name="P:Sovren.MultiDictionary`2.Count">
            <summary>
            Returns the number of Keys in the collection.
            </summary>
            <remarks>
            This is an O(1) operation.
            </remarks>
        </member>
        <member name="P:Sovren.MultiDictionary`2.CountValues">
            <summary>
            Returns the number of Values in the collection.
            </summary>
            <remarks>
            This is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Sovren.EuropassCV.#ctor">
            <summary>
            Do not use this constructor. It is here solely for COM compatibility.
            </summary>
        </member>
        <member name="T:Sovren.TaxonomyMap">
            <summary>
            TaxonomyMap is a class to hold mappings from Sovren's 
            built-in taxonomy to a user's internal taxonomy,
            while still using Sovren's taxonomy for parsing.  
            
            A Sovren TaxonomyId can map to just one user
            Taxonomy Id.  If a subsequent entry is added
            for a given SovrenTaxonomyId, then that entry
            will overwrite the first entry.
            
            When there is no mapping provided for a given
            Sovren Taxonomy Id, then the User Taxonomy Id
            and Taxonomy Name are assumed to be the same 
            as the Sovren ones.
            
            NOTE:  If the user uses his own custom taxonomy 
            for parsing, there is no need for a map, as the 
            taxonomy IDs and Names would already match what 
            he was expecting.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyMap.#ctor">
            <summary>
            Default parameterless constructor.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomyMap.GetUserTaxonomyIdForSovrenTaxonomyId(System.String)">
            <summary>
            Return the User Taxonomy Id that is mapped
            to the given Sovren Taxonomy Id. If there 
            is no mapping, then the User Taxonomy Id
            will be returned as an empty string.
            </summary>
            <param name="SovrenTaxonomyId">As described.</param>
            <returns>The corresponding User Taxonomy Id</returns>
        </member>
        <member name="M:Sovren.TaxonomyMap.GetUserTaxonomyNameForUserTaxonomyId(System.String)">
            <summary>
            Finds the User Taxonomy Name corresponding 
            to the User Taxonomy Id.
            </summary>
            <param name="UserTaxonomyId">The User Taxonomy Id 
            for which a User Taxonomy Name should be returned.</param>
            <returns>The corresponding User Taxonomy Name.  DOES NOT 
            return the Sovren Taxonomy Name if the 
            User Taxonomy Id is not in the provided User mappings.</returns>
        </member>
        <member name="T:Sovren.SovrenException">
            <summary>
            Base class for all Sovren exceptions.
            </summary>
        </member>
        <member name="M:Sovren.SovrenException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sovren.SovrenException.#ctor(System.String)">
            <summary>
            Specify a custom message.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Sovren.SovrenException.#ctor(System.String,System.Exception)">
            <summary>
            Specify a custom message and an inner exception.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Sovren.SovrenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:Sovren.IntList">
            <summary>
            IntList manages a single defined-length array of integers.
            </summary>
        </member>
        <member name="M:Sovren.IntList.SortByInteger1">
            <summary>
            Needs optimization.
            </summary>
        </member>
        <member name="T:Sovren.SortEducationByDateDesc">
            <summary>
            This is an IComparer implementation to allow sorting of School entries by date, descending.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSchoolOrInstitution">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SchoolOrInstitution [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeAdditionalItem">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ResumeAdditionalItem [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlProfessionalAssociations">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ProfessionalAssociations [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPositionHistoryType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PositionHistoryType [CPO 1_1_1]
            </summary>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryType.GetPositionLocations">
            <summary>
            Get all OrgInfo.PositionLocation objects that have values.
            </summary>
            <returns>An array of postal addresses, or a zero-length array if none are found.</returns>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryType.GetFirstPositionLocation">
            <summary>
            Get the first OrgInfo.PositionLocation object that has values.
            </summary>
            <returns>A postal address, if found, otherwise null.</returns>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryType.UserArea_ManagementLevel">
            <summary>
            Returns first non-numeric CategoryCode from JobCategories
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOtherPublication">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OtherPublication [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDistributionGuidelines">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DistributionGuidelines [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDatesOfAttendanceType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DatesOfAttendanceType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCredentialType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CredentialType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlConferencePaperType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ConferencePaperType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlArticleType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ArticleType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.Currency">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sovren.Currency.GetCurrency(System.Globalization.CultureInfo)">
            <summary>
            Return the currency for the specified culture.
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.Currency.GetCurrency(System.String)">
            <summary>
            Get Currency for the specified ISO Currency Code.
            </summary>
            <param name="currencyCode">ISO 4217 currency code</param>
            <returns>Currency for the specified currency code.</returns>
        </member>
        <member name="M:Sovren.Currency.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether two Currency values are equal.
            </summary>
            <returns>True if the object is a Currency value and equal to the current instance.</returns>
            </overloads>
            <param name="obj">Object to compare.</param>
        </member>
        <member name="M:Sovren.Currency.Equals(Sovren.Currency)">
            <summary>
            Determines whether two Currency values are equal.
            </summary>
            <param name="currency">Currency to compare.</param>
            <returns>True if the object is a Currency value and equal to the current instance.</returns>
        </member>
        <member name="M:Sovren.Currency.GetHashCode">
            <summary>
            Returns an integer hash code of this object value for comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.Currency.CompareTo(System.Object)">
            <overloads>
            <summary>
            Compares two Currency values for equality.
            </summary>
            <returns>True if object is a Currency instance and equal to the current instance value</returns>
            <remarks>
            If obj is not a Currency type currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            </overloads>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Sovren.Currency.CompareTo(Sovren.Currency)">
            <summary>
            Compares two Currency values
            </summary>
            <param name="other">Currency value to compare.</param>
            <returns></returns>
        </member>
        <member name="P:Sovren.Currency.Default">
            <summary>
            Returns the default Currency for Thread.CurrentThread.CurrentCulture.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.Unknown">
            <summary>
            Returns the Unknown currency.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.USD">
            <summary>
            Returns US currency.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.EUR">
            <summary>
            Returns Euro currency.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.GBP">
            <summary>
            Returns British Pound currency.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.INR">
            <summary>
            Returns Indian Rupee currency.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.DecimalDigits">
            <summary>
            Returns the decimal place precision of this currency value.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Currency.NumberFormat">
            <summary>
            Gets a <see cref="T:System.Globalization.NumberFormatInfo"/> that defines the culturally appropriate format of displaying this type of currency.
            </summary>
        </member>
        <member name="P:Sovren.Currency.CurrencySymbol">
            <summary>
            Currency Symbol
            </summary>
        </member>
        <member name="P:Sovren.Currency.ISOCurrencySymbol">
            <summary>
            3-letter ISO Currency Symbol
            </summary>
        </member>
        <member name="T:Sovren.SafeStopwatch">
            <summary>
            Similar to System.Diagnostics.Stopwatch except that this class uses a timer that is
            more reliable but has a lower resolution (approximately 10-16 ms).
            On Windows Vista and later (version &gt;= 6.0), the time span is unlimited.
            On versions of Windows prior to Vista (version &lt; 6.0), the time span is limited to 49.7 days.
            </summary>
            <remarks>
            The standard System.Diagnostics.Stopwatch class has the following problems:
            <list type="bullet">
            <item>When IsHighResolution is false, the system clock is used and is subject to
            changes by users, the Windows Time service, and underlying virtual machine hosts.</item>
            <item>When IsHighResolution is true, either a processor clock or chipset clock is used
            depending on the hardware. If a processor clock is used, problems will occur due to
            variable frequencies due to CPU power management or due to clock drift between
            multiple processors, which could yield wildly inaccurate elapsed times that in some
            cases may be negative. If a chipset clock (HPET) is used (available on circa 2005
            or later chipsets and only supported by Windows Vista or later), then it works well
            in physical hardware environments but may act as a processor-based clock in virtualized
            environments such as Amazon EC2 64-bit due to bugs in the virtualization drivers.</item>
            </list>
            These problems with the standard Stopwatch class cannot be avoided or worked around,
            so the SafeStopwatch class should be used in scenarios where reliability is more
            important than resolution.
            </remarks>
        </member>
        <member name="M:Sovren.SafeStopwatch.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Sovren.SafeStopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:Sovren.SafeStopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Sovren.SafeStopwatch.StartNew">
            <summary>
            Initializes a new instance, sets the elapsed time property to zero,
            and starts measuring elapsed time.
            </summary>
            <returns>
            An instance that has just begun measuring elapsed time.
            </returns>
        </member>
        <member name="M:Sovren.SafeStopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="P:Sovren.SafeStopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
            <value>
            A read-only System.TimeSpan representing the total elapsed time measured
            by the current instance.
            </value>
        </member>
        <member name="P:Sovren.SafeStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
            <value>
            A read-only long integer representing the total number of milliseconds measured
            by the current instance.
            </value>
        </member>
        <member name="P:Sovren.SafeStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the timer is running.
            </summary>
            <value>
            true if the instance is currently running and
            measuring elapsed time for an interval; otherwise, false.
            </value>
        </member>
        <member name="T:Sovren.hrxmlResumeUserArea">
            <summary>
            The UserArea of the top-level Resume object.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEduDegreeTypeUserArea">
            <summary>
            Container for the HR-XML Degree/UserArea element.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlEduDegreeTypeUserArea.#ctor(Sovren.ParserSettings)">
            <summary>
            Standard constructor.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Sovren.hrxmlEduDegreeTypeUserArea.Clear">
            <summary>
            Set all properties to their default value.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlEduDegreeTypeUserArea.GetAsXml">
            <summary>
            Generates the <c>&lt;UserArea&gt;</c> XML fragment for a EduDegreeType.
            If there is no data, then an empty string is returned.
            </summary>
            <returns>XML fragment beginning with <c>&lt;UserArea&gt;</c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlEduDegreeTypeUserArea.GetAsRM21CompatibleXml">
            <summary>
            Generates the <c>&lt;UserArea&gt;</c> XML fragment for a EduDegreeType.
            </summary>
            <returns>XML fragment beginning with <c>&lt;UserArea&gt;</c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlEduDegreeTypeUserArea.Clone(Sovren.ParserSettings)">
            <summary>
            Create a deep clone of this object.
            </summary>
            <param name="settings">Ignored.</param>
            <returns>A deep clone of this object.</returns>
        </member>
        <member name="P:Sovren.hrxmlEduDegreeTypeUserArea.Id">
            <summary>
            Value that identifies this degree within this resume.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlEduDegreeTypeUserArea.Graduated">
            <summary>
            Yes when information indicates that the degree was completed.
            No when information indicates that the degree was not completed.
            NoData when there is no information to indicate if the degree was completed.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlEduDegreeTypeUserArea.NormalizedGPA">
            <summary>
            </summary>
        </member>
        <member name="F:Sovren.WorkHistorySubSection.StartingLineNumber">
            <summary>
            The first line number of this subsection
            RELATIVE TO THE WORK HISTORY SECTION
            (not relative to the entire resume).
            </summary>
        </member>
        <member name="M:Sovren.WorkHistorySubSection.DataIsDisqualified(Sovren.ParserSettings,System.String)">
            <summary>
            Regardless of what type of data, if it matches one of these tests, it should not be 
            reported. This is a supplemental test, not an all-comprehensive test to replace other tests.
            </summary>
            <param name="settings"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.WorkHistorySubSection.GetOverlap(Sovren.WorkHistoryFragment,Sovren.WorkHistoryFragment,System.Boolean,System.Boolean,System.String@,Sovren.RrLib1.OverlapType@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Checks for overlap between two fragments, and reports where the overlap is in each fragment. Order 
            of frag1 and frag2 does not matter.
            </summary>
            <param name="frag1">First fragment to check.</param>
            <param name="frag2">Second fragment to check.</param>
            <param name="allowOverlapBasedOnTextAlone">It may be that the text positions of the two fragments
            are non-overlapping YET they contain some of the same text. In this case, if this parameter is true,
            then we will check, using just the text in the fragments, to see if there is a partial overlap at 
            start or end, or if all of one fragment's text is contained within the other's.</param>
            <param name="canBeContainedRatherThanOverlapping">If true, then we will check for one of the strings being contained within the other, 
            but not at the start or end. Example: "aaa bbb ccc" and "bbb".</param>
            <param name="overlap">The overlapping text.</param>
            <param name="overlapTypeFound">One of the RrLib1.OverlapType enumerations, describing the nature/position of the overlap.</param>
            <param name="frag1OverlapStarts">Offset relative to first character position of frag1 text is zero.</param>
            <param name="frag1OverlapEnds">Offset relative to first character position of frag1 text is zero.</param>
            <param name="frag2OverlapStarts">Offset relative to first character position of frag2 text is zero.</param>
            <param name="frag2OverlapEnds">Offset relative to first character position of frag2 text is zero.</param>
            <returns></returns>
        </member>
        <member name="T:Sovren.StringStringDouble">
            <summary>
            Summary description for StringStringDouble.
            </summary>
        </member>
        <member name="T:Sovren.sovPhones">
            <summary>
            Holds a collection of SovPhone instances.  IOW, this is a collection of phone numbers.
            </summary>
        </member>
        <member name="M:Sovren.sovPhones.AddOrAugment(Sovren.sovPhone)">
            <summary>
            Does NOT overwrite info unless current value is UNSPECIFIED.
            </summary>
            <param name="phone"></param>
        </member>
        <member name="M:Sovren.sovPhones.GetPhone(System.String)">
            <summary>
            Exact match based on just digits and nothing else (ignores puntuation, spacing, etc.).
            </summary>
            <param name="PhoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.sovPhones.FixPhoneTypes(Sovren.SovrenResumeParser,System.String)">
            <summary>
            Change telephone numbers to mobile according to known country and dialing codes.
            </summary>
            <param name="parser">The requisite SovtenResumeParser object that owns these phones. We may detect that a phone is actually
            something else -- say, a National ID. In that case, we will populate that field in the parser.</param>
            <param name="countryCode">The 2-letter ISO country code of the country context for the phones.</param>
        </member>
        <member name="T:Sovren.TTripleList">
            <summary>
            Manages lists of three string fields.
            </summary>
        </member>
        <member name="F:Sovren.TTripleList.RecordId">
            <summary>
            Field 1.
            </summary>
        </member>
        <member name="F:Sovren.TTripleList.Category">
            <summary>
            Field 2.
            </summary>
        </member>
        <member name="F:Sovren.TTripleList.Data">
            <summary>
            Field 3.
            </summary>
        </member>
        <member name="M:Sovren.TTripleList.Add(System.String,System.String,System.String)">
            <summary>
            This is how records should be added to the list.
            </summary>
            <param name="aRecordId"></param>
            <param name="aCategory"></param>
            <param name="aDatum"></param>
            <returns>Integer representing the index position of the record.</returns>
        </member>
        <member name="P:Sovren.TTripleList.CaseSensitive">
            <summary>
            If false, all strings will be treated as same-cased.
            </summary>
        </member>
        <member name="P:Sovren.TTripleList.AllowDuplicates">
            <summary>
            If false, then exact duplicates, based on checking all three fields, will not be allowed.  NOTE
            THAT THIS DOES NOT JUST CHECK THE RecordId; IT CHECKS ALL THREE FIELDS.
            </summary>
        </member>
        <member name="P:Sovren.TTripleList.Marker">
            <summary>
            This property is a user-defined convenience field like the Tag property.  It has no intrinisc usage nor meaning.
            </summary>
        </member>
        <member name="P:Sovren.TTripleList.Tag">
            <summary>
            This property is a user-defined convenience field like the Marker property.  It has no intrinisc usage nor meaning.
            </summary>
        </member>
        <member name="T:Sovren.Resume2_1Comparator">
            <summary>
            Summary description for Resume2_1Comparator.
            </summary>
        </member>
        <member name="T:Sovren.MgmtParser">
            <summary>
            The MgmtParser class enables the summarization of the experience shown on the resume.
            </summary>
        </member>
        <member name="T:Sovren.Int2String2">
            <summary>
            Int2String2 is an implementation of a list that holds 2 integers and 2 strings.
            </summary>
        </member>
        <member name="M:Sovren.Int2String2.TotalSpanForThisString1(System.String)">
            <summary>
            "Span" means Int2 - Int1.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSchool">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for School [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentHistory">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentHistory [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlLicensesAndCertifications">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for LicensesAndCertifications [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlJobPositionSeeker1_1">
            <summary>
            Summary description for hrxmlJobPositionSeeker1_1.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyId">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyId [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetency">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Competency [CPO 1_1_1].
            </summary>
        </member>
        <member name="T:Sovren.hrxmlBook">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Book [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAchievement">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Achievement [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="M:Sovren.SourcingInformation.FromXml(System.String)">
            <summary>
            Includes a temporary fix for the deletion of the "sov:" namespace.
            </summary>
            <param name="XmlSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:Sovren.TaxonomySkill">
            <summary>
            TaxonomySkill is an instance of a skill contained in the Parser's skills taxonomy.  
            This is the raw skill as it appears in the parser, not as it was found in the resume.
            Found skills are kept in FlatSkill objects.
            </summary>
        </member>
        <member name="M:Sovren.TaxonomySkill.#ctor(System.String,System.String,System.Boolean,Sovren.Taxonomy,Sovren.TaxonomySkill)">
            <summary>
            Fully-populating constructor.  
            </summary>
            <param name="id">The unique Id of the skill.</param>
            <param name="term">The term to be searched.</param>
            <param name="allowLowerCaseMatch">When false, only ProperCase or UPPERCASE variations of the term will match. When true, the lowercase variation will also match.</param>
            <param name="taxonomy">The Taxonomy to which this skill belongs. A value is required for this parameter or for parentSkill but not both.</param>
            <param name="parentSkill">The parent skill, if any. A value is required for this parameter or for taxonomy but not both.</param>
        </member>
        <member name="M:Sovren.TaxonomySkill.SetParents(Sovren.Taxonomy,Sovren.TaxonomySkill)">
            <summary>
            Set Taxonomy and ParentSkill at the same time.
            </summary>
            <param name="taxonomy"></param>
            <param name="parentSkill"></param>
        </member>
        <member name="M:Sovren.TaxonomySkill.AddSkill(System.String,System.String,System.Boolean)">
            <summary>
            Add a taxonomy. If a taxonomy with the same Id already exists, it is replaced with this new empty one.
            </summary>
            <param name="id">The Id of the skill.</param>
            <param name="term">The term for the skill.</param>
            <param name="allowLowerCaseMatch">When false, only ProperCase or UPPERCASE variations of the term will match. When true, the lowercase variation will also match.</param>
        </member>
        <member name="M:Sovren.TaxonomySkill.ToString">
            <summary>
            Get a string that represents this object.
            </summary>
            <returns>"Id, Term"</returns>
        </member>
        <member name="M:Sovren.TaxonomySkill.GetHashCode">
            <summary>
            Returns the hash code for this TaxonomySkill.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Sovren.TaxonomySkill.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current TaxonomySkill.
            </summary>
            <param name="obj">The object to compare with the current TaxonomySkill.</param>
            <returns><b>true</b> if the specified object is equal to the current TaxonomySkill; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.TaxonomySkill.Equals(Sovren.TaxonomySkill)">
            <summary>
            Determines whether the specified TaxonomySkill is equal to the current TaxonomySkill.
            </summary>
            <param name="ts">The TaxonomySkill to compare with the current TaxonomySkill.</param>
            <returns><b>true</b> if the specified TaxonomySkill is equal to the current TaxonomySkill; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.TaxonomySkill.op_Equality(Sovren.TaxonomySkill,Sovren.TaxonomySkill)">
            <summary>
            Determines whether two TaxonomySkill objects are equal.
            </summary>
            <param name="x">A TaxonomySkill object.</param>
            <param name="y">A TaxonomySkill object.</param>
            <returns><b>true</b> if the two TaxonomySkill objects are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.TaxonomySkill.op_Inequality(Sovren.TaxonomySkill,Sovren.TaxonomySkill)">
            <summary>
            Determines whether two TaxonomySkill objects are not equal.
            </summary>
            <param name="x">A TaxonomySkill object.</param>
            <param name="y">A TaxonomySkill object.</param>
            <returns><b>true</b> if the two TaxonomySkill objects are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Sovren.SovrenResumeParser">
            <summary>
            SovrenResumeParser extends TxtParser's resume parsing functionality
            by adding Skills matching and an expanded Xml export (neither of which are
            used by the HR-XML parser, which has its own implementation of these 
            features).  This parser is the basic Contact Info parser.  The HR-XML 
            parsers use a completed instance of this parser.
            </summary>
        </member>
        <member name="T:Sovren.TxtParser">
            <summary>
            TxtParser is a generic parser for extracting contextual information 
            from text files.  It is primarily a Contact Info parser.
            
            HIERARCHY:  rrParser => TxtParser ==> SovrenResumeParser.
            
            RECOMMENDATION:  Do not use this class.  Use the SovrenResumeParser 
            instead.
            </summary>
        </member>
        <member name="T:Sovren.RrParser">
            <summary>
            Abstract class that is the base for all Sovren text parsing.  
            Uses RrLib1 extensively.
            </summary>
        </member>
        <member name="M:Sovren.RrParser.#ctor(Sovren.ParserSettings)">
            <summary>
            ABSTRACT.  DO NOT TRY TO INSTANTIATE INSTANCES OF THIS CLASS.
            
            HIERARCHY:  rrParser => TxtParser ==> SovrenResumeParser.
            
            USE THE SovrenResumeParser CLASS, WHICH IS A CONCRETE DESCENDANT
            OF THIS CLASS.
            </summary>
        </member>
        <member name="M:Sovren.RrParser.GetText">
            <summary>
            Although marked Public, this method is not intended for use by integrators.
            </summary>
            <returns>Generally, but not necessarily, returns the post-processed text, after we have internally made adjustments to fix 
            detected corruptions and problems that would hamper accurate parsing.</returns>
        </member>
        <member name="M:Sovren.RrParser.ExtractHeaderFooterFromBody">
            <summary>
            Setup BodyLines, HeaderLines and FooterLines by extracting 
            headers and footers from BodyLines (replaced with blank lines)
            and moving them to HeaderLines and FooterLines.
            
            If a header/footer exists, then AllLines is also modified
            to insert blank lines between the body and the header/footer.
            </summary>
        </member>
        <member name="M:Sovren.RrParser.CleanupText(System.String)">
            <summary>
            Standardizes line endings and some Unicode-To-ASCII equivalents.
            </summary>
            <param name="text">The text to be cleaned</param>
            <returns>Cleaned text</returns>
        </member>
        <member name="M:Sovren.RrParser.DeleteTrashLines(Sovren.TStringList@)">
            <summary>
             Delete garbage lines like afafsfaasfafa65whqannt1tqaafNGNtatggnGt1tfavvv
            </summary>
            <param name="Lines"></param>
        </member>
        <member name="M:Sovren.RrParser.RemoveRepeatedResumes">
            <summary>
            Removes repeated resumes(s).
            </summary>
        </member>
        <member name="M:Sovren.RrParser.GetLineNumberOfFirstRepeatedResume">
            <summary>
            Some people repeat their resume 1..N times within the same document.
            This method detects the starting line number of the first repeated resume.
            </summary>
            <returns>Line number of first repeated resume, if any; otherwise, -1.</returns>
        </member>
        <member name="P:Sovren.RrParser.Settings">
            <summary>
            Settings used by this parser instance.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Sovren.RrParser.AllLines">
            <summary>
            All the lines of the resume, including HeaderLines and FooterLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.AllText">
            <summary>
            The text of the resume, including HeaderText and FooterText. Linked to AllLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.BodyLines">
            <summary>
            The lines of the body of the resume. Same as AllLines minus HeaderLines and FooterLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.BodyText">
            <summary>
            The text of the body of the resume. Same as AllText minus HeaderText and FooterText.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.HeaderLines">
            <summary>
            The lines of header text of the resume.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.HeaderText">
            <summary>
            The header text of the resume. Linked to HeaderLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.FooterLines">
            <summary>
            The lines of footer text of the resume.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.FooterText">
            <summary>
            The footer text of the resume. Linked to FooterLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.OmittedLines">
            <summary>
            Lines of text omitted during parsing.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.OmittedText">
            <summary>
            Text that was omitted during parsing. Linked to OmittedLines.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.ResumeText">
            <summary>
            The original text of the resume as provided to the parser. This text will be trimmed of leading and trailing whitespace.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.ConfidentialEmailAddress">
            <summary>
            Some resumes are submitted to job boards 
            with a "Confidential" tag and this is where 
            we store the "confidential" or one-purpose 
            email if we can find it.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.FirstName">
            <summary>
            Returns first, middle, last, without prefixes or suffixes.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.EmailAddresses">
            <summary>
            Formerly a single-valued string, but now a store for multiple addresses.
            CraigsList, for instance, assigns a separate email address to the resume,
            and we need a place to store 1..n addresses, so we made this a TStringList.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.Urls">
            <summary>
            Personal URL.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.StreetAddress1">
            <summary>
            No side effects.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.Region">
            <summary>
            Region.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.Zipcode">
            <summary>
            Postal code.
            </summary>
        </member>
        <member name="P:Sovren.RrParser.Country">
            <summary>
            Preferable, the two or three digit ISO country code.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.#ctor(Sovren.ParserSettings)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.NotAPersonNameWord(System.String,Sovren.ParserSettings)">
            <summary>
            This is a negative method rather than a positive one because we do not use positive word lists for names.
            </summary>
            <param name="maybeName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.TxtParser.FindAndSetCityRegionAndPostCodeInNetherlands(System.String)">
            <summary>
            
            </summary>
            <param name="InText"></param>
            <returns>The text LESS the data found.</returns>
        </member>
        <member name="M:Sovren.TxtParser.FindQualificationsSummary">
            <summary>
            Include SKILLS sections, too.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.AddUrlIfFoundInList(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="textToCheckWithin"></param>
            <param name="urlsToCheckFor"></param>
            <param name="personalUrlsOnly"></param>
            <param name="scrubOutAllUrlsRegardlessOfType"></param>
            <param name="addedUrl"></param>
            <returns>Text scrubbed of URLs from list.</returns>
        </member>
        <member name="M:Sovren.TxtParser.RemoveConversionTrash(System.String)">
            <summary>
            WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! 
            THERE IS NO WholeWordsOnly USED HERE!!!!  DO NOT USE ARRAY TERMS THAT COULD
            MATCH INSIDE OR ON A REAL WORD!!!
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.TxtParser.DoHyrianCheck">
            <summary>
            This is one of those rare, unfortunate one-offs that we needed
            to add to handle a customer that is using a third party product
            for resume conversion, and that product is awful, and so we have
            to code around its' known problems. InfoGIST
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.AnalyzeText">
            <summary>
            Analyze the text for content that will switch on optimizations further down in parsing.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.ChangeDotNumberYearsToNormalYears(System.String)">
            <summary>
            Remove dots from numbers like 1.998 and 2.002 if they fall within the range of
            1939 to (RevisionDate.Year + 1).
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.DeleteBadContent(System.String)">
            <summary>
            Delete unconverted binary and/or MIME (often just pictures that bled through).
            Delete long spans with no whitespace.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.AddOtherPhonesIfIndicated">
            <summary>
            Phones may appear in more than one place in a resume, especially with job board resumes.
            We need to look for all the places known candidate phone numbers appear,
            and make sure we have any additional adjacent phones as well.
            For example, see "C:\resumes\20050711\ChristineBradley.html".
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.ParseContactInfoNEW(System.Boolean)">
            <summary>
            This is the core method that extracts contact info.  
            
            From a pure coding standpoint, it could use refactoring.  However, this code has
            been tested through many many years and it works well.  As you can
            see, the code is rather procedural, and that's why we've left it as is.
            Parsing itself is a procedural, sequential programming exercise.  You have
            to do each thing in order; you can't spawn off new threads and start doing
            multiple things.  So, this method, though long, will remain as is, with the
            occasional tweak.  
            
            The best way to understand this code, and to determine where changes could
            be made, is to walk through it in the debugger using watch variables for 
            the values such as FirstName, LastName, City, etc.
            
            Contact info parsing is normally seen as an exercise in writing regular expressions.
            We disagree.  The code that follows does not use regular expressions to do its work,
            and it is far, far more accurate and flexible and maintainable and understandable 
            than anything that could be accomplished with regular expressions.  The way we
            identify person names is just magic.  It uses a lot of Bayesian tests and a lot of
            pattern matching and a lot of positional hints to find the names, and it does it
            really well.  
            
            There is only one voting algorithm in here, and that is used in the determination
            of the street address.  Everything else is done without voting.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.CheckAgainForPhoneTypes">
            <summary>
            Sometimes phones appear in more than one place in the resume. If so,
            the phone type may not always appear in each place, so we need to
            check for missing phone types.
            </summary>
        </member>
        <member name="F:Sovren.TxtParser.DANGEROUS_RESUME_START_MARKERS">
            <summary>
            SORT BY LENGTH DESCENDING!!
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.CleanTrailingColonField(System.String)">
            <summary>
            Assumes max two words can be removed.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.TxtParser.CollapseLinesBasedOnTrailingColon(System.String)">
            <summary>
            Assumes lines are trimmed. Corrects this:
                Field:
                data
            to be:
                Field: data
            while not changing this:
                Resume:
                Field:
                data
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.TxtParser.ParseAsBlind(Sovren.TStringList,Sovren.Int2List,System.Boolean,System.Boolean)">
            <summary>
            THIS IS THE CORE CONTACT INFO PARSING ROUTINE IN THE ENTIRE SOVREN NAMESPACE.
            
            This routine is very long and procedural for several reasons.  The primary reason
            is that we want to put all of the flow and logic of finding Contact Info in one
            routine.  It is insufficient to just have a collection of routines that each
            find a single type of data.  The location and identification of each piece of 
            data needs to be done in a way that is contextually aware, and that contextual
            awareness needs to happen in a very procedural fashion.  Certain pieces of
            data can be extracted more accurately only when other pieces have been identified 
            and extracted before them.  DO NOT refactor this method, as to do so will destroy
            the ability to read and maintain the code as a logical, cohesive, procedural flow.
            		 
            </summary>
            <param name="textToParse">The lines of text that will be parsed.  These lines need to be explicitly
            passed, because we cannot assume that that it is the total resume that should be parsed.
            </param>
            <param name="ParseJustTheseLines">It is possible to pass a structure containing far more lines
            than the subset of lines that are of interest for Contact Info parsing.  It is less costly
            to pass the full existing 'lines' object and a designator to define the lines of interest,
            than it would be to create a new 'lines' object containing just the subset of the lines with 
            only the lines of interest included.
            </param>
            <param name="SkipDepthControl">"Depth Control" is an important concept to reduce the appearance of
            false positives.  Here's a typical scenario: A resume has only a Candidate Name, Phone Number, 
            and Email Address at the top, immediately followed by a short Job Objective and then by a 
            Work History section.  In that first job, the name of the Employer is followed by the employer's
            address.  Without "depth control" to limit how "deep" we can go to find contact info, what would
            happen is that we would falsely pull the company contact info into the candidate's contact info.
            
            The logical question, then, is why would we ever NOT want to have depth control.  The answer is
            that there are some scenarios in which depth control is not needed and could in fact arbitrarily
            limit us from finding the last bit of real data that we need.  Primarily, this would be a scenario
            in which we are parsing a subset of lines at the end of the resume that we think contain
            a reference with the refence's contact info.  We may need to go a line or two "deeper" than the limit of, say,
            12 lines, that would be the restriction imposed by using depth control.  So, in those cases we
            would probably use depth control.
            </param>
            <param name="leavePartialData">If true, data will not be sanity checked, meaning incomplete or improper data may remain.</param>
        </member>
        <member name="M:Sovren.TxtParser.FindNameAtBottom">
            <summary>
            
            </summary>
            <returns>Line number that name was found on.</returns>
        </member>
        <member name="M:Sovren.TxtParser.HasContactInfo">
            <summary>
            Answers whether there is a person record (name or address or phones).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.TxtParser.PossibleNameFromEmail">
            <summary>
            This is a stretch.  Is it really possible to glean a name from an email address?  Probably not.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.GetOfficialMonsterContactInfoSection(Sovren.TStringList,System.Int32@,System.Int32@)">
            <summary>
            Calculates the start line and end line of the Monster CONTACT INFO section
            </summary>
            <param name="textLines">Lines of text to examine.</param>
            <param name="starts">First line of the CONTACT INFO section</param>
            <param name="ends">Last line of the CONTACT INFO section</param>
            <returns>True if the section was found, otherwise false.</returns>
        </member>
        <member name="M:Sovren.TxtParser.DetectAndPreprocessSpecialFormats">
            <summary>
            Call this before modifying the resume text in any way. These methods look
            for special markers that may not be present after the text has been scrubbed
            or processed in any way.
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.ReplaceWithSpaces(System.String,System.Int32)">
            <summary>
            Replace the phrases with spaces in both AllText and BodyText
            </summary>
        </member>
        <member name="M:Sovren.TxtParser.FirstLineAfterEmailHeaders(Sovren.TStringList,System.Boolean)">
            <summary>
            Scan the text for email headers and return the index of the first
            line after the last email header, if any, otherwise -1.
            </summary>
            <param name="lines">The lines of text to examine.</param>
            <param name="removeEmailAddressHeaderLines">When true, remove any email header line containing an email address.</param>
            <returns>Index of first line after last email header, if any, otherwise -1.</returns>
        </member>
        <member name="M:Sovren.TxtParser.ConvertDrawnLinesToBlankLines(System.String)">
            <summary>
            Replace drawn lines (all the same character except leading and trailing whitespace).
            Does not modify special header and footer lines.
            </summary>
            <param name="text">The text to be processed.</param>
            <returns>Text without drawn lines.</returns>
        </member>
        <member name="P:Sovren.TxtParser.MaxContactInfoLines">
            <summary>
             This is a settable property.  It is used as a "depth control"
             to prevent the parser from finding contact info that is
             related to an employer or reference.  This can happen when
             a resume does not have a contact info header, or has only
             the applicant's name.
            </summary>
        </member>
        <member name="M:Sovren.SovrenResumeParser.Initialize">
            <summary>
            This is already called by the base class constructor. Do not call it in the constructor of this subclass.
            </summary>
        </member>
        <member name="M:Sovren.SovrenResumeParser.Parse(System.String)">
            <summary>
            This is the core work method.
            </summary>
        </member>
        <member name="T:Sovren.ResourceManager">
            <summary>
            ResourceManager encapsulates access to embedded resources.
            All of the large chunks of data that used to be stored in code have been
            moved into embedded resources that are compressed to save disk and memory space.
            </summary>
        </member>
        <member name="M:Sovren.ResourceManager.GetDataListAttribute(System.String)">
            <summary>
            Retrieve the DataList attribute from a named DataLists property.
            This is used as a fallback when the data file does not specify the sort order.
            </summary>
            <param name="name">Name of a property on the DataLists class.</param>
            <returns>DataList attribute, if found; otherwise, null.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.GetStringArray(System.String,Sovren.Language)">
            <summary>
            Loads a string array from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>String array from the specified resource.</returns>
            <exception cref="T:Sovren.SovrenException">Thrown when requested resource is not found.</exception>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetStringArray(System.String,Sovren.Language)">
            <summary>
            Loads a string array from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>String array from a resource, if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetStringArray(System.String,Sovren.Language,System.Int32)">
            <summary>
            Loads a string array from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <param name="column">If the resource is a table, then the specified column (one-based index) is read into the string array. Value of zero means to get the whole line including tabs.</param>
            <returns>String array from a resource, if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetAllLines(System.IO.Stream,Sovren.ResourceManager.ResourceInfo@)">
            <summary>
            Read the ResourceInfo and the significant lines of text from a resource.
            </summary>
        </member>
        <member name="M:Sovren.ResourceManager.GetStringTable(System.String,Sovren.Language)">
            <summary>
            Load a 2-dimensional string array (i.e. rows and columns) from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A 2-dimensional string array where first index identifies the row and second index identifies the column.</returns>
            <remarks>Column values must be tab-separated.</remarks>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetStringTable(System.String,Sovren.Language)">
            <summary>
            Load a 2-dimensional string array (i.e. rows and columns) from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A 2-dimensional string array where first index identifies the row and second index identifies the column.</returns>
            <remarks>Column values must be tab-separated.</remarks>
        </member>
        <member name="M:Sovren.ResourceManager.ReadNextSignificantLine(System.IO.StreamReader)">
            <summary>
            Skip blank lines and comment lines (begin with "//" and no leading whitespace).
            </summary>
        </member>
        <member name="M:Sovren.ResourceManager.ParseResourceInfo(System.String)">
            <summary>
            Parses the group header line to get the various attributes of the group.
            Format:   ::group=name::count=number::columns=count::sort=[None|Ascending|Descending|AscendingLength|DescendingLength]::unique=bool::mode=[Add|Replace]
            </summary>
            <param name="line">A line of text that is expected to be formatted as a group header.</param>
            <returns>A ResourceInfo object with all properties set, if the line is properly formatted; otherwise, null.</returns>
            <exception cref="T:Sovren.SovrenException">When line begins with group marker "::" but is not properly formatted.</exception>
        </member>
        <member name="M:Sovren.ResourceManager.GetEntryName(System.String,Sovren.Language)">
            <summary>
            Builds the entry name for a given resource name and language.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language of the resource.</param>
            <returns>Fully formatted resource entry name:  resourceName.languageCode.txt</returns>
        </member>
        <member name="M:Sovren.ResourceManager.GetString(System.String,Sovren.Language)">
            <summary>
            Loads the specified resource as a single string object.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>String array joined by Environment.NewLine to form a multiline string.</returns>
            <exception cref="T:Sovren.SovrenException">Thrown when requested resource is not found.</exception>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetString(System.String,Sovren.Language)">
            <summary>
            Loads the specified resource as a single string object.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>String array joined by Environment.NewLine to form a multiline string. null if resource is not found.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.GetStringSet(System.String,Sovren.Language)">
            <summary>
            Loads a string set from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>StringSet populated with one item per line of text in the resource.</returns>
            <exception cref="T:Sovren.SovrenException">Thrown when requested resource is not found.</exception>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetStringSet(System.String,Sovren.Language)">
            <summary>
            Loads a string set from the specified resource.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.ResourceManager.GetStringSetTable(System.String,Sovren.Language)">
            <summary>
            Load a StringSet with keys and values, where key is specified by keyColumn and value is a string array of columns for that key.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A StringSet with keys and values, where key is specified by keyColumn and value is a string array of columns for that key.</returns>
            <remarks>Column values must be tab-separated.</remarks>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetBuiltinResourceStream(System.String,Sovren.Language)">
            <summary>
            Get a resource stream from the builtin data.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A read-only stream containing the bytes of the requested resource. null if the resource was not found.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetCustomResourceStream(System.String,Sovren.Language)">
            <summary>
            Get a resource stream from the builtin data.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A read-only stream containing the bytes of the requested resource. null if the resource was not found.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetFileResourceStream(System.String,System.String,Sovren.Language)">
            <summary>
            Get a resource stream from a file.
            </summary>
            <param name="folder">Folder containing the resource.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A read-only stream containing the bytes of the requested resource, if found; otherwise, null.</returns>
        </member>
        <member name="M:Sovren.ResourceManager.TryGetZipResourceStream(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,Sovren.Language)">
            <summary>
            Get a resource stream from a zip archive.
            </summary>
            <param name="zipFile">Zip archive containing resources.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="language">Language variation.</param>
            <returns>A read-only stream containing the bytes of the requested resource, if found; otherwise, null.</returns>
        </member>
        <member name="E:Sovren.ResourceManager.CustomDataSourceChanged">
            <summary>
            Raised when the location or content of the CustomDataSource changes.
            Both parameters are null.
            </summary>
        </member>
        <member name="P:Sovren.ResourceManager.CustomDataSourceRelativeRoot">
            <summary>
            When CustomDataSource is null, empty or specifies a relative path, this
            value is used as the root for relative paths. The default relative root
            is the folder of this assembly.
            </summary>
        </member>
        <member name="P:Sovren.ResourceManager.CustomDataSource">
            <summary>
            <para>
            The data source used to supplement built-in data lists.
            It can either be a path to a zip file or a directory.
            Relative paths are relative to the location of this assembly.
            The default value is obtained by checking for the following (in order):
            </para>
            <list>
            <item><term>Sovren.CustomDataSource app setting</term></item>
            <item><term>ParserData.zip file in same folder as SrpAllInOne.dll</term></item>
            <item><term>ParserData folder in same folder as SrpAllInOne.dll</term></item>
            </list>
            </summary>
        </member>
        <member name="P:Sovren.ResourceManager.CustomDataSourcePassword">
            <summary>
            The password to use to open the CustomDataSource (only relevant if the source is a zip file).
            The default value is obtained from the "Sovren.CustomDataSourcePassword" AppSetting.
            </summary>
        </member>
        <member name="T:Sovren.ResourceManager.SortType">
            <summary>
            Specifies the type of sorting that has been applied to the Group.
            All sorts are case-insensitive.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.SortType.None">
            <summary>
            No sort.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.SortType.Ascending">
            <summary>
            Sort by ascending case-insensitive ordinal comparison.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.SortType.Descending">
            <summary>
            Sort by descending case-insensitive ordinal comparison.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.SortType.AscendingLength">
            <summary>
            Sort by ascending length.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.SortType.DescendingLength">
            <summary>
            Sort by descending length.
            </summary>
        </member>
        <member name="T:Sovren.ResourceManager.CustomDataMode">
            <summary>
            Specifies the mode used for loading custom data. Should appear in custom
            data files in the resource info header like this:
            <br/>::sort=Ascending::mode=Replace
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.CustomDataMode.Add">
            <summary>
            Custom data is added to the built-in data.
            This is the default mode.
            </summary>
        </member>
        <member name="F:Sovren.ResourceManager.CustomDataMode.Replace">
            <summary>
            Custom data is used instead of the built-in data.
            </summary>
        </member>
        <member name="T:Sovren.ResourceManager.ResourceInfo">
            <summary>
            Holds the data that defines a Group.
            </summary>
        </member>
        <member name="T:Sovren.ResourceManager.LineComparer">
            <summary>
            Comparer for sorting lists of single-column or multi-column lines of text
            </summary>
        </member>
        <member name="T:Sovren.JobPositionSeekerReader">
            <summary>
            JobPositionSeekerReader is a class that can read resumes in the deprecated HR-XML JobPositionSeeker 1.2 schema format.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlStructuredXMLResumeType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for StructuredXMLResumeType [CPO 1_1_1].
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPositionOrgInfoType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PositionOrgInfoType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentDescriptionType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentDescriptionType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlContactMethodType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ContactMethodType [CPO 1_1_1]
            </summary>
        </member>
        <member name="P:Sovren.hrxmlContactMethodType.Fax">
            <summary>
             Unsafe. Only returns FIRST phone of this type.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlContactMethodType.Mobile">
            <summary>
             Unsafe. Only returns FIRST phone of this type.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlContactMethodType.Pager">
            <summary>
             Unsafe. Only returns FIRST phone of this type.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlContactMethodType.Telephone">
            <summary>
             Unsafe. Only returns FIRST phone of this type.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlContactMethodType.TTYTDD">
            <summary>
             Unsafe. Only returns FIRST phone of this type.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlConferencePaper">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ConferencePaper [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyWeights">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyWeights [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyEvidences">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyEvidences [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollectionHD.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlCompetencyEvidences.Add(Sovren.hrxmlCompetencyEvidence)">
            <summary>
            ???????????????????????RHR
            </summary>
            <param name="aCompetencyEvidence"></param>
        </member>
        <member name="T:Sovren.GlobalizationHelper">
            <summary>
            This class contains helper methods for the <see cref="N:System.Globalization"/> namespace.
            </summary>
        </member>
        <member name="M:Sovren.GlobalizationHelper.GetRegion(System.Globalization.CultureInfo)">
            <summary>
            Get the RegionInfo object associated with the specified culture.
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.GlobalizationHelper.GetRegionByIsoCode(System.String)">
            <summary>
            Get the RegionInfo object for the specified two-letter or three-letter ISO 3166 region code.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:Sovren.GlobalizationHelper.Cultures">
            <summary>
            A list of all available cultures, including neutral and specific cultures.
            </summary>
        </member>
        <member name="P:Sovren.GlobalizationHelper.Regions">
            <summary>
            A list of all regions defined by .NET and Windows. Note that this is a
            subset of the ISO 3166 list.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeUserAreaSections">
            <summary>
            This is a strongly typed descendant of hrxmlCollection for holding hrxmlResumeUserAreaSection objects.
            </summary>
        </member>
        <member name="T:Sovren.Training">
            <summary>
            Public class for implementing non-HR-XML Resume output for Training.
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.Money">
            <summary>
            Represents a monetary amount in a specified currency.
            </summary>
        </member>
        <member name="M:Sovren.Money.#ctor(System.Decimal)">
            <summary>
            Creates a new Money value in the default Currency for the Thread.CurrentThread.CurrentCulture.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Sovren.Money.#ctor(System.Decimal,Sovren.Currency)">
            <summary>
            Creates a new Money value from a decimal.
            </summary>
            <param name="amount">the amount</param>
            <param name="currency">a <code>Currency</code></param>
        </member>
        <member name="M:Sovren.Money.Dollars(System.Decimal)">
            <summary>
            Creates a Money value for the USA region.
            </summary>
            <param name="amount">Currency amount</param>
            <returns>A new Money value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether two Money values are equal.
            </summary>
            <returns>True if the object is a Money value and equal to the current instance.</returns>
            </overloads>
            <param name="obj">Object to compare.</param>
        </member>
        <member name="M:Sovren.Money.Equals(Sovren.Money)">
            <summary>
            Determines whether two Money values are equal.
            </summary>
            <param name="money">Money to compare.</param>
            <returns>True if the object is a Money value and equal to the current instance.</returns>
        </member>
        <member name="M:Sovren.Money.op_Equality(Sovren.Money,Sovren.Money)">
            <summary>
            Determines whether two Money values are equal.
            </summary>
            <param name="first">Value to compare</param>
            <param name="second">Value to compare</param>
            <returns>True if the two Money values are equal.</returns>
        </member>
        <member name="M:Sovren.Money.op_Inequality(Sovren.Money,Sovren.Money)">
            <summary>
            Determines whether two Money values are not equal.
            </summary>
            <param name="first">Value to compare</param>
            <param name="second">Value to compare</param>
            <returns>True if the two Money values are not equal.</returns>
        </member>
        <member name="M:Sovren.Money.GetHashCode">
            <summary>
            Returns an integer hash code of this object value for comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.Money.Add(Sovren.Money)">
            <summary>
            Adds two  money values.
            </summary>
            <param name="money">Value to add</param>
            <returns>A new money value</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.op_Addition(Sovren.Money,Sovren.Money)">
            <summary>
            Adds two Money values.
            </summary>
            <param name="m1">Value 1</param>
            <param name="m2">Value 2</param>
            <returns>A new money value</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.Subtract(Sovren.Money)">
            <summary>
            Subtracts a Money value.
            </summary>
            <param name="money">Value to subtract</param>
            <returns>A new Money value.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.op_Subtraction(Sovren.Money,Sovren.Money)">
            <summary>
            Subtracts two Money values.
            </summary>
            <param name="m1">Value 1</param>
            <param name="m2">Value 2</param>
            <returns>A new Money value.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.Multiply(System.Decimal)">
            <summary>
            Multiplies two money values.
            </summary>
            <param name="factor">Value to multiply</param>
            <returns>A new money value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.op_Multiply(Sovren.Money,System.Decimal)">
            <summary>
            Multiplies two Money values.
            </summary>
            <param name="m1">Value 1</param>
            <param name="factor">factor</param>
            <returns>A new Money value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.Divide(System.Decimal)">
            <summary>
            Divides two money values.
            </summary>
            <param name="factor">Value to divide by</param>
            <returns>A new money value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.op_Division(Sovren.Money,System.Decimal)">
            <summary>
            Divides two Money values.
            </summary>
            <param name="m1">Value 1</param>
            <param name="factor">factor</param>
            <returns>A new Money value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The amount greater or less than the max amount.</exception>
        </member>
        <member name="M:Sovren.Money.CompareTo(System.Object)">
            <overloads>
            <summary>
            Compares two Money values for equality.
            </summary>
            <returns>True if object is a Money value and equal to the current instance value</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
            </overloads>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Sovren.Money.CompareTo(Sovren.Money)">
            <summary>
            Compares two Money values for equality
            </summary>
            <param name="money">Money value to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.Money.GreaterThan(Sovren.Money)">
            <summary>
            Evaluates if a value is greater than the current instance value.
            </summary>
            <param name="money">Money value</param>
            <returns>True if the value is greater.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.op_GreaterThan(Sovren.Money,Sovren.Money)">
            <summary>
            Evaluates if the first value is greater than the second.
            </summary>
            <param name="m1">First value</param>
            <param name="m2">Second value</param>
            <returns>True if the first value is greater than the second.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.LessThan(Sovren.Money)">
            <summary>
            Evaluates if a value is less than the current instance value.
            </summary>
            <param name="money">Money value.</param>
            <returns>True if the value is less.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.op_LessThan(Sovren.Money,Sovren.Money)">
            <summary>
            Evaluates if the frist value is less than the second.
            </summary>
            <param name="m1">First value</param>
            <param name="m2">Second value</param>
            <returns>True if the first value is less than the second.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.GreaterThanOrEquals(Sovren.Money)">
            <summary>
            Evaluates if a value is greater than or equal to the current instance value.
            </summary>
            <param name="money">Money value</param>
            <returns>True if the value is greater or equal.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.op_GreaterThanOrEqual(Sovren.Money,Sovren.Money)">
            <summary>
            Evaluates if the first value is greater than or equal to the second.
            </summary>
            <param name="m1">First value</param>
            <param name="m2">Second value</param>
            <returns>True if the first value is greater than or equal to the second.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.LessThanOrEquals(Sovren.Money)">
            <summary>
            Evaluates if a value is less than or equal to the current instance value.
            </summary>
            <param name="money">Money value</param>
            <returns>True if the value is lesser or equal.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.op_LessThanOrEqual(Sovren.Money,Sovren.Money)">
            <summary>
            Evaluates if the first value is less than or equal to the second.
            </summary>
            <param name="m1">First value</param>
            <param name="m2">Second value</param>
            <returns>True if the first value is less than or equal to the second.</returns>
            <remarks>
            If the currency values are not compatible (Region and DecimalDigits)
            <see cref="T:System.ArgumentException">ArgumentException</see> will be thrown.
            </remarks>
        </member>
        <member name="M:Sovren.Money.ToString">
            <summary>
            Converts the value of this instance to its equivalent String representation.
            </summary>
            <returns>The String representation of the value of this instance as specified by the "C" format specification and <see cref="P:Currency.NumberFormat"/>.</returns>
        </member>
        <member name="M:Sovren.Money.ToString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent String representation using the specified format.
            </summary>
            <param name="format">A format specification.</param>
            <returns>The String representation of the value of this instance as specified by <i>format</i> and <see cref="P:Currency.NumberFormat"/>.</returns>
        </member>
        <member name="M:Sovren.Money.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent String representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The String representation of the value of this instance as specified by <i>format</i> and <i>provider</i>.</returns>
        </member>
        <member name="M:Sovren.Money.TryParse(System.String,Sovren.Money@)">
            <summary>
            Converts the specified string representation of a monetary value to its <see cref="T:Sovren.Money"/> equivalent.
            </summary>
            <param name="source">A string containing a <see cref="T:Sovren.Money"/> value to be converted.</param>
            <param name="value">Converted value when successful. <see cref="P:Sovren.Money.Empty"/> when unsuccessful.</param>
            <returns>true if the value was successfully converted</returns>
        </member>
        <member name="M:Sovren.Money.TryFindParse(System.String,Sovren.Money@)">
            <summary>
            Finds the first monetary value within the specified string and converts it to its <see cref="T:Sovren.Money"/> equivalent.
            </summary>
            <param name="source">A string containing a <see cref="T:Sovren.Money"/> value to be converted.</param>
            <param name="value">Converted value when successful. <see cref="P:Sovren.Money.Empty"/> when unsuccessful.</param>
            <returns>true if the value was successfully converted</returns>
        </member>
        <member name="P:Sovren.Money.Amount">
            <summary>
            Returns the amount.
            </summary>
            <returns>Decimal value</returns>
        </member>
        <member name="P:Sovren.Money.AmountAsInvariantString">
            <summary>
            Returns the invariant (not culture sensitive) string representation of the amount.
            </summary>
            <remarks>
            For details, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/>. The format is a fixed number of
            decimal places according to the currency type, no number groupings, period for
            decimal separator, and no currency symbol. For example: 100000.00
            </remarks>
            <returns>Invariant string representation of the Amount.</returns>
        </member>
        <member name="P:Sovren.Money.Currency">
            <summary>
            Returns the Currency type for this Money object.
            </summary>
            <value></value>
        </member>
        <member name="P:Sovren.Money.Empty">
            <summary>
            A special value indicating that this Money object has no value.
            </summary>
        </member>
        <member name="P:Sovren.Money.HasValue">
            <summary>
            True when the value is not Empty.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPostalAddressType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PostalAddressType [CPO 1_1_1]
            </summary>
        </member>
        <member name="F:Sovren.hrxmlPostalAddressType._countryCode">
            <summary>
            Limited by xsd to two-digit ISO 3316 Country Codes, so this has a necessary side effect.
            </summary>
        </member>
        <member name="T:Sovren.Diagnostic">
            <summary>
            Helper methods for tracing, profiling and other diagnostic actions.
            Intended solely for internal use by Sovren. This class is marked as
            public to allow its use by Sovren test harnesses.
            </summary>
        </member>
        <member name="M:Sovren.Diagnostic.GetStopwatch(System.String)">
            <summary>
            Get a named stopwatch.
            </summary>
            <param name="name">Name of the stopwatch.</param>
            <returns>The named stopwatch.</returns>
        </member>
        <member name="M:Sovren.Diagnostic.GetAllStopwatches">
            <summary>
            Get all named stopwatches.
            </summary>
            <returns>List of all NamedStopwatch objects.</returns>
        </member>
        <member name="M:Sovren.Diagnostic.RemoveStopwatch(System.String)">
            <summary>
            Remove a named stopwatch.
            </summary>
            <param name="name">Name of the stopwatch.</param>
        </member>
        <member name="M:Sovren.Diagnostic.RemoveAllStopwatches">
            <summary>
            Remove all named stopwatches.
            </summary>
        </member>
        <member name="M:Sovren.Diagnostic.ResetAllStopwatches">
            <summary>
            Reset all named stopwatches.
            </summary>
        </member>
        <member name="M:Sovren.Diagnostic.ReportAllStopwatches">
            <summary>
            Return a string containing the cumulative elapsed time for each stopwatch
            in the format of [Name]=[Milliseconds] per line, sorted by Name.
            </summary>
            <returns>The report.</returns>
        </member>
        <member name="T:Sovren.Taxonomy">
            <summary>
            Taxonomy is a class that represents a single taxonomy and holds a collection of child taxonomies and skills.
            </summary>
        </member>
        <member name="M:Sovren.Taxonomy.AddSkill(System.String,System.String,System.Boolean)">
            <summary>
            Add a new skill, replacing any existing skill with the same Id.
            </summary>
            <param name="id">The <see cref="P:Sovren.TaxonomySkill.Id">Id</see> of the skill.</param>
            <param name="term">The <see cref="P:Sovren.TaxonomySkill.Term">Term</see> of the skill.</param>
            <param name="allowLowerCaseMatch">When false, only ProperCase or UPPERCASE variations of the term will match. When true, the lowercase variation will also match.</param>
            <returns>The skill object that was added.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.AddTaxonomy(System.String,System.String)">
            <summary>
            Add a child Taxonomy, replacing any existing Taxonomy with the same Id.
            </summary>
            <param name="id">The <see cref="P:Sovren.Taxonomy.Id"/> of the Taxonomy.</param>
            <param name="name">The <see cref="P:Sovren.Taxonomy.Name"/> of the Taxonomy.</param>
            <returns>The taxonomy object that was added.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.ContainsSkill(System.String)">
            <summary>
            Determines whether this Taxonomy contains a specific Skill.
            </summary>
            <param name="id">A skill id.</param>
            <returns>True if the specified skill id exists and is within this taxonomy (or its children); otherwise, false.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.ContainsTaxonomy(System.String)">
            <summary>
            Determines whether this Taxonomy contains a specific sub Taxonomy.
            </summary>
            <param name="id">A taxonomy id.</param>
            <returns>True if the specified taxonomy id exists and is a descendant of this taxonomy; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.GetSkill(System.String)">
            <summary>
            Get a skill.
            </summary>
            <param name="id">The Id of the skill to get.</param>
            <returns>The skill with the specified <paramref name="id"/> if it exists; otherwise null.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.GetTaxonomy(System.String)">
            <summary>
            Get a taxonomy.
            </summary>
            <param name="id">The Id of the taxonomy to get.</param>
            <returns>The taxonomy with the specified <paramref name="id"/> if it exists; otherwise null.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.RemoveSkill(System.String)">
            <summary>
            Remove a skill.
            </summary>
            <param name="id">The Id of the skill to remove.</param>
            <returns><b>true</b>if the skill is successfully found and removed; otherwise false.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.ToString">
            <summary>
            Get a string that represents this object.
            </summary>
            <returns>"Id, Name"</returns>
        </member>
        <member name="M:Sovren.Taxonomy.GetHashCode">
            <summary>
            Returns the hash code for this Taxonomy.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Taxonomy.
            </summary>
            <param name="obj">The object to compare with the current Taxonomy.</param>
            <returns><b>true</b> if the specified object is equal to the current Taxonomy; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.Equals(Sovren.Taxonomy)">
            <summary>
            Determines whether the specified Taxonomy is equal to the current Taxonomy.
            </summary>
            <param name="t">The Taxonomy to compare with the current Taxonomy.</param>
            <returns><b>true</b> if the specified Taxonomy is equal to the current Taxonomy; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.op_Equality(Sovren.Taxonomy,Sovren.Taxonomy)">
            <summary>
            Determines whether two Taxonomy objects are equal.
            </summary>
            <param name="x">A Taxonomy object.</param>
            <param name="y">A Taxonomy object.</param>
            <returns><b>true</b> if the two Taxonomy objects are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Sovren.Taxonomy.op_Inequality(Sovren.Taxonomy,Sovren.Taxonomy)">
            <summary>
            Determines whether two Taxonomy objects are not equal.
            </summary>
            <param name="x">A Taxonomy object.</param>
            <param name="y">A Taxonomy object.</param>
            <returns><b>true</b> if the two Taxonomy objects are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Sovren.Taxonomy.Id">
            <summary>
            The Id that uniquely identifies this taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.Taxonomy.Parent">
            <summary>
            Parent Taxonomy, if any; otherwise null.
            </summary>
        </member>
        <member name="P:Sovren.Taxonomy.Name">
            <summary>
            A descriptive name for the Taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.Taxonomy.Root">
            <summary>
            The TaxonomyRoot that contains this Taxonomy.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlUserAreaBullet">
            <summary>
            Public class for implementing Sovren Bullet extension for HR-XML Resume.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBullet.#ctor(Sovren.ParserSettings)">
            <summary>
            Standard constructor.
            </summary>
            <param name="settings">Parser settings</param>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBullet.GetAsXml">
            <summary>
            Get the XML fragment for this bullet item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:Bullet&gt;></c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBullet.GetAsRM21CompatibleXml">
            <summary>
            Get the XML fragment for this bullet item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:Bullet&gt;></c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBullet.Clear">
            <summary>
            Reset all properties to default values.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBullet.Type">
            <summary>
            The type of bullet item.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBullet.Value">
            <summary>
            The text of the bullet item.
            </summary>
        </member>
        <member name="T:Sovren.DllHelper">
            <summary>
            Utility class for loading DLLs on demand and automatically unloading them when the AppDomain unloads.
            </summary>
        </member>
        <member name="M:Sovren.DllHelper.AutoLoadLibrary(System.String,System.Reflection.Assembly)">
            <summary>
            Attempts to load a DLL from the same folder as this assembly, or if not found
            then from a x86/x64 sub-folder. This DLL will be automatically unloaded during
            AppDomain.DomainUnload or AppDomain.ProcessExit.
            </summary>
            <param name="dllName">Filename without path. For example: dten600.dll</param>
            <param name="assembly">Name of assembly used for embedded resource or as start of relative path.</param>
            <returns>Native handle to loaded module.</returns>
        </member>
        <member name="M:Sovren.DllHelper.GetLibraryStream(System.Reflection.Assembly,System.String,System.Int64@)">
            <summary>
            
            </summary>
            <param name="assembly">Assembly containing libraries archive as embedded resource.</param>
            <param name="libraryName">Name of stream to get.</param>
            <param name="librarySize">Length of stream in bytes.</param>
            <returns>Stream if found; otherwise null.</returns>
        </member>
        <member name="M:Sovren.DllHelper.AutoLoadAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Attempts to load an Assembly from an embedded resource, or from the same folder as this assembly, or from
            an x86/x64 sub-folder.
            </summary>
            <param name="dllName">Name of the assembly, with partial path. For example: x86\dtSearchNetApi2.dll</param>
            <param name="assembly">Name of assembly used for embedded resource or for its relative path.</param>
            <returns>The loaded Assembly.</returns>
        </member>
        <member name="M:Sovren.DllHelper.ExtractLibrary(System.Reflection.Assembly,System.String)">
            <summary>
            Extracts a built-in library to a temp directory and returns the path of the extracted library.
            </summary>
            <remarks>
            The current implementation extracts libraries once per machine, once per version to a temp folder
            named like this: %TEMP%\sov-6.2.1067.0
            This avoids the overhead of extracting them each time.
            The libraries are stored in a zipped resource, to minimize the size of the assembly.
            The initialization overhead per machine per version is about 100-200 ms.
            The initialization overhead per application instance (AppDomain) is about 1 ms.
            The initialization overhead per DocumentConverter instance is virtually non existent.
            </remarks>
            <returns>Path of the extracted library.</returns>
        </member>
        <member name="T:Sovren.ParserMapper">
            <summary>
            ParserMapper is the class that performs HR-XML parsing, using a "completed"
            instance of a SovrenResumeParser.  The parsed results are available via an
            output parameter, return parameter, or by reading the Resume property.
            </summary>
            <remarks>
            Parsing is performed by two different objects: <br/>
            1)	Basic parsing is performed by an instance of the SovrenResumeParser class.<br/>
            2)	HR-XML (detailed) parsing is performed by an instance of this ParserMapper <br/>
            		class.  The ParserMapper instance uses a completed instance of a <br/>
            		SovrenResumeParser, and then performs more detailed parsing.  The results<br/>
            		are available as an HR-XML Resume 2.4-compliant object or text string.<br/>
            </remarks>
        </member>
        <member name="M:Sovren.ParserMapper.#ctor(Sovren.ParserSettings)">
            <summary>
            Create a new instance of the parser using the specified settings.
            If you are using COM, then first create an instance of ParserFactory and then
            call <see cref="M:Sovren.ParserFactory.CreateParser(Sovren.ParserSettings)"/> to create
            a new instance of this class.
            </summary>
            <remarks>
            <para>
            The ParserSettings instance passed to this constructor is cloned and made
            available by the read-only <see cref="P:Settings"/> property. The parser uses the
            clone and will not be aware of any changes made to your original settings object.
            Consequently:
            </para>
            <list type="bullet">
            <item>You must make all settings changes before calling this constructor.</item>
            <item>You can reuse your ParserSettings instance for multiple ParserMapper instances.</item>
            </list>
            <para>
            Also please note that the Settings property may be internally modified
            during parsing to add or change settings according to information learned about
            the resume that is being parsed (such as automatic language detection). These
            changes will be reflected in the Settings property but will not change the
            ParserSettings object that you created. After parsing, you may 
            access these changes on the Settings property of your ParserMapper instance.
            </para>
            <para>
            Here are the steps for parsing:
            </para>
            <list type="number">
            <item>Create a ParserSettings instance.</item>
            <item>Configure that ParserSettings instance by setting its properties.</item>
            <item>Instantiate a ParserMapper instance using this constructor and pass your
            ParserSettings instance to this constructor. Any settings changes you make after this step
            will be ignored by this parser instance.</item>
            <item>Call <see cref="M:Parse"/>.</item>
            <item>Access the parser results on <see cref="P:Resume"/> and <see cref="P:Settings"/>.</item>
            </list>
            <code><![CDATA[
            	ParserSettings settings = new ParserSettings();
            	settings.Culture.UseSweden = true;
            	ParserMapper parser = new ParserMapper(settings);
            	... do not change any settings ...
            	parser.Parse(resumePlainText);
            	... retrieve results ...
            ]]>
            </code>
            </remarks>
            <param name="settings">
            The settings to use during parsing. Cannot be null. The settings are cloned
            and a read-only copy is made available by the <see cref="P:Settings"/> property.
            Changes made to this object after the constructor will be ignored by this parser instance.
            </param>
        </member>
        <member name="F:Sovren.ParserMapper.END_OF_FOUND_DATA">
            <summary>
            This marker will be placed into PositionHistory Description sections to mark 
            the last place that fielded data was found in the text.  Only used if
            the EmbedOffsetOfLatestDataFoundMarkerIntoPositionHistoryText setting is set to true.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.BeginStep(System.String)">
            <summary>
            Checks whether the parser has exceeded the SoftTimeout.
            Also adds an entry to the PerformanceLog.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.Parse(System.String)">
            <summary>
            Parses the provided text according to the settings provided in the constructor.
            When complete, you can retrieve the results from the <see cref="P:Sovren.ParserMapper.Resume"/> property.
            </summary>
            <param name="resumeText">The plain text of the resume from the Sovren Document Converter.</param>
        </member>
        <member name="M:Sovren.ParserMapper.ParseForContactInfo(System.String)">
            <summary>
            Parse for only contact information, without incurring the additional overhead associated with
            parsing for other sections of information.
            </summary>
            <param name="resumeText">The plain text of the resume from the Sovren Document Converter.</param>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessCandidatePersonalData">
            <summary>
            For legacy users, map the Contact Info data from the SovrenResumeParser instance in the
            SovParser property, into the hrxmlResume instance in the Resume property.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessPersonalInformation">
            <summary>
            Process personal information that is captured by SovParser but that is not
            part of the HR-XML standard. This information is output to Resume.UserArea.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessJobObjective">
            <summary>
            Extracts the Job Objective and populates the Resume.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessResumeInThread(System.String)">
            <summary>
            There is no thread spawned here.  This is a self-timing method that
            performs all of the parsing (other than what the SovParser did).
            <br/>
            The order of processing here is the recommended order, based on 
            subjective judgments regarding relative importance.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ForEachType``1(System.Object,System.Action{``0})">
            <summary>
            Walks all HRXML objects of type hrxmlBase, hrxmlCollection, hrxmlCollectionHD.
            The specified type must be a subclass of one of those 3 types.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.StartWorkerThread(Sovren.ParserMapper.ProcessDelegate)">
            <summary>
            Creates a thread, wraps the delegate with an exception handler, sets the new thread
            to match the current thread's priority, then starts the thread.
            </summary>
            <param name="processDelegate">The method that does the actual work.</param>
            <returns>A started worker thread</returns>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessSummaries">
            <summary>
            Extracts ExecutiveSummary and QualificationsSummary and populates the Resume object.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessQualifications">
            <summary>
            <para>Private.</para>
            <para>
            Parses only some sections, as in W.H. and Skills and Qualif. Summary and Cover Letter.
            </para>
            <para>
            NOTE:  If "SkipSkillsParsing = false", but there is no TaxonomySource defined, the
            TaxonomySource will automatically be set to use the default Sovren Skills Taxonomy.
            However, in that case, the skills taxonomy will be instantiated only for this
            one Parser instance, and this will cause performance to suffer.  Instead, be
            sure to always instantiate the skills taxonomy (TaxonomyCollection) independently of the Parser,
            and assign your instantiated skills taxonomy instance to the  Parser's own 
            TaxonomySource property. That way, you can allow the skills taxonomy to survive 
            beyond the life of a single Parser instance, allowing it to be reused, and thereby
            increasing performance/throughput.
            </para>
            <para>
            Also, be sure to specify which taxonomies to parse for using the AddTaxonomyToParserFor()
            method of this class; otherwise, the Parser will default to all skills lists in all
            taxonomies in the entire TaxonomySource object!
            </para>
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessEduSection(System.String)">
            <summary>
            Parses education history and updates the Resume object.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ReparseEducation(System.String)">
            <summary>
            Allows just the education section to be reparsed.  Obviously, if you do
            not pass in different text, the parsing results will not change....
            </summary>
            <param name="EducationSectionText"></param>
        </member>
        <member name="M:Sovren.ParserMapper.CleanSchoolName(Sovren.EducationSubSection)">
            <summary>
            This needs to eventually be refactored into the rrResParse2 if possible.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.CopyEducationToHrxml">
            <summary>
            Copies the education parser's results into the Resume object..
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.VerifyEducationSection(System.String)">
            <summary>
            Checks to see if we have text in the Education section or just an Education Header.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetMultipleSchoolsInSection(System.String)">
            <summary>
            It's hard to correctly segment education into the correct discrete schools subsections.
            This is where we do that.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetParagraphsEndingAtTheseLines(System.Int32[],Sovren.TStringList)">
            <summary>
            Extracts paragraphs from a text string, as instructed.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetParagraphsStartingAtTheseLines(System.Int32[],Sovren.TStringList)">
            <summary>
            Extracts paragraphs from a text string, as instructed.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessEduSection(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.FindEducationSubSections(System.String[])">
            <summary>
            This is the method that uses the GetMultipleSchoolsInSectionX methods 
            to segment education history into discrete school histories.
            </summary>
            <param name="EduItems"></param>
        </member>
        <member name="M:Sovren.ParserMapper.FindSubSections(System.String,Sovren.ParserMapper.ProcessSection,Sovren.ParserMapper.ProcessSection)">
            <summary>
            Takes a piece of text and tries to find the apparent subsections within it.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessEducationSection">
            <summary>
            This is the top level entry point into education history parsing.
            </summary>
        </member>
        <member name="F:Sovren.ParserMapper.NbrWHSectionsParsed">
            <summary>
            Tracks how many individual job histories have been parsed in the work history section.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ReparseWorkHistorySection(System.String,Sovren.WorkHistorySection,System.Boolean,System.Boolean)">
            <summary>
            This method allows all of the work history to be reparsed.  Used
            in interactive applications only.
            </summary>
            <param name="WorkHistorySectionText"></param>
            <param name="EmploymentColl"></param>
            <param name="sectionWasCalculated"></param>
            <param name="ClearBeforeParsing"></param>
        </member>
        <member name="F:Sovren.ParserMapper.sectionSplitter">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetSubSectionsDelimitedByOurMarker(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.DeleteCandidateNameLinesFromSection(System.String)">
            <summary>
            Make sure candidate names (Bill Jones resume pg. 3) don't bleed through.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessWorkHistorySection">
            <summary>
            Main entry point for work history parsing.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.CheckForCurrentJob">
            <summary>
            We need to see if we've found the current job the candidate is in. (Remarkably, even
            95% of unemployed people seem to have a "xxxx - present" job on there...		
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.WorkHistoryIncludesCurrentDate">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.EnsureCurrentJob">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.NormalizedOrgName(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetEmployerOrgByName(System.String)">
            <summary>
            In the HR-XML schema, you can have several different positions for a single employer.
            This method is designed to ensure that we do indeed nst the job histories under the
            single employer rather than repeating the EmployerOrg entity type.
            </summary>
            <param name="EOName"></param>
            <returns>Existing EO, if found; otherwise, new blank EO.</returns>
        </member>
        <member name="M:Sovren.ParserMapper.FillsHolesInWorkHistory(Sovren.WorkHistorySubSection,Sovren.WorkHistorySubSection)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.AddOrUpdateWH(Sovren.WorkHistorySubSection,Sovren.WorkHistorySubSection,Sovren.hrxmlPositionHistoryType)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="F:Sovren.ParserMapper.FpositionTitlesList">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.CopyEmploymentToHrxml(Sovren.WorkHistorySection)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessWorkHistSection(System.String)">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetOffsetsOfData(Sovren.hrxmlPositionHistoryType,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            When we write a job position history record, we will embed a custom piece of text that gives 
            position title and company name probabilities, and that also tells where the closet and farthest
            offsets into the text are for any of the data that we found.  That info allows users to cut out
            redundant text when they are displaying fielded data.
            </summary>
        </member>
        <member name="F:Sovren.ParserMapper.FEmploymentSection">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ParseOnePositionHistoryAndReturnStandaloneWHSubSectionObject(System.String)">
            <summary>
            Parse a single position history and return a work history subsection object that
            is standalone and is NOT included in the Resume property unless you explicitly add it in.
            This function is normally used for reparsing a single position history.
            </summary>
            <param name="OnePositionHistoryText">The full text of just a single position held, 
            NOT the entire work history section encompassing all positions held.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessWorkHistSection(System.String,System.Boolean)">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessWorkHistSection(System.String)">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ShouldStackColumns(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.StackColumns(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.JobAppearsToBeEducationNotWork(Sovren.WorkHistorySubSection)">
            <summary>
            This is LOOSE LOGIC, designed only for use with Indian/Fresher resumes.
            </summary>
            <param name="subsection"></param>
            <returns></returns>
        </member>
        <member name="F:Sovren.ParserMapper.IgnoreColonsWhenWorkHistorySectioning">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.GetValidWorkHistorySection(System.Boolean@)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessLicensesAndCertifications">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessLanguages">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAssociations">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAffiliations">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessOrganizations">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessReferences">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessRef(System.String)">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessRef(System.String)">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessSecurityClearances">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessSecClr(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessSecClr(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAchievements">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessAPatent(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ISDisqPatent(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAPatent(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessPatents">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessASpeakingEvent(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessASpeakingEvent(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessSpeakingEvents">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessAPublication(Sovren.hrxmlPublicationHistory.PubType)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAPublication(System.String,Sovren.hrxmlPublicationHistory.PubType)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessPublications">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.PreProcessAMilitaryHistory(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessAMilitaryHistory(System.String)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessMilitaryHistory">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.EvaluateJobObjectiveFit(System.Boolean@,System.String@)">
            <summary>
            Returns a boolean (objectiveMatchesExperience) and a human-readable string (detail)
            that describes whether the candidate's stated job objective is consistent with 
            the candidate's experience.
            </summary>
            <param name="objectiveMatchesExperience">OUT PARAMETER (does not need to be initialized when passed in). 
            Boolean value that denotes whether the 
            job objective's main taxonomy matches the experience shown in the rest of the resume.</param>
            <param name="detail">OUT PARAMETER (does not need to be initialized when passed in). 
            If there is not a match, then this string will contain
            a human-readable explanation of what differences were calculated.</param>
        </member>
        <member name="M:Sovren.ParserMapper.ProcessManagementExperience">
            <summary>
            Called during parsing. Completes the evaluation/calculation of management experience.
            </summary>
            <returns>A human-readable string summarizing the candidate's management experience.</returns>
        </member>
        <member name="M:Sovren.ParserMapper.SummarizeLengthOfWorkExperience(System.Text.StringBuilder)">
            <summary>
            Adds work experience summary to description.
            </summary>
        </member>
        <member name="M:Sovren.ParserMapper.EducationSectionPrecedesWorkHistory">
            <summary>
            In the raw resume, did the candidate list his education before his work history?  
            </summary>
            <returns>Boolean value. When the value is "true", that is usually a very good
            indicator that the applicant is an entry level candidate.</returns>
        </member>
        <member name="M:Sovren.ParserMapper.IsEntryLevel">
            <summary>
            Is this resume indicative of a candidate that has entry-level skills 
            or that is seeking an entry-level position?
            </summary>
            <returns>Boolean value. When the value is "true", that is usually a very good
            indicator that the applicant is an entry level candidate.</returns>
        </member>
        <member name="M:Sovren.ParserMapper.IsConsultant">
            <summary>
            Is the candidate a consultant, or has she been one?
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="P:Sovren.ParserMapper.CurrentPositionTitle">
            <summary>
            Position Title at the current job.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.CurrentEmployerName">
            <summary>
            Employer Name at the current job.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.UserTaxonomyMappingsForSkillsTaxonomies">
            <summary>
            A mapping of Sovren Taxonomy Id to User Taxonomy Id values. This mapping
            is applied during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.MappingsOfSovrenTaxonomiesToUserFunctionalAreas">
            <summary>
            The Parser has a default mapping system for mapping Sovren Taxonomies to user functional areas
            used by SAP.  If a user is defining her own taxonomies, or her own categories, or her own mappings,
            then this object will need to be constructed and populated by the user.  The default value of this 
            object is null, meaning that the Parser will use the Sovren defaults.
            <br/>
            NOTE: This object is irrelevant if Settings.Coverage.JobCategories = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.MappingsOfSovrenTaxonomiesToUserJobHierarchies">
            <summary>
            The Parser has a default mapping system for mapping Sovren Taxonomies to user job hierarchy levels
            used by SAP.  If a user is defining her own taxonomies, or her own job hierarchies, or her own mappings,
            then this object will need to be constructed and populated by the user. The default value of this 
            object is null, meaning that the Parser will use the Sovren defaults.
            <br/>
            NOTE: This object is irrelevant if Settings.Coverage.JobCategories = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.Parsed">
            <summary>
            True if the Parse method has already been called on this object.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.ParserVersion">
            <summary>
            Version string as "Major.Minor.Build.Revision".  Read-only.
            </summary>
            <remarks>
            Same as <see cref="P:Sovren.ParserMapper.Version"/> but implemented as an instance member so that
            it is accessible through the COM interface.
            </remarks>
        </member>
        <member name="P:Sovren.ParserMapper.PerformanceLog">
            <summary>
            Retrieve the performance log that was gathered during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.Resume">
            <summary>
            Read this property after parsing to get a full HR-XML Resume 2.4/2.2/2.3/2.4 -compliant 
            results object.  This object has hundreds of properties and nested 
            subobjects representing the full HR-XML Resume 2.4+ schema.
            <br/>
            You can get the string representation of the HR-XML parsed results by
            just calling Resume.GetAsXml() or Resume.ToString() or another output method,
            or by walking the properties of the object.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.Settings">
            <summary>
            Read-only clone of the ParserSettings provided during the constructor.
            Some settings may have been modified during parsing, as a result of
            AutoDetect or other similar settings.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.TimedOut">
            <summary>
            True when the Parse method exceeded <see mref="ParserRuntimeSettings.SoftTimeout"/>
            or <see mref="ParserRuntimeSettings.HardTimeout"/>.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.Version">
            <summary>
            Version string as "Major.Minor.Build.Revision".  Read-only.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.SResume">
            <summary>
            Private.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.CompleteResumeSections">
            <summary>
            This method returns a ResumeSections object that has NOT been
            optimized for Work History and Education parsing. This method may
            return a ResumeSections object with many, many more sections than
            what SovParser.Sections contains, because that one has been revised/
            optimized for certain parsing purposes.
            </summary>
            <returns>ResumeSections</returns>
        </member>
        <member name="P:Sovren.ParserMapper.positionTitlesList">
            <summary>
            Private.
            </summary>
        </member>
        <member name="P:Sovren.ParserMapper.EmploymentSection">
            <summary>
            Corresponds to the HR-XML Resume schema's EmploymentHistory section.
            </summary>
        </member>
        <member name="T:Sovren.ParserMapper.WorkerWrapper">
            <summary>
            Simple wrapper for worker threads to make sure that exceptions are
            properly handled.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlUserArea">
            <summary>
            Summary description for hrxmlUserArea.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlProgramId">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ProgramId [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlMajorType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for MajorType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlInternetDomainNames">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for InternetDomainNames [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompetencyWeight">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompetencyWeight [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompensation">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Compensation [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAchievementType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for AchievementType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.FileHelper">
            <summary>
            Utility methods for working with files and directories.
            </summary>
        </member>
        <member name="M:Sovren.FileHelper.CreateTempDirectory(System.String)">
            <summary>
            Creates a randomly named directory in the current user's temp directory.
            </summary>
            <param name="prefix">This prefix will be added to the directory name. Null or Empty indicates no prefix.</param>
            <returns>Path to the newly created directory.</returns>
            <remarks>
            The directory name begins with the specified <c>prefix</c>.
            The directory is not automatically deleted.
            </remarks>
            <exception cref="T:System.IO.IOException">The directory could not be created.</exception>
        </member>
        <member name="M:Sovren.FileHelper.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Returns the directory where the specified assembly is located.
            </summary>
            <param name="assembly">Assembly that we want to find the location of.</param>
            <returns>Returns the directory where the specified assembly is located.</returns>
            <remarks>
            This is useful for finding the directory of the currently executing assembly:
            <code>
            string dir = FileHelper.GetAssemblyDirectory(Assembly.GetExecutingAssembly());
            </code>
            </remarks>
        </member>
        <member name="M:Sovren.FileHelper.ReadAllBytes(System.String)">
            <summary>
            Similar to <see cref="M:System.IO.File.ReadAllBytes(System.String)"/> but adds the ability to read files that
            are open for write by other applications such as Microsoft Word.
            </summary>
            <param name="path">The file to read.</param>
            <returns>Bytes read from the file.</returns>
        </member>
        <member name="M:Sovren.FileHelper.ReadAllText(System.String)">
            <summary>
            Similar to <see cref="M:System.IO.File.ReadAllText(System.String)"/> but adds the ability to read files that
            are open for write by other applications and adds automatic detection of the
            encoding.
            </summary>
            <param name="path"></param>
            <returns>Text within the file.</returns>
            <seealso cref="M:Sovren.FileHelper.ReadAllBytes(System.String)"/>
            <seealso cref="M:Sovren.EncodingHelper.ReadStringWithAutoDetectEncoding(System.Byte[])"/>
        </member>
        <member name="M:Sovren.FileHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Similar to <see cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])"/> but prevents any reads until the file is fully written.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Sovren.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            Similar to <see cref="M:System.IO.File.WriteAllText(System.String,System.String)"/> but prevents any reads until the file is fully written.
            Uses <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="text">The text to write to the file.</param>
        </member>
        <member name="M:Sovren.FileHelper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Similar to <see cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)"/> but prevents any reads until the file is fully written.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="text">The text to write to the file.</param>
            <param name="encoding">The encoding for the file.</param>
        </member>
        <member name="T:Sovren.hrxmlResumeUserAreaPersonalInformation">
            <summary>
            Summary description for hrxmlResumeUserAreaPersonalInformation.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPositionHistoryUserArea">
            <summary>
            Container for the HR-XML PositionHistory/UserArea element.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryUserArea.#ctor(Sovren.ParserSettings)">
            <summary>
            Standard constructor.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryUserArea.Clear">
            <summary>
            Set all properties to their default value.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryUserArea.GetAsXml">
            <summary>
            Generates the <c>&lt;UserArea&gt;</c> XML fragment for a PositionHistory.
            </summary>
            <returns>XML fragment beginning with <c>&lt;UserArea&gt;</c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryUserArea.GetAsRM21CompatibleXml">
            <summary>
            Generates the <c>&lt;UserArea&gt;</c> XML fragment for a PositionHistory.
            </summary>
            <returns>XML fragment beginning with <c>&lt;UserArea&gt;</c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlPositionHistoryUserArea.Clone(Sovren.ParserSettings)">
            <summary>
            Create a deep clone of this object.
            </summary>
            <param name="settings">Ignored.</param>
            <returns></returns>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.Id">
            <summary>
            Value that identifies this position history within this resume.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.CompanyNameProbability">
            <summary>
            Non-negative logarithmic scale indicating how confident the parser is
            that the organization name was parsed correctly.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.PositionTitleProbability">
            <summary>
            Non-negative logarithmic scale indicating how confident the parser is
            that the position title was parsed correctly.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.OffsetOfFarthestDataFound">
            <summary>
            The index of the last character in Description that was parsed into
            other structured data fields. The text following this index is the
            normal description text. This value should only be used when the
            StripHeaderFromPositionHistoryDescription setting is false.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.IsSelfEmployed">
            <summary>
            True when this is a self-employed position.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.SelfEmploymentPhrase">
            <summary>
            The exact text from the resume that indicates this is a self-employed position.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.NumberOfEmployeesSupervised">
            <summary>
            The number of employees that the candidate supervised in this position.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlPositionHistoryUserArea.Bullets">
            <summary>
            When the CreateBullets setting is set to true, this contains a list of
            bullet points derived from the Description. These points can be useful when
            generating template-based resumes from the parsed output.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlUserAreaBestFitTaxonomy">
            <summary>
            Public class for implementing BestFitTaxonomy extension for HR-XML Resume.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomy.#ctor(Sovren.ParserSettings)">
            <summary>
            Standard constructor.
            </summary>
            <param name="settings">Parser settings</param>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomy.#ctor(Sovren.ParserSettings,Sovren.Taxonomy,System.Double)">
            <summary>
            Construct from a TaxonomyWeight.
            </summary>
            <param name="settings">Parser settings</param>
            <param name="taxonomy">A taxonomy that was matched.</param>
            <param name="weight">Absolute weight of the taxonomy.</param>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomy.Clear">
            <summary>
            Reset all properties to default values.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomy.GetAsXml">
            <summary>
            Get the XML fragment for this item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:BestFitTaxonomy&gt;></c>.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomy.GetAsRM21CompatibleXml">
            <summary>
            Get the XML fragment for this item.
            </summary>
            <returns>XML fragment for <c>&lt;sov:BestFitTaxonomy&gt;></c>.</returns>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Id">
            <summary>
            The id of the taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.RootId">
            <summary>
            The id of the <see cref="T:Sovren.TaxonomyRoot"/> the <see cref="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Id"/> comes from.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Name">
            <summary>
            The name of the taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Weight">
            <summary>
            The weight calculated for this taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.PercentOfOverall">
            <summary>
            The weight expressed as a percentage of the overall total of all weights.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.PercentOfParent">
            <summary>
            The weight expressed as a percentage of the total of all weights within the same parent taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Taxonomy">
            <summary>
            The taxonomy.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlUserAreaBestFitTaxonomy.Subtaxonomies">
            <summary>
            The subtaxonomies of this taxonomy.
            </summary>
        </member>
        <member name="T:Sovren.MGMT_PARSER_TERMS">
            <summary>
            </summary>
        </member>
        <member name="F:Sovren.clsMGMT_PARSER_TERMS.Items">
            <remarks/>
        </member>
        <member name="T:Sovren.Broadlook.DocumentType">
            <summary>
            The types of text that can be passed to the <see mref="ContactCapture.Capture"/> method.
            </summary>
        </member>
        <member name="T:Sovren.Broadlook.ContactCapture">
            <summary>
            Through a partnership with Broadlook, this ContactCapture class (along with the
            32-bit only blccsov32.dll and broadfl.dll files) provides a mechanism for Sovren customers
            to very quickly capture multiple contacts from a non-resume documents, such as a
            contact list from a company web site. This component is not nearly as thorough
            or accurate as the ParserMapper component at extracting contact information from resumes,
            and it is not able to distinguish between candidate, reference, job board, or recruiter
            contact information, so it is not recommended for parsing resumes.
            </summary>
            <remarks>
            This class only works in 32-bit mode,
            Typical usage looks like this:
            <code><![CDATA[
            DocumentConverter converter = new DocumentConverter();
            string[] convertResult = converter.DoConversion(sourceFileBytes, DocumentConversion.OutputTypes.PlainText);
            string plainText = converterResult[1];
            
            ContactCapture cc = new ContactCapture();
            ContactCaptureSettings ccSettings = new ContactCaptureSettings();
            // Set any non-default configuration parameters here
            ContactCaptureResult ccResult = cc.Capture(plainText, ccSettings);
            foreach (Contact contact in ccResult.Contacts)
            {
                ... read properties from contact object ...
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sovren.Broadlook.ContactCapture.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sovren.Broadlook.ContactCapture.Capture(System.String,Sovren.Broadlook.ContactCaptureSettings)">
            <summary>
            Capture contact information from a text document.
            </summary>
            <param name="documentText">The document text to be examined. Can be text, html, csv (see <see cref="P:Sovren.Broadlook.ContactCaptureSettings.DocumentType"/>).</param>
            <param name="settings">Settings that control the capture behavior.</param>
            <returns>A strongly-typed object containing all of the captured data. Can be serialized to XML by calling <see cref="M:Sovren.Broadlook.ContactCaptureResult.GetAsXml">GetAsXml()</see>.</returns>
            <exception cref="T:Sovren.Broadlook.ContactCaptureException">Thrown when an unrecoverable error condition occurs.</exception>
        </member>
        <member name="M:Sovren.Broadlook.ContactCapture.DoCapture(System.String,Sovren.Broadlook.ContactCaptureSettings,System.String@,System.Boolean)">
            <summary>
            Do the main parsing work.
            </summary>
            <param name="documentText">The text to be parsed.</param>
            <param name="settings">The settings that control the parse behavior.</param>
            <param name="xml">The xml if one or more contacts is found or an error occurs. Empty if no contacts are found.</param>
            <param name="retry">When true, the capture is retried a second time to workaround intermittent data corruption.</param>
            <returns>
            0 if no contacts found, in which case the xml parameter is empty.
            Less than 0 if an error occurred, in which case the xml parameter contains an ErrorMessage element.
            Otherwise, the number of contacts found, in which case the xml contains all the data elements.
            </returns>
        </member>
        <member name="T:Sovren.Broadlook.ContactCaptureException">
            <summary>
            This type of exception is thrown whenever an error occurs within <see cref="T:Sovren.Broadlook.ContactCapture"/>.
            </summary>
        </member>
        <member name="T:Sovren.Broadlook.ContactCaptureSettings">
            <summary>
            This class holds all of the configuration options for ContactCapture.
            </summary>
        </member>
        <member name="M:Sovren.Broadlook.ContactCaptureSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sovren.Broadlook.ContactCaptureSettings.DocumentType">
            <summary>
            The type of document being processed (text, html, csv).
            Default = DocumentType.Text
            </summary>
        </member>
        <member name="P:Sovren.Broadlook.ContactCaptureSettings.IncludeContext">
            <summary>
            Include values for Context, ContextPre and ContextPost in the results.
            Default = false
            </summary>
        </member>
        <member name="P:Sovren.Broadlook.ContactCaptureSettings.MaxContacts">
            <summary>
            Maximum number of contacts to be returned. Set to 0 for no limit.
            Default = 0.
            </summary>
        </member>
        <member name="P:Sovren.Broadlook.ContactCaptureSettings.RequireContactMethod">
            <summary>
            When true, a contact will only be returned if it contains at least one method
            of contact such as an email, phone, postal address or website.
            When false, all possible contacts are returned, although there will often be
            some false positives that contain only a person name or CompanyName.
            Default = true
            </summary>
        </member>
        <member name="P:Sovren.Broadlook.ContactCaptureSettings.Sort">
            <summary>
            When true, contacts are sorted by name.
            When false, contacts are reported in the same order as they appear in the original document.
            Default = false
            </summary>
        </member>
        <member name="T:Sovren.Broadlook.ContactCaptureResult">
            <summary>
            Holds all of the data returned by <see cref="M:Sovren.Broadlook.ContactCapture.Capture(System.String,Sovren.Broadlook.ContactCaptureSettings)"/>.
            </summary>
        </member>
        <member name="T:Sovren.Broadlook.Contact">
            <summary>
            Holds all the data for a single contact returned by <see cref="M:Sovren.Broadlook.ContactCapture.Capture(System.String,Sovren.Broadlook.ContactCaptureSettings)"/>.
            </summary>
        </member>
        <member name="T:Sovren.Broadlook.Phone">
            <summary>
            Holds the data for a single phone number returned by <see cref="M:Sovren.Broadlook.ContactCapture.Capture(System.String,Sovren.Broadlook.ContactCaptureSettings)"/>.
            </summary>
        </member>
        <member name="T:Sovren.SkillsSections">
            <summary>
            Summary description for SkillsSections.
            </summary>
        </member>
        <member name="T:Sovren.RrLib1">
            <summary>
            Base library from which all Sovren resume parsing routines are built.
            </summary>
        </member>
        <member name="F:Sovren.RrLib1._xmlCharacterSubstitutions">
            <summary>
            <see cref="M:Sovren.RrLib1.BuildXmlCharacterSubstitutionMap"/>
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.#cctor">
            <summary>
            Static class constructor
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.AddNextWordIfPreposition(Sovren.ParserSettings,System.String,System.String,System.String[])">
            <summary>
            Unless it follows punctuation
            </summary>
            <param name="settings"></param>
            <param name="InText"></param>
            <param name="Phrase"></param>
            <param name="exceptThese">List of prepositions that should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.AddSpaceToUnconcatenateNumberLetter(System.String)">
            <summary>
            Add space to phrases like "Aug 2003to Present" to return "Aug 2003 to Present".
            </summary>
            <param name="text"></param>
            <returns>Does not return null. Returns empty string if text was null; else if no concatenated letternumber or numberletter sequences are found, returns the input string; else returns the string with spaces added between letternumber transitions.</returns>
        </member>
        <member name="M:Sovren.RrLib1.AdjustTwoDigitYear(System.Int32,Sovren.ParserSettings)">
            <summary>
            Adjusts a two-digit year to be a four-digit year, based on ParserSettings values.
            </summary>
            <param name="iYr"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.BuildXmlCharacterSubstitutionMap">
            <summary>
            Builds an array of substitutions for characters in the ASCII range so that
            the substitutions can be performed quickly without multiple tests for equality.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.CleanTextForSoapTransport(System.String)">
            <summary>
            Remove or replace characters that are illegal in SOAP/XML.
            This method does NOT do any character escaping.
            </summary>
            <param name="text">The text to clean.</param>
            <returns>Text that is safe to encode in a SOAP/XML document.</returns>
        </member>
        <member name="M:Sovren.RrLib1.CleanTextForXmlOptimized(System.String)">
            <summary>
            Cleanses and encodes the text so that it is safe to be inserted
            into an XML string.
            </summary>
            <param name="text">The text to cleanse and encode.</param>
            <returns>Text that has been cleansed and encoded.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ConcatenateArrays(System.String[][])">
            <summary>
            Concatenates the arrays in the order specified to create one large array.
            </summary>
            <param name="arrays">List of arrays to concatenate.</param>
            <returns>A single list containing every item from the specified arrays.</returns>
            <remarks>This method does not perform any checks for nulls or duplicates.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.ContainsLine(System.String,System.String,System.StringComparison)">
            <summary>
            Determines if the source text includes at least one line that contains only the specified text,
            ignoring any leading or trailing whitespace.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="line">The text to search for.</param>
            <param name="comparisonType">One of the StringComparison values.</param>
            <returns>True if the line was found, otherwise false.</returns>
            <remarks>Recognized line breaks include: \r, \n, and \r\n.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.ListContainsSubstring(System.String,System.Collections.Generic.IList{System.String},System.Globalization.CompareOptions)">
            <summary>
            Determines if substring is found within any of the specified items.
            </summary>
            <param name="substring">The string to look for within each item.</param>
            <param name="items">The list of items that may contain the specified substring.</param>
            <param name="options">String comparison options.</param>
            <returns>True if at least one item contains the specified substring.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ListContainsAnySubstring(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Determines if any substring is found within any of the specified items.
            </summary>
            <param name="substrings">The strings to look for within each item.</param>
            <param name="items">The list of items that may contain the specified substrings.</param>
            <param name="options">String comparison options.</param>
            <param name="allowCompleteMatch">When true, a full-length match is permitted. When false, it must be a partial match.</param>
            <returns>True if at least one item contains at least one substring.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ConvertNumberTermToInt(Sovren.ParserSettings,System.String)">
            <summary>
            Converts longest numeric term in the phrase to the equivalent integer value.
            </summary>
            <param name="settings">Parser settings.</param>
            <param name="phrase">Phrase that contains number terms.</param>
            <returns>If successful, the number (zero or more); otherwise, -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.CountFreestandingOccurences(System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Do NOT use on phrases without the WholeWordsOnly option. For that, see StringHelper.CountOccurences().
            </summary>
            <param name="inWhat"></param>
            <param name="ofWhat"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.CountLines(System.String)">
            <summary>
            Determine number of lines of text.
            Null or empty = 0.
            Text with no linebreak = 1.
            All other text = number of line breaks plus 1.
            </summary>
            <param name="text">Count lines within this text.</param>
            <returns>Number of lines of text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.DeleteExtraSpaces(System.String)">
            <summary>
            Reduce spans of adjacent space characters to a single space character.
            </summary>
            <param name="text">The source text.</param>
            <returns>The source text modified to contain no more than one adjacent space character.</returns>
        </member>
        <member name="M:Sovren.RrLib1.DeleteLeadingAndTrailingDates(System.String,Sovren.ParserSettings)">
            <summary>
            Does NOT delete any date lacking digits. TRIMS leading and trailing punctuation before and after finding date,
            and returns the string that way IF it did find a date.
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.DeletePhrase(System.String,System.String,System.Boolean)">
            <summary>
            Remove the first occurrence of <i>phrase</i> from <i>source</i>.
            </summary>
            <param name="source">Original string</param>
            <param name="phrase">Phrase to be removed</param>
            <param name="caseSensitive">When true, only case-sensitive matches are deleted.</param>
            <returns>The original string without the specified phrase.</returns>
        </member>
        <member name="M:Sovren.RrLib1.DetermineSurroundingBigWhitespace(System.String,System.String)">
            <summary>
            Big whitespace means > one space
            </summary>
            <param name="Line"></param>
            <param name="Phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.EndsWithPreposition(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Trims trailing spaces before processing.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to check.</param>
            <param name="options">The options used for matching the preposition. WholeWordsOnly is already implied.</param>
            <returns>True if the last word is a preposition; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.RrLib1.EndsWithPreposition(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions,System.String@,System.Int32@)">
            <summary>
            Determines if the last word of the specified text is a preposition.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to check.</param>
            <param name="options">The options used for matching the preposition. WholeWordsOnly is already implied.</param>
            <param name="preposition">The preposition, if one was found.</param>
            <param name="index">The index of the preposition, if found; otherwise, -1.</param>
            <returns>True if the last word is a preposition; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ExtractWord(System.String,System.Int32)">
            <summary>
            Caution: Will split URLs!
            </summary>
            <param name="InText"></param>
            <param name="WordNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.ExtractWords(System.String)">
            <summary>
            Extract each word as a separate string.
            </summary>
            <param name="InText"></param>
            <returns>List of tokenized words.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindAll(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Find all matching items within some text.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A collection of StringSearchResult objects.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirst(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Find first matching item within some text.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirstLongest(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Find first matching item within some text. If multiple items are found at the same offset, the longest one is returned.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirst(System.String,System.String[],System.Int32,Sovren.RrLib1.MatchOptions)">
            <summary>
            Find first matching item within some text.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="startAt">Position within text to begin searching.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirstLongest(System.String,System.String[],System.Int32,Sovren.RrLib1.MatchOptions)">
            <summary>
            Find first matching item within some text. If multiple items are found at the same offset, the longest one is returned.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="startAt">Position within text to begin searching.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirst(System.String,System.String[],System.Int32,Sovren.RrLib1.MatchOptions,System.Boolean)">
            <summary>
            Find first matching item within some text.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="startAt">Position within text to begin searching.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <param name="findLongest">When true, if multiple items are found at the same offset, the longest one is returned.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindFirstEmail(Sovren.ParserSettings,System.String,System.Int32,System.Int32@)">
            <summary>
            </summary>
            <param name="settings"></param>
            <param name="theLine">Text to be searched.</param>
            <param name="StartHere">Start searching within theLine at this index.</param>
            <param name="FoundHere">Returns the index at which the email was found, or -1 if not found.</param>
            <returns>First email address found, or an empty string (String.Empty).</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindLastLongest(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Find last matching item within some text. If multiple items end at the same offset, the longest one is returned.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>A single StringSearchResult.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FindLine(System.String,System.String,System.StringComparison,System.Int32@,System.Int32@)">
            <summary>
            Find the first line that contains only the specified text,
            ignoring any leading or trailing whitespace.
            </summary>
            <param name="source">The text to search within.</param>
            <param name="line">The text to search for.</param>
            <param name="comparisonType">One of the StringComparison values.</param>
            <param name="startIndex">Index of the first character of the first matching line, including whitespace. -1 if not found.</param>
            <param name="length">Length of the first matching line, including the trailing line break. -1 if not found.</param>
            <returns>True if the line was found, otherwise false.</returns>
            <remarks>Recognized line breaks include: \r, \n, and \r\n.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.FindPersonalNameSuffixes(Sovren.ParserSettings,System.String,System.String@,System.Int32@)">
            <summary>
            NOTA BENE!!!!  This routine ASSUMES THAT THE INPUT PARAMETER IS A NAME!!!!
            That means that suffixes must be found at word #3 or later.
            </summary>
            <param name="settings"></param>
            <param name="name">A NAME!!</param>
            <param name="nameWithoutSuffixes"></param>
            <param name="earliestOffset">Returns offset of first suffix in the return array. If the array is empty, then this parameter returns -1.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstIndexOf(System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Find the first occurrence of a string within another string.
            </summary>
            <param name="text">The string to search within.</param>
            <param name="find">The string to find.</param>
            <param name="options">Options that control the find logic.</param>
            <returns>The index of the first occurrence of <c>find</c>, if found; otherwise -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstIndexOf(System.String,System.String,Sovren.RrLib1.MatchOptions,System.Int32)">
            <summary>
            Find the first occurrence of a string within another string.
            </summary>
            <param name="text">The string to search within.</param>
            <param name="find">The string to find.</param>
            <param name="options">Options that control the find logic.</param>
            <param name="startIndex">The starting index of the forward search.</param>
            <returns>The index of the first occurrence of <c>find</c> at or after <c>startIndex</c>, if found; otherwise -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstIndex(System.Int32,System.Int32)">
            <summary>
            Given two indexes (such as positions within a string), return the smallest
            non-negative value.
            </summary>
            <param name="a">An index.</param>
            <param name="b">An index.</param>
            <returns>Smallest non-negative index; or -1 if both indexes are negative.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Given three indexes (such as positions within a string), return the smallest
            non-negative value.
            </summary>
            <param name="a">An index.</param>
            <param name="b">An index.</param>
            <param name="c">An index.</param>
            <returns>Smallest non-negative index; or -1 if the three indexes are negative.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstIndex(System.Int32[])">
            <summary>
            Given three indexes (such as positions within a string), return the smallest
            non-negative value.
            </summary>
            <param name="indexes">One or more indexes to compare.</param>
            <returns>Smallest non-negative index; or -1 if the three indexes are negative.</returns>
        </member>
        <member name="M:Sovren.RrLib1.FirstWordIsArrayItem(Sovren.ParserSettings,System.String,System.String[])">
            <summary>
            Case sensitive.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.GetAllLineNumbersThatStartWithArrayItemAsFieldedData(Sovren.TStringList,System.String[])">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="items"></param>
            <returns>Will return NULL object if nothing found.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetAlphaNumericCount(System.String)">
            <summary>
            Counts the number of alphanumeric characters in the text.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetArrayMatchOffsetsAndLengths(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Exact match, or as per the MatchOptions.  Matches the array items in the text.
            </summary>
            <param name="InText">The text to be searched.</param>
            <param name="ItemsToMatch">An array of items to be matched.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>An Int2List structure where Int1 is the offset and Int2 is the length of the match.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetAttachedText(System.String,System.String,System.Int32)">
            <summary>
            Uses " \n\r\t,.;?:()" as delimiters and calls the overloaded method.
            </summary>
            <param name="InText"></param>
            <param name="phrase"></param>
            <param name="place"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetCharacters(System.String,System.Int32,System.Int32)">
            <summary>
            Will return this many characters OR LESS if there are not that many.
            </summary>
            <param name="source"></param>
            <param name="starts"></param>
            <param name="howMany"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetCompareOptions(System.Globalization.CompareOptions)">
            <summary>
            Combine the specified options with the configured options from the current parse thread, if any.
            </summary>
            <param name="options">Options to add</param>
            <returns>Specified options OR'd with the parser options. IgnoreCase alone becomes OrdinalIgnoreCase. None becomes Ordinal.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetCompareOptions(Sovren.ParserSettings,System.Globalization.CompareOptions)">
            <summary>
            Combine the specified options with the configured options from the specified ParserSettings, if any.
            </summary>
            <param name="options">Options to add</param>
            <param name="settings">Settings that specify the culture info</param>
            <returns>Specified options OR'd with the parser options. IgnoreCase alone becomes OrdinalIgnoreCase. None becomes Ordinal.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetFirstOffsetOfTermLoose(System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Allows XXX.Term and other punctuation. Finds 1999Dallas. Case sensitive.
            </summary>
            <param name="text"></param>
            <param name="term"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetFirstWordBeforeSpace(System.String)">
            <summary>
            Naive implementation of GetFirstWord.
            Returns input string if no space was found in the input string.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetLastWord(System.String,Sovren.RrLib1.STANDARD_TOKENIZERS)">
            <summary>
            WILL find trailing punctuation like an ampersand!
            </summary>
            <param name="text"></param>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetLineNumbersOfLinesContainingThis(Sovren.ParserSettings,Sovren.TStringList,System.String,Sovren.RrLib1.MatchOptions,System.Int32)">
            <summary>
            Integer1 holds the line number.
            Integer2 holds the offset on that line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetNearbyProperWords(Sovren.ParserSettings,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the Proper Cased phrases preceding and/or following the specified phrase.
            </summary>
            <param name="settings"></param>
            <param name="text">The phrase and its surrounding text.</param>
            <param name="phrase">The phrase.</param>
            <param name="phraseIndex">The index of the phrase within text.</param>
            <param name="requireAdditionalWords">When true, the method returns String.Empty if it can't find any additional words.</param>
            <param name="includeLeadingProperCasePrepositions">When true, leading proper-case prepositions (and articles) like "The" and "An" are included.</param>
            <returns>The Proper Cased phrase that includes <c>phrase</c>.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetNearbyProperWords(Sovren.ParserSettings,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the Proper Cased phrases preceding and/or following the specified phrase.
            </summary>
            <param name="settings"></param>
            <param name="text">The phrase and its surrounding text.</param>
            <param name="phrase">The phrase.</param>
            <param name="phraseIndex">The index of the phrase within text.</param>
            <param name="requireAdditionalWords">When true, the method returns String.Empty if it can't find any additional words.</param>
            <param name="includeLeadingProperCasePrepositions">When true, leading proper-case prepositions (and articles) like "The" and "An" are included.</param>
            <param name="extendThroughPrepositions">When true, the phrase is extended across preposition boundaries.</param>
            <returns>The Proper Cased phrase that includes <c>phrase</c>.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetNextWord(System.String,System.String,System.String[])">
            <summary>
            Case sensitive.
            </summary>
            <param name="text"></param>
            <param name="afterThis"></param>
            <param name="barriers"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetNumberTermsAsInts(Sovren.ParserSettings,System.String)">
            <summary>
            Get an array of number term values found in the text.
            </summary>
            <param name="settings">Parser settings.</param>
            <param name="text">Text that contains number terms.</param>
            <returns>Array of numbers found. Array length is zero if none were found.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetNumericValue(Sovren.ParserSettings,System.String,System.Double@)">
            <summary>
            Converts a string that is a number or represents a number into the correct number value.
            </summary>
            <param name="settings">Parser settings.</param>
            <param name="word">A word that may be a number of a word that represents a number.</param>
            <param name="val">The parsed number value of the word.</param>
            <returns>True if the "val" output parameter is a number that was parsed from the word</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,System.Int32,Sovren.RrLib1.MatchOptions)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="startAt">The position within SearchIn to begin searching.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,Sovren.RrLib1.MatchOptions,System.Int32@)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <param name="foundAt">The position within SearchIn that the returned string was found at.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,Sovren.RrLib1.MatchOptions,System.Boolean)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <param name="requireSimilarSpacing">When true, matched string must contain embedded spaces if the original string had embedded spaces.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,Sovren.RrLib1.MatchOptions,System.Boolean,System.Int32@)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <param name="requireSimilarSpacing">When true, matched string must contain embedded spaces if the original string had embedded spaces.</param>
            <param name="foundAt">The position within SearchIn that the returned string was found at.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetOriginalPunctuatedString(System.String,System.String,System.Int32,Sovren.RrLib1.MatchOptions,System.Boolean,System.Int32@)">
            <summary>
            Given a search term and a chunk of text, this function finds 
            the first matching term in the text,
            but it does so in a fashion that matches 
            only the alphanumeric characters and ignores all punctuation,
            spaces, etc.  Thus the search term "John Q Smith" can be found 
            as "John Q. Smith" in the text -- and vice versa.
            </summary>
            <param name="SearchIn">The text to be searched.</param>
            <param name="SearchFor">The term to be matched.</param>
            <param name="startAt">Position with SearchIn to begin searching.</param>
            <param name="Options">An array of MatchOptions such as WholeWordsOnly.</param>
            <param name="requireSimilarSpacing">When true, matched string must contain embedded spaces if the original string had embedded spaces.</param>
            <param name="foundAt">The position within SearchIn that the returned string was found at.</param>
            <returns>The matched term, with all attached punctuation, etc., in the text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.HasEmbeddedWhitespace(System.String)">
            <summary>
            Determine if text contains whitespace between non-whitespace, ignoring any leading or trailing whitespace.
            </summary>
            <param name="text">The text to examine.</param>
            <returns>True if text contains whitespace between non-whitespace, ignoring any leading or trailing whitespace; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetPhrasePreceding(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Returns InText if no match.
            </summary>
            <param name="text"></param>
            <param name="precedingThese"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetPhraseThatFollows(System.String,System.Int32)">
            <summary>
            Makes some assumptions as to when to stop, based on punctuation and not on casing.
            </summary>
            <param name="InText"></param>
            <param name="AfterHere"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetProperOrUppercasedTerm(Sovren.ParserSettings,System.String,System.Int32)">
            <summary>
            Alpha phrase plus anycased prepositions, and only space or apostrophe punctuation.
            Also stops (or fails to start!) on double space.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.GetPunctuationCharArray(System.Int32,System.Char[],System.Char[])">
            <summary>
            
            </summary>
            <param name="maxAscii">The maximum ascii value to examine. If this value is less than the ordinal value of any item in alsoIncludeThese, then that item will not be added, so do not set it too low.</param>
            <param name="alsoAddThese"></param>
            <param name="omitThese"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetStandalonePhrase(System.String,System.Int32)">
            <summary>
            Starting at StartHere, goes forward and backward picking up characters until it hits 
            one of these: :;&gt;&lt;{}\t\r\n (or two spaces).
            </summary>
            <param name="InText"></param>
            <param name="StartHere"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetStringLength(System.String[])">
            <summary>
            Calculates the total length of all strings in the array.
            </summary>
            <param name="strings">List of strings.</param>
            <returns>Total number of characters of all strings in the array.
            Returns zero if <i>strings</i> is null.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetTextAfterLastBreaker(System.String,System.String[],Sovren.RrLib1.MatchOptions,System.Int32@)">
            <summary>
            WARNING: if the phrase ends with a breaker, the match will fail and all the text will be returned.
            </summary>
            <param name="text"></param>
            <param name="breakers"></param>
            <param name="options"></param>
            <param name="matchEnds"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.GetWordsThatStartWithArrayItem(Sovren.ParserSettings,System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Finds all words that start with an array item.
            </summary>
            <returns>TStringList object (non null in all cases), with only one instance per item. 
            In other words, matches are case sensitive, but duplicates will be ignored.
            Please note that it is possible that a word matches on more than one array item, 
            yet will only be returned once. For example "EXILE" would match on "EX" and "EXI",
            but the word "EXILE" would appear only once in the output list.</returns>
        </member>
        <member name="M:Sovren.RrLib1.GetWordThatEndsWithArrayItem(Sovren.ParserSettings,System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Finds the first word that ends with an array item.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.GetWordThatStartsWithArrayItem(Sovren.ParserSettings,System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Finds the first word that starts with an array item.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.HasAlphaAdjacentOnBothSides(System.String,System.String,System.Int32)">
            <summary>
            Determines whether the first non-space character (after allowing only one space) on each side of the 
            phrase is alpha. If there is nothing to evaluate on one side (for example, 
            phrase starts at position 0), that will fail the test. Punctuation 
            will cause the test to fail. "Whole words" are not part of the test.
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.HasJustAlpha(System.String)">
            <summary>
            Literally, just alpha. Not even spaces.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.HasNonAlphaAdjacentOnBothSides(System.String,System.String,System.Int32)">
            <summary>
            Determines whether the first non-space character (after allowing only one space) on each side of the 
            phrase is nonalpha. If there is nothing to evaluate on one side (for example, 
            phrase starts at position 0), that will NOT fail the test. Punctuation 
            will cause the test to succeed. 
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.HasOnlyDigits(System.String)">
            <summary>
            Determines whether a string is non-empty and only contains digit characters.
            </summary>
            <param name="text">String to be examined</param>
            <returns>true if string is non-null, non-empty, and only contains digit characters.</returns>
        </member>
        <member name="M:Sovren.RrLib1.IndexOf(System.String,System.String[],System.Collections.Generic.IComparer{System.String})">
            <summary>
            Find the index of the item in a list of items.
            </summary>
            <param name="item">The item to find.</param>
            <param name="items">The list of items.</param>
            <param name="comparer">The comparer to use when comparing items for equivalence. When null, Comparers.StringOrdinalIgnoreCase is used.</param>
            <returns>Index of item within items list.</returns>
        </member>
        <member name="M:Sovren.RrLib1.IndexOfIgnoreExtraSpaces(System.String,System.String,System.Int32@)">
            <summary>
            Find a string within another string, treating spans of spaces in either string as if they are a single space.
            </summary>
            <param name="source">The string to search.</param>
            <param name="value">The string to locate within <i>source</i>.</param>
            <param name="length">The length of <i>value</i> within<i>source</i>, if found; otherwise, 0.</param>
            <returns>The zero-based index of the first occurrence of <i>value</i> within the entire <i>source</i>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllAlpha(System.String,System.Boolean)">
            <summary>
            ALWAYS IGNORES WHITESPACE. So "A B C" returns true.
            </summary>
            <param name="InText"></param>
            <param name="IgnorePunctuation">Ignores punctuation.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllDigitsAndMaybeHyphens(System.String)">
            <summary>
            Is it all digits, or digits plus hyphens?  [If it's all hyphens, then it is not a match.]
            </summary>
            <param name="OneWord"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllDigitsAndOrHyphens(System.String)">
            <summary>
            Is it all digits, all hyphens, or some of each?  Any of those is "true", otherwise false.
            </summary>
            <param name="OneWord"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllLowerCase(System.String)">
            <summary>
            Ignores non-alpha.
            </summary>
            <param name="InText"></param>
            <returns>True if text does not contain any upper-case characters.</returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllProperCased(Sovren.ParserSettings,System.String,System.Boolean)">
            <summary>
            UPPERCASED terms are not considered Propercased here.  McAndrews //is//.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.IsAllProperOrUpperCase(System.String)">
            <summary>
            Prepositions NOT excepted.  
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllProperOrUpperCaseButIsNotJustPrepositions(Sovren.ParserSettings,System.String,System.Boolean)">
            <summary>
            Ignores non-alphanumeric
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.IsAllProperOrUpperCaseOrPrep(Sovren.ParserSettings,System.String)">
            <summary>
            Prepositions excepted, punctuation ignored.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.IsAllUpperCase(System.String)">
            <summary>
            Ignores non-characters.
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsAllUpperCaseNotNumber(System.String)">
            <summary>
            MAY HAVE SYMBOLS AND PUNCTUATION!!!
            </summary>
            <param name="InText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsBlank(System.String)">
            <summary>
            Returns true if a string is blank (i.e. null, zero length, or only whitespace).
            </summary>
            <param name="s">The string to examine.</param>
            <returns>True if s is null, zero length, or contains only whitespace.</returns>
        </member>
        <member name="M:Sovren.RrLib1.IsCorrectlyCased(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="phrase">MUST be true cased, as this is the phrase that will be evaluated.</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsCorrectlyCased(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="Phrase">Does NOT need to be true cased, as we will extract the
            true cased phrase from the text and evaluate /that/.</param>
            <param name="Options"></param>
            <param name="InText"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.IsHighSurrogate(System.Char)">
            <summary>
            Indicates whether the specified Char object is a high surrogate.
            </summary>
            <param name="c">A character</param>
            <returns>true if the numeric value of the c parameter ranges from U+D800 through U+DBFF; otherwise, false.</returns>
            <remarks>The .NET 2.0 equivalent is Char.IsHighSurrogate(char c)</remarks>
        </member>
        <member name="M:Sovren.RrLib1.IsLowSurrogate(System.Char)">
            <summary>
            Indicates whether the specified Char object is a low surrogate. 
            </summary>
            <param name="c">A character</param>
            <returns>true if the numeric value of the c parameter ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
            <remarks>The .NET 2.0 equivalent is Char.IsLowSurrogate(char c)</remarks>
        </member>
        <member name="M:Sovren.RrLib1.IsNonLowerExceptPrepositionsNonAlphaOk(Sovren.ParserSettings,System.String)">
            <summary>
            Prepositions excepted.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.IsProperName(System.String)">
            <summary>
            Returns true if the word starts with an UpperCase letter and contains at least one LowerCase letter.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.IsUppercaseAlphaOnly(System.String)">
            <summary>
            TREATS WHITESPACE AS ALPHA.
            </summary>
            <param name="Phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.Join(System.String,System.String,System.String,System.String[])">
            <summary>
            Joins a list of strings, each separated by a separator and wrapped by an optional prefix and suffix.
            </summary>
            <param name="prefix">Prefix to be placed before each string.</param>
            <param name="suffix">Suffix to be placed after each string.</param>
            <param name="separator">Separated to be placed between each string.</param>
            <param name="strings">List of strings.</param>
            <returns>Joined string with prefixes, suffixes and separators.
            Null strings are ignored but empty strings are not.
            Returns null if <i>strings</i> is null or empty.
            </returns>
        </member>
        <member name="M:Sovren.RrLib1.LastIndexOf(System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Find the last occurrence of a string within another string.
            </summary>
            <param name="text">The string to search within.</param>
            <param name="find">The string to find.</param>
            <param name="options">Options that control the find logic.</param>
            <returns>The index of the last occurrence of <c>find</c>, if found; otherwise -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.LastIndexOf(System.String,System.String,Sovren.RrLib1.MatchOptions,System.Int32)">
            <summary>
            Find the last occurrence of a string within another string.
            </summary>
            <param name="text">The string to search within.</param>
            <param name="find">The string to find.</param>
            <param name="options">Options that control the find logic.</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <returns>The index of the last occurrence of <c>find</c> at or before <c>startIndex</c>, if found; otherwise -1.</returns>
        </member>
        <member name="M:Sovren.RrLib1.LastIndexOf(System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Find offset of longest last item in text.
            </summary>
            <param name="text">The text to search.</param>
            <param name="items">The items to look for.</param>
            <param name="options">Matching options.</param>
            <returns>Index within text of the longest last item.</returns>
        </member>
        <member name="M:Sovren.RrLib1.MaxDistance(Sovren.ParserSettings,System.String,System.Char)">
            <summary>
            
            </summary>
            <returns>0 if not found. Otherwise, the maximum number that is the diference between the offsets of two adjacent occurences.</returns>
        </member>
        <member name="M:Sovren.RrLib1.MinLinesSeparatingData(System.String,System.String,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Find the number of lines that separate 2 items, where
            -1 = comparison not possible
            0 = on same line
            1 = on adjacent lines
            2.. = Absolute Value (line1 - line2)
            </summary>
            <param name="text"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.NaiveDaysInMonth(System.Int32)">
            <summary>
            Get number of days for a month.
            </summary>
            <param name="monthNum">1-based number of month (January=1, December=12)</param>
            <returns>Number of days in the specified month</returns>
        </member>
        <member name="M:Sovren.RrLib1.NumberLinesThatStartWithFreestandingTerm(Sovren.ParserSettings,System.String,Sovren.TStringList,System.Boolean)">
            <summary>
            Case sensitive;
            </summary>
            <param name="settings"></param>
            <param name="Lines"></param>
            <param name="Phrase"></param>
            <param name="IgnoreContinuations"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.RemoveArrayTermsFromString(System.String,System.String[],Sovren.RrLib1.MatchOptions,System.Boolean)">
            <summary>
            Replace all specified terms with spaces.
            </summary>
            <param name="InText">The text to modify.</param>
            <param name="Terms">The terms to replace.</param>
            <param name="Options">The matching options for the terms.</param>
            <param name="replaceWithSpaces">WARNING: This parameter is ignored. It defaults to true.</param>
            <returns>The text with all occurrences of the specified terms replaced by spaces.</returns>
        </member>
        <member name="M:Sovren.RrLib1.RemoveArrayTermsFromString(System.String,Sovren.Int2List,System.Boolean)">
            <summary>
            Replace all specified substrings with spaces.
            </summary>
            <param name="text">The text to modify.</param>
            <param name="offsetsAndLengths">The substrings to replace.</param>
            <param name="replaceWithSpaces">WARNING: This parameter is ignored. It defaults to true.</param>
            <returns>The text with all occurrences of the specified strings replaced by spaces.</returns>
        </member>
        <member name="M:Sovren.RrLib1.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics (i.e. modified/accented characters) from a string.
            </summary>
            <param name="s">The source string.</param>
            <returns>A new string without diacritic characters, or the original string if diacritics were not found.</returns>
            <remarks>
            This can be used to strip the many variants of diacritics from strings before comparing them to a
            single base string (without diacritics). Note however that when normalizing and comparing strings,
            if the strings contain diacritics then this normalization is 10 times as costly, and if the
            strings don't contain diacritics then this normalization is 20 times as costly.
            </remarks>
        </member>
        <member name="M:Sovren.RrLib1.RemoveExcessBrackets(System.String,System.Int32,System.Int32)">
            <summary>
            Does not work correctly !!!!
            </summary>
            <param name="text"></param>
            <param name="minimumThreshhold"></param>
            <param name="minLengthOfBracketedText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.ReplaceAll(System.String,System.String[],System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Replace all matching items within some text with a corresponding array of replacement terms.
            </summary>
            <param name="text">The text to be searched.</param>
            <param name="items">An array of items to be matched.</param>
            <param name="replacements">An array of replacements corresponding to the items.</param>
            <param name="matchOptions">A set of MatchOptions flags, such as WholeWordsOnly.</param>
            <returns>The text with all matching items replaced.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ReplacePhrase(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replace the first occurrence of <i>phrase</i> from <i>source</i> with <i>replacement</i>.
            </summary>
            <param name="source">Original string</param>
            <param name="phrase">Phrase to be removed</param>
            <param name="replacement">Text to be substituted in place of <i>phrase</i>.</param>
            <param name="caseSensitive">When true, only case-sensitive matches are replaced.</param>
            <returns>The original string with the specified phrase replaced.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ReplacePlaceholder(System.String,System.String,System.String)">
            <summary>
            CaseInsensitive
            </summary>
            <param name="strExpression"></param>
            <param name="strSearch"></param>
            <param name="strReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.ReplaceWithSpaces(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Replace any matches for a Regex with spaces.
            </summary>
            <param name="regex">The regex that specifies what patterns to replace with spaces.</param>
            <param name="text">The text to modify.</param>
            <returns>The text with all matching patterns replaced by spaces of the same length.</returns>
        </member>
        <member name="M:Sovren.RrLib1.ReplaceWithSpaces(System.String,System.Int32,System.Int32)">
            <summary>
            This is the safe and easy way to convert a phrase within a piece of text
            to spaces. It performs bounds checking and preserves the number of line breaks.
            </summary>
            <param name="text">The text to inspect.</param>
            <param name="startAt">The starting offset to be replaced.</param>
            <param name="length">The length to be replaced.</param>
            <returns>The string with spaces inserted as instructed.</returns>
        </member>
        <member name="M:Sovren.RrLib1.RightSide(System.String,System.String)">
            <summary>
            Case sensitive.  Returns the text to the right of the first appearance of breaker, 
            or all text if no breaker appears in the text.
            </summary>
            <param name="break_at"></param>
            <param name="theText"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.SaveToTextFile(System.String,System.String,System.Boolean)">
            <summary>
            		
            </summary>
            <param name="text"></param>
            <param name="path"></param>
            <param name="overwrite">Careful!  if overwrite = false, then a new file will be written with a new name.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.StandardizeText(Sovren.ParserSettings,System.String)">
            <summary>
            Fixes spacing/punctuation errors for certain cultures. Used in Indian parsing to repair bad formatting such as " , ".
            </summary>
            <param name="settings">The parser settings that specify the culture.</param>
            <param name="text">The text to standardize.</param>
            <returns>Standardized text.</returns>
        </member>
        <member name="M:Sovren.RrLib1.StartsWithArrayItem(Sovren.ParserSettings,System.String,System.String[],Sovren.RrLib1.MatchOptions)">
            <summary>
            Returns true if text starts with an array item. Leading whitespace is ignored.
            </summary>
        </member>
        <member name="M:Sovren.RrLib1.StartsWithArrayItemPlusThisTextCI(System.String,System.String[],System.String)">
            <summary>
            Ignores leading whitespace in the InText parameter.
            </summary>
            <param name="InText"></param>
            <param name="Items"></param>
            <param name="PlusThis"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.RrLib1.StartsWithPreposition(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions)">
            <summary>
            Determines if the first word of the specified text is a preposition.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to check.</param>
            <param name="options">The options used for matching the preposition. WholeWordsOnly is already implied.</param>
            <returns>True if the first word is a preposition; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.RrLib1.StartsWithPreposition(Sovren.ParserSettings,System.String,Sovren.RrLib1.MatchOptions,System.String@,System.Int32@)">
            <summary>
            Determines if the first word of the specified text is a preposition.
            </summary>
            <param name="settings"></param>
            <param name="text">The text to check.</param>
            <param name="options">The options used for matching the preposition. WholeWordsOnly is already implied.</param>
            <param name="preposition">The preposition, if one was found.</param>
            <param name="index">The index of the preposition, if found; otherwise, -1.</param>
            <returns>True if the first word is a preposition; otherwise, false.</returns>
        </member>
        <member name="M:Sovren.RrLib1.StringCollectionToString(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Joins the list of strings together into a single string using the specified separator.
            </summary>
            <param name="list">List of strings to be joined.</param>
            <param name="separator">Separator to place between each string.</param>
            <returns>String representation of the list.</returns>
            <remarks>Does not append separator to the end of the whole string.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.StringListToString(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Joins the list of strings together into a single string using the specified separator.
            </summary>
            <param name="list">List of strings to be joined.</param>
            <param name="separator">Separator to place between each string.</param>
            <returns>String representation of the list.</returns>
            <remarks>Does not append separator to the end of the whole string.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.TrimmedLength(System.String)">
            <summary>
            Determine the length of a string, excluding any leading or trailing whitespace.
            </summary>
            <param name="s">The string.</param>
            <returns>Length of the string, excluding and trailing whitespace.</returns>
            <remarks>The length is calculated without performing any memory allocations. The built-in
            Trim functions are not used.</remarks>
        </member>
        <member name="M:Sovren.RrLib1.CheckForAppearances(System.String,System.String[],Sovren.RrLib1.MatchOptions,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.String[]@,Sovren.Int2List@)">
            <summary>
            Do not use this with non alphanumeric data.
            </summary>
            <param name="text"></param>
            <param name="items"></param>
            <param name="options"></param>
            <param name="nbrFound"></param>
            <param name="startsWith"></param>
            <param name="endsWith"></param>
            <param name="consistsOfOnly"></param>
            <param name="itemsFound"></param>
            <param name="mergedList"></param>
        </member>
        <member name="M:Sovren.RrLib1.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <remarks>
            Uses an internal 1 KB buffer.
            </remarks>
        </member>
        <member name="M:Sovren.RrLib1.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:Sovren.RrLib1.Copy(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Copy the contents of a <see cref="T:System.IO.TextReader"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="reader">The text to read.</param>
            <param name="writer">The text to write.</param>
            <remarks>
            Uses an internal 2 KB buffer.
            </remarks>
        </member>
        <member name="M:Sovren.RrLib1.Copy(System.IO.TextReader,System.IO.TextWriter,System.Char[])">
            <summary>
            Copy the contents of a <see cref="T:System.IO.TextReader"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="reader">The text to read.</param>
            <param name="writer">The text to write.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="T:Sovren.ParserSettingsBase">
            <summary>
            Common implementation for all ParserSettings classes.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettingsBase.ReadOnly">
            <summary>
            When true, the properties on this settings object cannot be set.
            </summary>
        </member>
        <member name="T:Sovren.ParserSettings">
            <summary>
            Settings used by an instance of the parser.
            </summary>
            <remarks>
            <para>
            Each parser instance gets its own copy of the default settings. These settings can be modified for that
            single parser instance, or a new ParserSettings object can be created and then cloned and assigned to
            the Settings property on one or more parser instances. Do not share a single settings instance among
            multiple parsers.
            </para>
            <para>
            WARNING: Using the same settings object for multiple parsers may yield unexpected results. Settings within
            the Culture and Data settings groups may be changed by the parser due to Language/Culture auto-detection.
            </para>
            <para>
            WARNING: Changing a settings object that is currently in use by a parser may yield unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Sovren.ParserSettings.#ctor">
            <summary>
            Create a new instance using default values from <see cref="P:Sovren.ParserSettings.Default"/>.
            </summary>
        </member>
        <member name="M:Sovren.ParserSettings.#ctor(System.String)">
            <summary>
            Create a new instance using values from a configuration string. Default values
            are supplied by <see cref="P:Sovren.ParserSettings.Default"/>.
            </summary>
            <param name="configuration">See <see mref="GetSettingsObject"/> for a detailed specification of this configuration string.</param>
        </member>
        <member name="M:Sovren.ParserSettings.#ctor(System.Boolean)">
            <summary>
            Create a new instance using hard-coded default values. The result of this constructor
            should only be assigned to the Default property.
            </summary>
            <param name="unused">Only exists to create a distinct private constructor signature.</param>
        </member>
        <member name="M:Sovren.ParserSettings.#ctor(Sovren.ParserSettings)">
            <summary>
            Create a new instance that copies its settings from the specified template.
            </summary>
            <param name="template">The settings instance to copy from.</param>
        </member>
        <member name="M:Sovren.ParserSettings.Clone">
            <summary>
            Creates a new instance that is a deep copy of this instance.
            </summary>
            <returns>New writeable instance that contains an independent deep copy of the settings.</returns>
        </member>
        <member name="M:Sovren.ParserSettings.CloneAsReadOnly">
            <summary>
            Creates a new instance that is a deep copy of this instance and that is read-only.
            </summary>
            <returns>New read-only instance that contains an independent deep copy of the settings.</returns>
        </member>
        <member name="M:Sovren.ParserSettings.GetSettingsObject(System.String)">
            <summary>
            ParserSettings factory method.
            </summary>
            <param name="configurationParams">A string of characters where each character represents the value of a setting. See Remarks section for full details.</param>
            <returns>A ParserSettings instance, configured as instructed.</returns>
            <remarks>
            <para><b>Specification of <paramref name="configurationParams"/> parameter</b></para>
            <para>
            A string of characters where each character represents the value of a setting.
            For most settings, a value of '0' means false and '1' means true. If the character
            is not one of the allowed values, then it is ignored and a default value is applied.
            If you only want to modify a few settings, then create a string of the desired length
            filled with spaces or dashes and only assign values to the desired settings positions.
            </para>
            <para>
            These parameters retain backward compatibility with older versions
            of Sovren software, which is why some of the names are quirky, such as
            the double-negative pattern of SkipXxxx = false.
            </para>
            <para>
            Those parameters, in order are:
            </para>
            <list type="table">
            <item><term>1</term><description>Obsolete/ignored.</description></item>
            <item><term>2</term><description><see cref="P:Sovren.ParserOutputFormatSettings.ShowParentSkills">ShowParentSkills</see> (0 = false, 1 = true [default])</description></item>
            <item><term>3</term><description><see cref="P:Sovren.ParserCultureSettings.UseAustralia">UseAustralia</see> (0 = false [default], 1 = true)</description></item>
            <item><term>4</term><description><see cref="P:Sovren.ParserCultureSettings.UseUK">UseUK</see> (0 = false [default], 1 = true)</description></item>
            <item><term>5</term><description><see cref="P:Sovren.ParserCultureSettings.UseIreland">UseIreland</see> (0 = false [default], 1 = true)</description></item>
            <item><term>6</term><description><see cref="P:Sovren.ParserCultureSettings.UseFrance">UseFrance</see> (0 = false [default], 1 = true)</description></item>
            <item><term>7</term><description><see cref="P:Sovren.ParserCultureSettings.UseIndia">UseIndia</see> (0 = false [default], 1 = true)</description></item>
            <item><term>8</term><description>Obsolete. <see cref="P:Sovren.ParserCoverageSettings.DateOfBirth">SkipDateOfBirthParsing</see> (0 = parse, 1 = skip [default]). The ParseDateOfBirth (position 42) setting takes precedence if string is at least 42 characters long.</description></item>
            <item><term>9</term><description><see cref="P:Sovren.ParserCoverageSettings.Achievements">SkipAchievementsParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>10</term><description>Obsolete/ignored. Parsing of Affiliations is now controlled by <see cref="P:Sovren.ParserCoverageSettings.Associations">position 11, SkipAssociationsParsing</see>.</description></item>
            <item><term>11</term><description><see cref="P:Sovren.ParserCoverageSettings.Associations">SkipAssociationsParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>12</term><description><see cref="P:Sovren.ParserCoverageSettings.EducationHistory">SkipEducationParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>13</term><description><see cref="P:Sovren.ParserCoverageSettings.EmploymentHistory">SkipEmploymentParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>14</term><description><see cref="P:Sovren.ParserCoverageSettings.Objective">SkipJobObjectiveParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>15</term><description><see cref="P:Sovren.ParserCoverageSettings.Languages">SkipLanguagesParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>16</term><description><see cref="P:Sovren.ParserCoverageSettings.LicensesAndCertifications">SkipLicensesAndCertificationsParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>17</term><description><see cref="P:Sovren.ParserCoverageSettings.Management">SkipManagementParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>18</term><description><see cref="P:Sovren.ParserCoverageSettings.MilitaryHistory">SkipMilitaryHistoryParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>19</term><description>Obsolete/ignored. Parsing of Organizations is now controlled by <see cref="P:Sovren.ParserCoverageSettings.Associations">position 11, SkipAssociationsParsing</see>.</description></item>
            <item><term>20</term><description><see cref="P:Sovren.ParserCoverageSettings.PatentHistory">SkipPatentsParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>21</term><description><see cref="P:Sovren.ParserCoverageSettings.PublicationHistory">SkipPublicationsParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>22</term><description><see cref="P:Sovren.ParserCoverageSettings.References">SkipReferencesParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>23</term><description><see cref="P:Sovren.ParserCoverageSettings.SecurityCredentials">SkipSecurityCredentialsParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>24</term><description><see cref="P:Sovren.ParserCoverageSettings.Skills">SkipSkillsParsing</see> (0 = parse [default], 1 = skip)</description></item>
            <item><term>25</term><description><see cref="P:Sovren.ParserCoverageSettings.SpeakingEventsHistory">SkipSpeakingEventsParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>26</term><description>SkipSummariesParsing (see <see cref="P:Sovren.ParserCoverageSettings.ExecutiveSummary"/> and <see cref="P:Sovren.ParserCoverageSettings.Qualifications"/>, 0 = parse [default], 1 = skip)</description></item>
            <item><term>27</term><description><see cref="P:Sovren.ParserCoverageSettings.JobCategories">SkipJobCategoryParsing</see> (0 = parse, 1 = skip [default])</description></item>
            <item><term>28</term><description><see cref="P:Sovren.ParserOutputFormatSettings.NestJobsBasedOnDateRanges">NestJobsBasedOnDateRanges</see> (0 = false, 1 = true [default])</description></item>
            <item><term>29</term><description><see cref="P:Sovren.ParserOutputFormatSettings.AssumeCompanyNameFromPrecedingJob">AssumeCompanyNameFromPrecedingJob (0 = false [default], 1 = true)</see></description></item>
            <item><term>30</term><description><see cref="P:Sovren.ParserOutputFormatSettings.EmbedResumeTextInHrXml">EmbedResumeTextInHrXml</see> (0 = false [default], 1 = true)</description></item>
            <item><term>31</term><description><see cref="P:Sovren.ParserCultureSettings.DateOutputStyle"/>ExplicitlyKnownDateInfoOnly (0 = false [default], 1 = true)</description></item>
            <item><term>32</term><description><see cref="P:Sovren.ParserOutputFormatSettings.OutputSovrenUserAreaExtensions">OutputSovrenUserAreaExtensions</see> (0 = false, 1 = true [default])</description></item>
            <item><term>33</term><description><see cref="P:Sovren.ContactMethodOutputFormat.PackStyle">ContactMethodPackStyle</see> (1 = Split [default], 2 = Packed, 3 = PackedNoOverflow, see <see cref="T:Sovren.ContactMethodPackStyles"/>)</description></item>
            <item><term>34</term><description><see cref="P:Sovren.ParserOutputFormatSettings.EmbedOffsetOfLatestDataFoundMarkerIntoPositionHistoryText">EmbedOffsetOfLatestDataFoundMarkerIntoPositionHistoryText</see> (0 = false [default], 1 = true)</description></item>
            <item><term>35</term><description><see cref="P:Sovren.ParserOutputFormatSettings.StripHeaderFromPositionHistoryDescription">StripHeaderFromPositionHistoryDescription</see> (0 = false [default], 1 = true)</description></item>
            <item><term>36</term><description>Obsolete/ignored.</description></item>
            <item><term>37</term><description><see cref="P:Sovren.TelcomNumberOutputFormat.Style">TelcomNumberOutputStyle</see> (1 = Raw [default], 2 = Formatted, 4 = Structured, see <see cref="T:Sovren.TelcomNumberOutputStyles"/>)</description></item>
            <item><term>38</term><description>Obsolete/ignored.</description></item>
            <item><term>39</term><description><see cref="P:Sovren.ParserCultureSettings.UseNetherlands">UseNetherlands</see> (0 = false [default], 1 = true)</description></item>
            <item><term>40</term><description><see cref="P:Sovren.ParserCultureSettings.UseGermany">UseGermany</see> (0 = false [default], 1 = true)</description></item>
            <item><term>41</term><description><see cref="P:Sovren.ParserCultureSettings.UseSouthAfrica">UseSouthAfrica</see> (0 = false [default], 1 = true)</description></item>
            <item><term>42</term><description><see cref="P:Sovren.ParserCoverageSettings.DateOfBirth">ParseDateOfBirth</see> (0 = false [default], 1 = true)</description></item>
            <item><term>43</term><description><see cref="P:Sovren.ParserCoverageSettings.Gender">ParseGender</see> (0 = false [default], 1 = true)</description></item>
            <item><term>44</term><description><see cref="P:Sovren.ParserCoverageSettings.MaritalStatus">ParseMaritalStatus</see> (0 = false [default], 1 = true)</description></item>
            <item><term>45</term><description><see cref="P:Sovren.ParserCoverageSettings.Nationality">ParseNationality</see> (0 = false [default], 1 = true)</description></item>
            <item><term>46</term><description><see cref="P:Sovren.ParserCoverageSettings.Visa">ParseVisa</see> (0 = false [default], 1 = true)</description></item>
            <item><term>47</term><description><see cref="P:Sovren.ParserCoverageSettings.Passport">ParsePassport</see> (0 = false [default], 1 = true)</description></item>
            <item><term>48</term><description><see cref="P:Sovren.ParserCoverageSettings.Location">ParseLocation</see> (0 = false [default], 1 = true)</description></item>
            <item><term>49</term><description><see cref="P:Sovren.ParserCoverageSettings.DrivingLicense">ParseDrivingLicense</see> (0 = false [default], 1 = true)</description></item>
            <item><term>50</term><description><see cref="P:Sovren.ParserCoverageSettings.Salary">ParseSalary</see> (0 = false [default], 1 = true)</description></item>
            <item><term>51</term><description><see cref="P:Sovren.ParserCoverageSettings.Ancestor">ParseAncestor</see> (0 = false [default], 1 = true)</description></item>
            <item><term>52</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInAchievements">FindSkillsInAchievements</see> (0 = false, 1 = true [default])</description></item>
            <item><term>53</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInCertifications">FindSkillsInCertifications</see> (0 = false, 1 = true [default])</description></item>
            <item><term>54</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInCoverLetter">FindSkillsInCoverLetter</see> (0 = false, 1 = true [default])</description></item>
            <item><term>55</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInEducationHistory">FindSkillsInEducationHistory</see> (0 = false, 1 = true [default])</description></item>
            <item><term>56</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInExecutiveSummary">FindSkillsInExecutiveSummary</see> (0 = false, 1 = true [default])</description></item>
            <item><term>57</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInLanguages">FindSkillsInLanguages</see> (0 = false, 1 = true [default])</description></item>
            <item><term>58</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInLicenses">FindSkillsInLicenses</see> (0 = false, 1 = true [default])</description></item>
            <item><term>59</term><description><see cref="P:Sovren.ParserRuntimeSettings.MaxThreads">MaxThreadsPerParse</see> (Default = 1. A value of zero means set equal to number of processors.)</description></item>
            <item><term>60</term><description><see cref="P:Sovren.ParserRuntimeSettings.ThreadPriority">ThreadPriority</see> (Default = 2. 0=Lowest, 1=BelowNormal, 2=Normal, 3=AboveNormal, 4=Highest)</description></item>
            <item><term>61</term><description><see cref="P:Sovren.ParserCultureSettings.UseSweden">UseSweden</see> (0 = false [default], 1 = true)</description></item>
            <item><term>62</term><description><see cref="P:Sovren.ParserCoverageSettings.Training">ParseTraining</see> (0 = false [default], 1 = true)</description></item>
            <item><term>63</term><description><see cref="P:Sovren.ParserCoverageSettings.AddPositionTitlesToSkills">AddPositionTitlesToSkills</see> (0 = false [default], 1 = true)</description></item>
            <item><term>64</term><description><see cref="P:Sovren.ParserCoverageSettings.AddLanguagesToSkills">AddLanguagesToSkills</see> (0 = false [default], 1 = true)</description></item>
            <item><term>65</term><description><see cref="P:Sovren.ParserCoverageSettings.AddCertificationsAndLicensesToSkills">AddCertificationsAndLicensesToSkills</see> (0 = false [default], 1 = true)</description></item>
            <item><term>66</term><description><see cref="P:Sovren.ParserCoverageSettings.NationalIdentityNumber">ParseNationalIdentityNumber</see> (0 = false [default], 1 = true)</description></item>
            <item><term>67</term><description><see cref="P:Sovren.ParserCoverageSettings.AddNonTaxonomySkills">AddNonTaxonomySkills</see> (0 = false [default], 1 = true)</description></item>
            <item><term>68</term><description><see cref="P:Sovren.ParserCoverageSettings.IgnoreCaseForSkills">IgnoreCaseForSkills</see> (0 = false [default], 1 = true)</description></item>
            <item><term>69</term><description><see cref="P:Sovren.ParserCoverageSettings.Birthplace">ParseBirthplace</see> (0 = false [default], 1 = true)</description></item>
            <item><term>70</term><description><see cref="P:Sovren.ParserCoverageSettings.FamilyComposition">ParseFamilyComposition</see> (0 = false [default], 1 = true)</description></item>
            <item><term>71</term><description><see cref="P:Sovren.ParserOutputFormatSettings.OutputCoverLetter">OutputCoverLetter</see> (0 = false, 1 = true [default])</description></item>
            <item><term>72</term><description><see cref="P:Sovren.ParserOutputFormatSettings.CreateBullets">CreateBullets</see> (0 = false [default], 1 = true)</description></item>
            <item><term>73</term><description><see cref="P:Sovren.ParserCultureSettings.UseSpain">UseSpain</see> (0 = false [default], 1 = true)</description></item>
            <item><term>74</term><description><see cref="P:Sovren.ParserRuntimeSettings.GeneratePerformanceLog">GeneratePerformanceLog</see> (0 = false [default], 1 = true)</description></item>
            <item><term>75</term><description><see cref="P:Sovren.ParserCustomDataSettings.AutoLoadDefinitions">AutoLoadDefinitions</see> (0 = false [default], 1 = true)</description></item>
            <item><term>76</term><description><see cref="P:Sovren.ParserCoverageSettings.EmploymentHistoryRequiresDates">EmploymentHistoryRequiresDates</see> (0 = false, 1 = true [default])</description></item>
            <item><term>77</term><description><see cref="P:Sovren.ParserNormalizationSettings.NormalizeRegions">NormalizeRegions</see> (0 = false, 1 = true [default])</description></item>
            <item><term>78</term><description><see cref="P:Sovren.ParserCoverageSettings.EntryLevel">EntryLevel</see> (0 = false [default], 1 = true)</description></item>
            <item><term>79</term><description><see cref="P:Sovren.ParserCoverageSettings.FindSkillsInEntireDocument">FindSkillsInEntireDocument</see> (0 = false [default], 1 = true)</description></item>
            <item><term>80</term><description><see cref="P:Sovren.ParserCultureSettings.UseArgentina">UseArgentina</see> (0 = false [default], 1 = true)</description></item>
            <item><term>81</term><description><see cref="P:Sovren.ParserCultureSettings.UseGreece">UseGreece</see> (0 = false [default], 1 = true)</description></item>
            <item><term>82</term><description><see cref="P:Sovren.ParserCultureSettings.UseHungary">UseHungary</see> (0 = false [default], 1 = true)</description></item>
            <item><term>83</term><description><see cref="P:Sovren.ParserCultureSettings.UseItaly">UseItaly</see> (0 = false [default], 1 = true)</description></item>
            <item><term>84</term><description><see cref="P:Sovren.ParserCultureSettings.UseRussia">UseRussia</see> (0 = false [default], 1 = true)</description></item>
            <item><term>85</term><description><see cref="P:Sovren.ParserCultureSettings.UseNorway">UseNorway</see> (0 = false [default], 1 = true)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sovren.ParserSettings.ApplyConfiguration(System.String)">
            <summary>
            Applies the settings from a configuration string to this instance.
            When the string specifies use of default values, the existing values in this instance are used.
            </summary>
            <param name="configuration">See <see cref="M:Sovren.ParserSettings.GetSettingsObject(System.String)"/> for a detailed specification of this configuration string.</param>
        </member>
        <member name="M:Sovren.ParserSettings.ToConfigurationString">
            <summary>
            Generate a configuration string representation of this object.
            Obsolete settings are output as '_'.
            </summary>
            <returns>Parser configuration string</returns>
        </member>
        <member name="P:Sovren.ParserSettings.Current">
            <summary>
            Holds the current thread-local instance of ParserSettings.
            </summary>
            <exception cref="T:System.NotSupportedException">When value is null. If this ever occurs, it is a bug.</exception>
        </member>
        <member name="P:Sovren.ParserSettings.DataLists">
            <summary>
            Retrieves the <see cref="P:Sovren.ParserSettings.DataLists"/> object for Culture.Language setting.
            This value is automatically updated whenever then Language changes.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Default">
            <summary>
            <para>
            Holds the default values that are supplied to new instances of ParserSettings.
            </para>
            <para>
            <b>WARNING:</b> This property is a singleton instance that is intended to be configured at an
            application-level. DO NOT modify this single instance per transaction. Instead, create
            a <c>new ParserSettings()</c> instance to customize settings for an individual transaction.
            </para>
            <para>The motivation for using this Default object is to override the default settings that
            will be automatically applied to all subsequent new ParserSettings instances at creation.
            So, if you wished to set Achievements to 'false' for all new instances of ParserSettings,
            you would do this:
            </para>
            <code>
            ParserSettings.Default.Coverage.Achievements = false;
            </code>
            <para>
            THEN, for each parsing transaction you would write:
            </para>
            <code>
            ParserSettings settings = new ParserSettings();
            ParserMapper parser = new ParserMapper(settings);
            </code>
            <para>
            But NEVER EVER use the ParserSettings.Default object as your actual per-transaction
            ParserSettings object, because it is static (persistent, singleton) and will cause
            unintended consequences.
            </para>
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Coverage">
            <summary>
            The <see cref="T:Sovren.ParserCoverageSettings">Coverage</see> settings
            that specify the types of information to be parsed from the resume.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Culture">
            <summary>
            The <see cref="T:Sovren.ParserCultureSettings">Culture</see> settings
            that specify cultural information about the input text.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.CustomData">
            <summary>
            An extensible area of the parser that allows you to define additional
            custom data items to be collected during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Data">
            <summary>
            The <see cref="T:Sovren.ParserDataSettings">Data</see> settings
            that specify the reference data that is used during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Diagnostic">
            <summary>
            The <see cref="T:Sovren.ParserDiagnosticSettings">Diagnostic</see> settings
            that control the generation of diagnostic information during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.InputFormat">
            <summary>
            The <see cref="T:Sovren.ParserInputFormatSettings">InputFormat</see> settings
            that specify information about the input format.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.OutputFormat">
            <summary>
            The <see cref="T:Sovren.ParserOutputFormatSettings">OutputFormat</see> settings
            that control the parser output format.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Normalization">
            <summary>
            The <see cref="T:Sovren.ParserNormalizationSettings">Normalization</see> settings
            that control reformatting of data into standard abbreviations, lists, etc.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Runtime">
            <summary>
            The <see cref="T:Sovren.ParserRuntimeSettings">Runtime</see> settings.
            </summary>
        </member>
        <member name="P:Sovren.ParserSettings.Internal">
            <summary>
            Internal settings used by the parser, not visible to customers.
            </summary>
        </member>
        <member name="T:Sovren.ParserCultureSettings">
            <summary>
            This class specifies all culture-related settings used during parsing.
            </summary>
        </member>
        <member name="M:Sovren.ParserCultureSettings.GetCultures">
            <summary>
            Returns a list of cultures that can be enabled/disabled.
            </summary>
            <returns>The list of supported cultures.</returns>
            <remarks>The list items are in English to make it easy for our English-speaking
            customers to map these items directly to a user interface control.</remarks>
        </member>
        <member name="M:Sovren.ParserCultureSettings.UseCultures(System.String[])">
            <summary>
            Enable one or more cultures. This convenience method is intended to help with
            user interface integration so you can put the <see cref="M:Sovren.ParserCultureSettings.GetCultures"/> values
            into a ComboBox (or other controls) and then easily set the selected value, without
            needing to change code everytime Sovren adds support for a new culture.
            </summary>
            <param name="cultures">One of the values in the <see cref="M:Sovren.ParserCultureSettings.GetCultures"/> list.</param>
        </member>
        <member name="P:Sovren.ParserCultureSettings.AutoDetect">
            <summary>
            When true, the parser analyzes the text and automatically determines the best match Culture, including
            Language, CultureInfo and RegionInfo. When true, the <see cref="P:Sovren.ParserCultureSettings.Language">Language</see> property
            sets the corresponding UseFrance/UseGerman/etc. property. When false, all culture settings are left as assigned
            prior to parsing.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.Language">
            <summary>
            The language to be used for parsing. If set to <see cref="P:Sovren.Language.Unknown"/> then the
            text will be automatically analyzed to determine the language. See
            <see cref="T:Sovren.LanguageAnalyzer"/> for more details.
            Default = <see cref="P:Sovren.Language.Unknown"/>.
            </summary>
            <remarks>
            <para>If <see cref="P:Sovren.ParserCultureSettings.AutoDetect"/> is true, then when Language is set to:</para>
            <list>
            <item><description>Dutch: UseNetherlands is also set to true.</description></item>
            <item><description>French: UseFrance is also set to true.</description></item>
            <item><description>German: UseGerman is also set to true.</description></item>
            <item><description>Greek: UseGreece is also set to true.</description></item>
            <item><description>Hungarian: UseHungary is also set to true.</description></item>
            <item><description>Italian: UseItaly is also set to true.</description></item>
            <item><description>Russian: UseRussia is also set to true.</description></item>
            <item><description>Spanish: UseSpain and UseArgentina are NOT also set to true.</description></item>
            <item><description>Swedish: UseSweden is also set to true.</description></item>
            <item><description>Norwegian: UseNorway is also set to true.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCultureSettings.AlwaysFindInternationalPhones">
            <summary>
            Determines whether the parser will locate only USA phone numbers or all other International phone numbers.
            Setting any of the Use<i>Country</i> flags also explicitly sets this setting to true.
            The default is <b>true</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseGermany">
            <summary>
            Set this property to true to enable parsing of CVs from Germany and other German-speaking countries.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseAustralia">
            <summary>
            Set this property to true to enable parsing of Australia contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseArgentina">
            <summary>
            Set this property to true to enable parsing of Argentina contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseFrance">
            <summary>
            Set this property to true to enable parsing of France contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseGreece">
            <summary>
            Set this property to true to enable parsing of Greece contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseSpain">
            <summary>
            This switch is intended to allow very Spain-centric parsing that makes assumptions
            about the data that are normally not made. For instance, all names will be split into
            multi-word last names and there will be single or multi-word first names, but no
            middle names. Also, there are certain assumptions that may be made about locale
            based solely on phone numbers. Thus, if a candidate has no address info, BUT has
            a phone number with a 93 prefix, that candidate will be assigned a municipality of
            Barcelona.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseIndia">
            <summary>
            Set this property to true to enable better parsing of India contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseIreland">
            <summary>
            Set this property to true to enable parsing of Ireland contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseItaly">
            <summary>
            Set this property to true to enable parsing of Italy contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseSweden">
            <summary>
            Set this property to true to enable parsing of Sweden contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseNetherlands">
            <summary>
            Set this property to true to enable parsing of Netherlands contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseSouthAfrica">
            <summary>
            Set this property to true to enable parsing of South African contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseUK">
            <summary>
            Set this property to true to enable parsing of UK contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseHungary">
            <summary>
            Set this property to true to enable parsing of Hungary contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseRussia">
            <summary>
            Set this property to true to enable parsing of Russia contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.UseNorway">
            <summary>
            Set this property to true to enable parsing of Norwegian contact info.
            The default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.IsOnlyUSA">
            <summary>
            Have any non-USA locale switches been turned on?
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.IsNonEnglishLocaleOrLanguage">
            <summary>
            Have any non-USA locale switches been turned on?
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.CompareOptions">
            <summary>
            CompareOptions to be used for string comparisons.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.CultureInfo">
            <summary>
            Sets the default <see cref="T:System.Globalization.CultureInfo"/> used when parsing
            text, numbers, dates, etc.
            </summary>
            <remarks>
            <para>
            Default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
            <para>
            In cases where the output format (such as HR-XML) requires a LanguageCode but none has
            been identified, the value of TwoLetterISOLanguageName is used.
            </para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCultureSettings.RegionInfo">
            <summary>
            Sets the default <see cref="T:System.Globalization.RegionInfo"/> used for parsing.
            This affects defaults for country and currency.
            </summary>
            <remarks>
            <para>
            Default value is <see cref="P:System.Globalization.RegionInfo.CurrentRegion"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCultureSettings.DefaultCountryCode">
            <summary>
            <para>
            In cases where the output format requires a CountryCode (such as HR-XML postal addresses)
            but none has been identified, this default value is used. This value is the same as
            RegionInfo.TwoLetterISORegionName, which defaults to the locale selected through
            Regional and Language Options (or Regional Options or Regional Settings) in Control Panel in Windows.
            Setting this value is the same as assigning to RegionInfo, but simpler and more accessible for
            COM clients.
            </para>
            <para>
            Note:  This property must be a 2-letter ISO 3166 code, with one exception: for backward compatibility
            reasons, Sovren uses the code "UK" instead of "GB" for the United Kingdom.
            </para>
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.DefaultCurrencyCode">
            <summary>
            <para>
            In cases where the output format requires a CurrencyCode (such as HR-XML compensation)
            but none has been identified, this default value is used. This value is the same as
            RegionInfo.ISOCurrencySymbol, which defaults to the locale selected through
            Regional and Language Options (or Regional Options or Regional Settings) in Control Panel in Windows.
            </para>
            <para>
            Note:  This property must be an ISO 4177 code.
            </para>
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.DateOutputStyle">
            <summary>
            Controls the output format, and assumptions using in parsing, for dates that do not
            provide the month and/or day portion of a date. See <see cref="T:Sovren.ParserCultureSettings.DateOutputStyles"/>.
            The default is <see cref="F:Sovren.ParserCultureSettings.DateOutputStyles.InferMissingDateParts"/>.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.MinimumPhoneDigitCount">
            <summary>
            Specifies the minimum number of digits permitted in a phone number in cases
            where there is some ambiguity about whether the value is actually a phone number.
            Default = 8.
            </summary>
        </member>
        <member name="P:Sovren.ParserCultureSettings.ResolutionStyleForAmbiguousTwoFactorDate">
            <summary>
            See documentation for <see cref="T:Sovren.ParserCultureSettings.AmbiguousDateHandling"/> enumeration.
            Default value is AmbiguousDateHandling.DefaultPerParserSettingsAndContext.
            </summary>
        </member>
        <member name="T:Sovren.ParserCultureSettings.AmbiguousDateHandling">
            <summary>
            Specifies how to handle ambiguous date formats. For instance,
            is "06-08" meant to be June of 2008, August of 2006, or 2006-2008?
            Similarly, what does "96-01" mean? Is it January of 1996, or is it 1996-2001? 
            
            How about "2007-8"? Is that a single year and month, or a year to year range?
            
            Sometimes context can tell us. If we see "06-08 - 08-12", and it is currently a year
            that is earlier than 2012, then this must mean "August of 2006 to December of 2008". 
            HOWEVER, if it is 2012 or later, then this could mean June of 2008 to August of 2012.
            
            So, sometimes context can resolve the dilemma and sometimes it cannot. In addition, it
            is possible that the date parser was only given one date to parse, and is missing 
            the context.
            
            Therefore, we have this enumeration and the 'ResolutionStyleForAmbiguousDate' setting
            to tell the parser how to handle the ambiguities.
            </summary>
        </member>
        <member name="T:Sovren.ParserCultureSettings.DateOutputStyles">
            <summary>
            The Parser can output dates as <AnyDate>1991-01-01</AnyDate> format, where the month
            and day may be inferred.  This is the default.  A job date of just '1999' will therefore
            be given a date range of 1999-01-01 to 1999-12-31.  This facilitates database storage,
            and provides continuity in date ranges where ther are implied.  In addition, the
            "present" date will be output as the current date in YYYY-MM-DD style.  This is the 
            default behavior of the Parser, and is the same as setting 'DateOutputStyle' to 
            'InferMissingDateParts'.
            
            Optionally, dates can be output with only explicitly known data, meaning that dates 
            will only be reported using the information explicitly provided.  Thus, a date of 
            Nov 2000 would be reported as <YearMonth>2000-11</YearMonth>, and a date of 
            11/11/2000 would be output as <AnyDate>2000-11-11</AnyDate>, and a date of
            '1999' would be output as <Year>1999</Year>, and a date of 
            'Present' would be output as <StringDate>current</StringDate>.  
            
            The StructuredXMLResume's RevisionDate element will be unaffected by these
            settings and will always be output as <RevisionDate>YYYY-MM-DD</RevisionDate>.
            </summary>
        </member>
        <member name="T:Sovren.ParserCoverageSettings">
            <summary>
            This class specifies all coverage-related settings used during parsing.
            </summary>
        </member>
        <member name="M:Sovren.ParserCoverageSettings.SetAll(System.Boolean)">
            <summary>
            Set all Boolean Coverage properties to the specified value.
            <br/>
            The primary use is to set all Coverage properties to <b>false</b>, so you can then
            explicitly set individual properties to true.
            <br/>
            BEWARE: Setting all Coverage properties to <b>true</b> can adversely affect accuracy,
            performance, and will capture additional content in future versions as new
            Coverage properties are created.
            </summary>
            <param name="value">The value to be assigned to each Boolean Coverage property.</param>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.ContactInfo">
            <summary>
            Parse for Contact Information. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Objective">
            <summary>
            Parse for Objective. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.ExecutiveSummary">
            <summary>
            Parse for Executive Summary. Default = true.
            </summary>
            <remarks>
            The value is also true whenever Skills and FindSkillsInExecutiveSummary are both true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.EmploymentHistory">
            <summary>
            Parse for Employment History. Default = true.
            </summary>
            <remarks>
            The value is also true whenever Skills or JobCatgories is true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.EmploymentHistoryRequiresDates">
            <summary>
            When true (default), the parser only finds positions that have a date associated with them.
            When false, the parser first looks for positions with dates, and if none are found
            then the parser rescans the text without looking for dates. This additional scan
            can make Employment History parsing substantially slower. Since resumes typically
            have Position dates, the default is to require dates and avoid the additional scan.
            However, if you must extract Employment History from resumes that do not have
            Position dates, then change this setting to false.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.EntryLevel">
            <summary>
            Set to true if you know or suspect that the resume is from an entry-level candidate
            with no work experience. When true, the parser relaxes its effort to find work history
            because entry level resumes often do not list any positions. When false (the default),
            the parser assumes that there is work history somewhere in the resume and so it works
            hard to identify some portion of the resume as work history (which can create inaccuracies
            when there is no work history).
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.EducationHistory">
            <summary>
            Parse for Education History. Default = true.
            HOWEVER, if there is a resume/CV that appears to have no education
            section, then if this flag has been set to 'true, training will be 
            parsed as education without regard to the setting for Training.
            </summary>
            <remarks>
            The value is also true whenever Skills and FindSkillsInEducationHistory are both true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.LicensesAndCertifications">
            <summary>
            Parse for Licenses and Certifications. Default = true.
            </summary>
            <remarks>
            The value is also true whenever Skills is true and either FindSkillsInCertifications or FindSkillsInLicenses is true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Management">
            <summary>
            Parse for Management experience. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Skills">
            <summary>
            Scan sections for Skills (according to FindSkillsInXxxxx properties). Default = true.
            </summary>
            <remarks>
            When true, EmploymentHistory is also set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.MilitaryHistory">
            <summary>
            Parse for Military History. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.PatentHistory">
            <summary>
            Parse for Patent History. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.PublicationHistory">
            <summary>
            Parse for Publication History. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.SpeakingEventsHistory">
            <summary>
            Parse for Speaking Events History. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Qualifications">
            <summary>
            Parse for Qualifications Summary. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Languages">
            <summary>
            Parse for Languages. Default = true.
            </summary>
            <remarks>
            The value is also true whenever Skills and FindSkillsInLanguages are both true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Achievements">
            <summary>
            Parse for Achievements. Default = true.
            </summary>
            <remarks>
            The value is also true whenever Skills and FindSkillsInAchievements are both true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Associations">
            <summary>
            Parse for Associations. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.References">
            <summary>
            Parse for References. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.SecurityCredentials">
            <summary>
            Parse for Security Credentials. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.JobCategories">
            <summary>
            Parse for Job Categories. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Training">
            <summary>
            Parse for Training. Training is parsed as Education, since there is no dedicated
            parser specifically for training and since the HR-XML Resume schema does not have
            a place for training. Training info is reported as UserArea/Training elements in
            the XML. HOWEVER, if there is a resume/CV that appears to have no Education section,
            then Training will be parsed into the EducationHistory without regard to this setting.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.PersonalInformation">
            <summary>
            Get to determine if any Personal Information fields are enabled.
            Set to enable or disable all Personal Information fields.
            The set of fields affected by this property are:
            Ancestor, DateOfBirth, DrivingLicense, Gender, Location, MaritalStatus,
            Nationality, NationalIdentityNumber, Passport, Salary, Visa.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Ancestor">
            <summary>
            Parse for Ancestors. Currently includes FathersName and MothersMaidenName. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Birthplace">
            <summary>
            Parse for Birthplace. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.DateOfBirth">
            <summary>
            Parse for Date of Birth. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.DrivingLicense">
            <summary>
            Parse for Driving License. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FamilyComposition">
            <summary>
            Parse for Family Composition (spouse, children). Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Gender">
            <summary>
            Parse for Gender. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Location">
            <summary>
            Parse for Location preferences. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.MaritalStatus">
            <summary>
            Parse for Marital Status. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.NationalIdentityNumber">
            <summary>
            Parse for NationalIdentityNumber. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Nationality">
            <summary>
            Parse for Nationality. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Passport">
            <summary>
            Parse for Passport. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Salary">
            <summary>
            Parse for Current or Expected Salary. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.Visa">
            <summary>
            Parse for Visa. Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInAchievements">
            <summary>
            Controls whether Achievements section is searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then Achievements is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInCertifications">
            <summary>
            Controls whether Certifications section is searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then LicensesAndCertifications is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInCoverLetter">
            <summary>
            Controls whether the Cover Letter is searched for skills. Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInEducationHistory">
            <summary>
            Controls whether EducationHistory section is searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then EducationHistory is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInExecutiveSummary">
            <summary>
            Controls whether ExecutiveSummary section is searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then ExecutiveSummary is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInLanguages">
            <summary>
            Controls whether Languages section is searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then Languages is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInLicenses">
            <summary>
            Controls whether Licenses are searched for skills. Default = true.
            </summary>
            <remarks>
            If Skills is also true, then LicensesAndCertifications is implicitly set to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.FindSkillsInEntireDocument">
            <summary>
            Controls whether skills are searched for in the entire document, without regard to section.
            </summary>
            <remarks>
            Side effect: when true, sets all other "FindSkillsInXXX" switches to true.
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.AddPositionTitlesToSkills">
            <summary>
            Add Position Titles to the list of skills.  Default = false.
            </summary>
            <remarks>
            <para>The parent/sub taxonomy is AlsoTreatedAsSkills/PositionTitles.</para>
            <para>The parent skill is "Position Titles found" with id "090807061".</para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.AddLanguagesToSkills">
            <summary>
            Add Languages to the list of skills.  Default = false.
            </summary>
            <remarks>
            <para>The parent/sub taxonomy is AlsoTreatedAsSkills/Languages.</para>
            <para>The parent skill is "Languages found" with id "090807062".</para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.AddCertificationsAndLicensesToSkills">
            <summary>
            Add Certifications and Licenses to the list of skills.  Default = false.
            </summary>
            <remarks>
            <para>The parent/sub taxonomy is AlsoTreatedAsSkills/CertificationsAndLicenses.</para>
            <para>The parent skill is "Certifications and Licenses found" with id "090807063".</para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.AddNonTaxonomySkills">
            <summary>
            Add non-taxonomy skills. These are skills that are not in the selected taxonomies but
            that appear to be skills. This is most useful when parsing a resume with the intended purpose of
            searching and matching skills based on freeform user-input that may include keywords that
            are not listed in your selected taxonomies. Default = false.
            </summary>
            <remarks>
            <para>In the output, non-taxonomy skills have a competency id of "CALCULATED" and a
            parent competency id of "ALL_CALCULATED_SKILLS". They look like this in the XML output:</para>
            <code><![CDATA[
            <Competency name="Treasury">
            	<CompetencyId id="CALCULATED" idOwner="ALL_CALCULATED_SKILLS" />
            	<CompetencyEvidence name="Treasury" typeDescription="Found in WORK HISTORY" typeId="CALCULATED" lastUsed="2008-07-31">
            		<NumericValue description="Total Months">21</NumericValue> 
            	</CompetencyEvidence>
            </Competency>
            ]]></code>
            </remarks>
        </member>
        <member name="P:Sovren.ParserCoverageSettings.IgnoreCaseForSkills">
            <summary>
            If you set this property to true, then the case-sensitivity rules that are specified
            on the individual skill defintions are ignored and the parser ignores case-sensitivity
            when looking for skills.
            Default = false.
            </summary>
            <remarks>
            As an example, the programming environment named "PROGRESS" normally
            appears in upper-case, so its case-sensitivity rule is set to ignore the
            lower case variation "progress". If you set IgnoreCaseForSkills to true, then the
            word "progress" will detected as the skill "PROGRESS".
            </remarks>
        </member>
        <member name="T:Sovren.TelcomNumberOutputStyles">
            <summary>
            Specifies the type of structure that is used to represent each telcom number.
            Used by <see cref="P:Sovren.ParserOutputFormatSettings.TelcomNumber">ParserSettings.OutputFormat.TelcomNumber</see>.
            </summary>
            <remarks>
            The integer values for this enum have been assigned to allow for future use as
            Flags, but currently you must select only a single value.
            </remarks>
        </member>
        <member name="F:Sovren.TelcomNumberOutputStyles.Raw">
            <summary>
            <para>
            Telcom number will be output as a single &lt;FormattedNumber&gt; element that
            contains the raw (unmodified) text that was extracted from the document.
            Numeric value = 1.
            </para>
            </summary>
        </member>
        <member name="F:Sovren.TelcomNumberOutputStyles.Formatted">
            <summary>
            <para>
            When possible, the telcom number will be output as a single &lt;FormattedNumber&gt; element that
            has been reformatted based on knowledge of the underlying structure of the number.
            Numeric value = 2.
            </para>
            <para>
            This option currently only applies to US/Canada numbers. When there is insufficient
            information about the structure of the number, the style reverts to Raw.
            </para>
            </summary>
        </member>
        <member name="F:Sovren.TelcomNumberOutputStyles.Structured">
            <summary>
            <para>
            When possible, the telcom number will be output as multiple elements, each containing
            a portion of the number (InternationalCountryCode, AreaCode, SubscriberNumber, Extension).
            Numeric value = 4.
            </para>
            <para>
            This option currently only applies to US/Canada numbers. When there is insufficient
            information about the structure of the number, the style reverts to Raw.
            </para>
            </summary>
        </member>
        <member name="T:Sovren.TelcomNumberOutputFormat">
            <summary>
            Specifies telcom number output formatting options.
            </summary>
        </member>
        <member name="P:Sovren.TelcomNumberOutputFormat.Style">
            <summary>
            Specifies the <see cref="T:Sovren.TelcomNumberOutputStyles"/> style to use. The
            default is <see cref="F:Sovren.TelcomNumberOutputStyles.Raw"/>.
            </summary>
        </member>
        <member name="T:Sovren.ContactMethodPackStyles">
            <summary>
            Specifies the type of packing that is performed on ContactMethod elements. The
            HR-XML standard does not permit multiple occurences of the same type (e.g. Telephone)
            within a single ContactMethod. However, since this commonly occurs in documents, we
            offer multiple strategies for how to handle the output.
            </summary>
        </member>
        <member name="F:Sovren.ContactMethodPackStyles.Split">
            <summary>
            Each ContactMethod will contain only a single child element. This structure provides
            the most robust level of information because each element can have its own distinct
            value for Use/Location/WhenAvailable. And it also provides a consistent approach for
            storing multiple values of the same type (e.g. two phone numbers that are both classified
            as personal/home/telephone).
            Numeric value = 1.
            </summary>
        </member>
        <member name="F:Sovren.ContactMethodPackStyles.Packed">
            <summary>
            <para>
            Child elements are packed into as few ContactMethod elements as possible.
            Elements with the same Use/Location are merged into a common ContactMethod.
            When there are multiple elements of the same type/use/location, then additional
            ContactMethod elements are created to hold those extra values.
            Numeric value = 2.
            </para>
            <para>Limitiations include:</para>
            <list type="bullet">
            <item><description>Occurrences of ContactMethod/Use = "unknown" are converted to "personal"</description></item>
            <item><description>Occurrences of ContactMethod/Use = "businessDirect" are converted to "business"</description></item>
            <item><description>Occurrences of ContactMethod/Location other than "office" are converted to "home"</description></item>
            <item><description>Loss of multiple values for WhenAvailable</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Sovren.ContactMethodPackStyles.PackedNoOverflow">
            <summary>
            <para>
            Same as <see cref="F:Sovren.ContactMethodPackStyles.Packed"/> except that all ContactMethod information will be packed
            into at most two ContactMethod elements. One with a Use/Location of personal/home, and the
            other with a Use/Location of business/office.
            Numeric value = 3.
            </para>
            <para><b>WARNING: This style may cause loss of data.</b> The HR-XML standard does not allow
            multiple elements of the same type in the same contact method, so if, for example, a resume
            contained two Home Mobile numbers, then the second number would be discarded.</para>
            <para>
            Some systems (e.g. SAP eRecruitment) are not able to handle multiple ContactMethod elements,
            so this option exists to limit the output to a single packed ContactMethod for each
            Use/Location.
            </para>
            </summary>
        </member>
        <member name="T:Sovren.ContactMethodOutputFormat">
            <summary>
            Specifies output formatting options for ContactMethod elements.
            Used by <see cref="P:Sovren.ParserOutputFormatSettings.ContactMethod">ParserSettings.OutputFormat.ContactMethod</see>.
            </summary>
        </member>
        <member name="P:Sovren.ContactMethodOutputFormat.PackStyle">
            <summary>
            Specifies the <see cref="T:Sovren.ContactMethodPackStyles"/> style to use. The
            default is <see cref="F:Sovren.ContactMethodPackStyles.Split"/>.
            </summary>
        </member>
        <member name="T:Sovren.KnownFormats">
            <summary>
            A list of known formats. Many more formats are supported, but these particular
            formats require special processing.
            </summary>
        </member>
        <member name="T:Sovren.ParserInputFormatSettings">
            <summary>
            Specifies parser input format options.
            </summary>
        </member>
        <member name="P:Sovren.ParserInputFormatSettings.KnownFormat">
            <summary>
            Specifies whether the source text is in a known format.
            </summary>
        </member>
        <member name="T:Sovren.ParserNormalizationSettings">
            <summary>
            Specifies when and how values are normalized, such as "Florida" to "FL".
            </summary>
        </member>
        <member name="P:Sovren.ParserNormalizationSettings.NormalizeRegions">
            <summary>
            Controls whether Region values are normalized to their standard abbreviations.
            When false, region values are returned exactly as they appear within the resume.
            When true, region values are normalized, if possible. This currently only applies to USA States and Canadian Provinces.
            For example, normalize the US State name "Florida" and all its variations to "FL".
            Default = true.
            </summary>
        </member>
        <member name="T:Sovren.ParserOutputFormatSettings">
            <summary>
            Specifies parser output formatting options.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.TelcomNumber">
            <summary>
            Specifies output formatting options for TelcomNumber elements.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.ContactMethod">
            <summary>
            Specifies output formatting options for ContactMethod elements.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.ShowParentSkills">
            <summary>
            If true, when the Parser finds a skill, it will look up the parent skill, if any (the
            skill itself may be parent-level...), and will output the parent skill as well.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.NestJobsBasedOnDateRanges">
            <summary>
            If true and if the candidate held multiple positions at the same employer,
            the HR-XML will show multiple position histories nested within a single EmployerOrg node.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.AssumeCompanyNameFromPrecedingJob">
            <summary>
            If true and if a position has no nearby company name, then the parser assigns the
            position to the same company as the immediately preceding position.  This will often
            be right when the applicant is very experienced but has not done a good
            job of writing a MACHINE-readable resume rather than a VISUAL resume.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.MinimumPositionTitleProbability">
            <summary>
            If the PositionTitleProbability is less than this value, the position
            title will not be reported.  Any value is valid, but only
            values between 0 and 20 inclusive make any sense to use.  The default
            is 9. Any value less than 10 indicates a guess or inference.
            Using values greater than 10 is NOT recommended.
            Default = 9.
            </summary>
            <remarks>
            <br/>Values &lt; 10 are guesses.  There is no upper bound.
            <br/>9: probable
            <br/>8: maybe
            <br/>5: a guess
            <br/>4: not likely, but our best guess
            <br/>&lt; 4:  wild guess
            </remarks>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.MinimumCompanyNameProbability">
            <summary>
            If the CompanyNameProbability is less than this value, the company
            name will not be reported.  Any value is valid, but only
            values between 0 and 20 inclusive make any sense to use.  The default
            is 9. Any value less than 10 indicates a guess or inference.
            Using values greater than 10 is NOT recommended.
            Default = 9.
            </summary>
            <remarks>
            <br/>Values &lt; 10 are guesses.  There is no upper bound.
            <br/>9: probable
            <br/>8: maybe
            <br/>5: a guess
            <br/>4: not likely, but our best guess
            <br/>&lt; 4:  wild guess
            </remarks>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.CreateBullets">
            <summary>
            When true, the PositionHistory/UserArea will include a "bullet" based interpretation
            of the PositionHistory/Description text in which each significant sentence/line/paragraph is
            reported as a separate Bullet object or element. This can be useful when transforming
            HR-XML into an standard resume document format and you want each major point to be a bullet.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.EmbedResumeTextInHrXml">
            <summary>
            When true, the converted resume text that was used for parsing will be
            embedded into the Resume.NonXMLResume element in the HR-XML parsed results.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.OutputCoverLetter">
            <summary>
            When true, the cover letter text (if any) is included in the HR-XML output
            in the Resume/UserArea/CoverLetterText element. Only has an effect when
            OutputSovrenUserAreaExtensions is true.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.OutputSovrenUserAreaExtensions">
            <summary>
            When true, output significantly useful data that is above and beyond what is
            specified by the HR-XML schema. This includes resume sectioning details,
            personal information, calculated best fit taxonomies, length of experience,
            management level, and so on. This data is added to UserArea elements and is
            HR-XML compliant. When false, only standard HR-XML data is output.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.EmbedOffsetOfLatestDataFoundMarkerIntoPositionHistoryText">
            <summary>
            When true, a marker "[*]" is inserted after the latest place, in the position history Description text,
            where a piece of parsed data was found.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.StripHeaderFromPositionHistoryDescription">
            <summary>
            By default, the PositionHistory/Description element includes all text that is
            related to a particular PositionHistory element, including the title, company,
            location and date. If you want the Description element to remove that header
            information and leave only the descriptive text that follows it, then set this
            option to true.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.ReformatPositionHistoryDescription">
            <summary>
            By default, the PositionHistory/Description element retains as much of the original
            formatting as possible. Set this to true to remove blank lines, split long paragraphs
            into separate lines, and other reformatting techniques intended to place
            each achievement on a separate line.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.SectionDetails">
            <summary>
            Controls whether the UserArea of HR-XML output includes information
            about the resume sections, including: start line number, end line number,
            section type, section text.
            Default = true.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.MaximumJobObjectiveLength">
            <summary>
            Sometimes the JobObjective can be too lengthy.  The number of characters returned
            in that property is limited by this setting.
            A value of 0 means no limit.
            <br/>Default = 1000.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.UserAreaNamespace">
            <summary>
            Specifies the namespace prefix to use for all Sovren elements 
            generated within HR-XML UserArea elements.
            <br/>Default = sov
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.IndentChars">
            <summary>
            When formatted XML (see <see cref="M:Sovren.hrxmlResume.GetAsFormattedXml"/> is requested,
            this setting specifies the character(s) to be used for indentation.
            Default = one tab.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.BestFitTaxonomyCount">
            <summary>
            When a TaxonomySummary is generated, this property controls the number of
            BestFitTaxonomy records that are output at each level. When 0, the count
            is unlimited.
            Default = 2.
            </summary>
        </member>
        <member name="P:Sovren.ParserOutputFormatSettings.BestFitTaxonomyDepth">
            <summary>
            When a TaxonomySummary is generated, this property controls how many levels
            of depth of BestFitTaxonomy records are reported. When 0, depth is unlimited.
            When 1, only the top level is reported. When 2, up to two levels are reported.
            Default = 2.
            </summary>
        </member>
        <member name="T:Sovren.ParserRuntimeSettings">
            <summary>
            Controls parser runtime settings such as threading, memory, and timeouts.
            </summary>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.GeneratePerformanceLog">
            <summary>
            When true, detailed internal timing information is added to the PerformanceLog property
            on the ParserMapper class and to the diagnostic trace log if the trace level is at least
            at the Information level.
            </summary>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.SoftTimeout">
            <summary>
            The number of milliseconds before the parser should gracefully stop
            its work and return as much data as it had been able to gather
            up to that point.
            Set to Timeout.Infinite (-1) to have no timeout.
            Default = 30000 (30 seconds). Minimum = 1000 (1 second).
            </summary>
            <remarks>
            <para>
            The default can be modified in the config file with this appSetting: Sovren.ParserSettings.Runtime.SoftTimeout
            </para>
            </remarks>
            <seealso cref="P:Sovren.ParserRuntimeSettings.EffectiveHardTimeout"/>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.HardTimeout">
            <summary>
            The number of milliseconds before the parser should be forcefully terminated.
            The parser runs on an internally-controlled thread, and that thread is aborted
            when this limit is reached. All information gathered up to that
            point will be available, but it is possible that some of that information
            will be incomplete or inconsistent. Set to Timeout.Infinite (-1) to have no timeout.
            Default = 40000 (40 seconds). Minimum = 1000 (1 second).
            </summary>
            <remarks>
            <para>
            To help ensure data consistency, the parser requires that the hard timeout is always greater than
            the soft timeout by at least a small margin (the lesser of 20% or 2 seconds).
            See the <see cref="P:Sovren.ParserRuntimeSettings.EffectiveHardTimeout"/> property for a more detailed explanation
            of the computed hard timeout value that is actually used during parsing.
            </para>
            <para>
            The default can be modified in the config file with this appSetting: Sovren.ParserSettings.Runtime.HardTimeout
            </para>
            </remarks>
            <seealso cref="P:Sovren.ParserRuntimeSettings.EffectiveHardTimeout"/>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.EffectiveHardTimeout">
            <summary>
            This value is the hard timeout that will be used during parsing. It is derived
            from the SoftTimeout and HardTimeout settings, based on a few rules to ensure
            that HardTimeout is never less than a small margin above SoftTimeout.
            </summary>
            <remarks>
            <para>
            EffectiveHardTimeout is calculated according to several rules:
            </para>
            <list type="number">
            <item><description>If either SoftTimeout or HardTimeout was set to Infinite, then EffectiveHardTimeout is Infinite.</description></item>
            <item><description>EffectiveHardTimeout is the greater of A) HardTimeout or B) SoftTimeout plus an additional 20% margin (up to 2000 ms).</description></item>
            </list>
            <para>
            Some examples:
            </para>
            <list type="bullet">
            <item><description>
            If SoftTimeout and HardTimeout are both 1000, then EffectiveHardTimeout is 1200 ms.
            </description></item>
            <item><description>
            If SoftTimeout and HardTimeout are both 10000, then EffectiveHardTimeout is 12000 ms.
            </description></item>
            <item><description>
            If either SoftTimeout or HardTimeout is Infinite, then EffectiveHardTimeout is Infinite.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.LineCountErrorThreshold">
            <summary>
            The text will not be parsed if it has more than this number of lines.
            Use this setting to avoid parsing wayward documents.
            A value of 0 means no limit.
            <br/>Default = 3000.
            </summary>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.LineCountParseThreshold">
            <summary>
            Specify the maximum number of lines to be parsed from the text. The text
            is truncated at this threshold before parsing. This threshold helps avoid
            wasting valuable time parsing data of little value.
            A value of 0 means no limit.
            <br/>Default = 1000.
            </summary>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.MaxThreads">
            <summary>
            Controls whether the Parser is allowed to use additional threads to increase performance.
            On machines with multiple processors or hyperthreading, additional threads can cut parsing
            times substantially. Default is to allow as many threads as there are processors.
            </summary>
            <remarks>
            <para>
            A value of 0 means to allow as many threads as there are processors. Values less than
            zero are not allowed.
            </para>
            <para>
            The default can be modified in the config file with this appSetting: Sovren.ParserSettings.Runtime.MaxThreads
            </para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserRuntimeSettings.ThreadPriority">
            <summary>
            Set the priority of the internal thread used to run the parser.
            Default = ThreadPriority.Normal.
            </summary>
            <remarks>
            <para>
            By default, the Parser will run at normal priority in the operating system.
            Changing this setting to ThreadPriority.BelowNormal or ThreadPriority.Lowest
            will greatly reduce the impact of the Parser on the operating environment.
            </para>
            <para>
            A scenario where the Parser might be set to lower priority could be when
            the Parser is being used as part of a desktop application and you want
            to ensure that the user's computing experience does not seem to bog
            down during parsing.
            </para>
            <para>Changing the priority to a setting above 
            ThreadPriority.Normal is unlikely to yield noticeably better parsing times
            and will make other applications less responsive.
            </para>
            <para>
            The default can be modified in the config file with this appSetting: Sovren.ParserSettings.Runtime.Timeout
            </para>
            </remarks>
        </member>
        <member name="T:Sovren.ParserDiagnosticSettings">
            <summary>
            Specifies the generation of diagnostic information during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserDiagnosticSettings.DebugMode">
            <summary>
            When true, each parse is single-threaded and additional debug information is captured during parsing.
            Always true when both Debugger.IsAttached and environment variable SOVREN_DEBUG=TRUE.
            </summary>
        </member>
        <member name="P:Sovren.ParserDiagnosticSettings.TraceFlushInterval">
            <summary>
            Diagnostic trace output is automatically buffered for performance. When the buffer fills it is
            automatically flushed. However, you may wish to view trace output before the buffer fills. This
            setting sets the maximum number of milliseconds between flushes. A value of 0 or less disables
            timed flushes.
            <br/>Default = 1000 ms.
            <br/>AppSetting = Sovren.ParserSettings.Diagnostic.TraceFlushInterval.
            </summary>
        </member>
        <member name="T:Sovren.ParserDataSettings">
            <summary>
            Specifies data that is used during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserDataSettings.MinimumNonPersonalYear">
            <summary>
            When parsing a resume/CV, it is important to set a floor for the lowest date
            that makes logical sense when parsing for items such as dates of employment
            and education. By default, this number 49 years earlier than the RevisionDate.
            </summary>
        </member>
        <member name="P:Sovren.ParserDataSettings.MinimumPersonalYear">
            <summary>
            When parsing a resume/CV, it is important to set a floor for the lowest date
            that makes logical sense when parsing for person dates, such as date of birth.
            By default this value is set at RevisionDate minus 85 years.
            </summary>
        </member>
        <member name="P:Sovren.ParserDataSettings.RevisionDate">
            <summary>
            Specifies the revision date of the document being parsed. This date is used
            whenever the parser detects a reference to the current date, as in a date
            range like this "October 2006 to Present".
            This setting can be useful when parsing old resumes, so that skills and
            work experience calculations are not skewed by the passage of time.
            <br/>Default = the current local system date (DateTime.Today).
            </summary>
            <remarks>
            <para>
            This date is also reported in the <c>&lt;RevisionDate&gt;</c> element
            in the HR-XML.
            </para>
            <para>
            The default value of this property within ParserSettings.Default is DateTime.MinValue.
            The special value of DateTime.MinValue indicates that this property should be automatically
            assigned the value of DateTime.Today whenever this setting is copied, such as when a new
            ParserSettings instance copies its default values from ParserSettings.Default or when
            a custom ParserSettings instance is cloned. This oddity is necessary to allow cached
            ParserSettings instances to be temporally correct when used today and tomorrow.
            </para>
            <para>
            The RevisionDate cannot be set to less than January 1, 2000. In practice, this should
            not be an issue since a 10 year old resume is practically worthless anyway.
            </para>
            </remarks>
        </member>
        <member name="P:Sovren.ParserDataSettings.TaxonomyFiles">
            <summary>
            Specifies the collection of taxonomies to use when parsing for skills.
            This setting is only used when TaxonomyRoots is null.
            If TaxonomyRoots and TaxonomyFiles are both null or empty, then
            the built-in language-specific TaxonomyRoot is used,
            if one exists, otherwise the built-in English TaxonomyRoot is used.
            <br/>Default = null.
            </summary>
        </member>
        <member name="P:Sovren.ParserDataSettings.SkillFiles">
            <summary>
            Specifies the collection of skills to use when parsing for skills.
            This setting is only used when TaxonomyRoots is null.
            If TaxonomyRoots and SkillFiles are both null or empty, then
            the built-in language-specific TaxonomyRoot is used,
            if one exists, otherwise the built-in English TaxonomyRoot is used.
            <br/>Default = null.
            </summary>
        </member>
        <member name="P:Sovren.ParserDataSettings.TaxonomyRoots">
            <summary>
            Specifies the collection of taxonomies and skills to use when parsing for
            skills. If this setting is null, then the TaxonomyFiles and SkillFiles
            settings are used. If those are also null, then the built-in
            language-specific TaxonomyRoot is used, if one exists, otherwise
            the built-in English TaxonomyRoot is used.
            <br/>Default = null.
            </summary>
        </member>
        <member name="T:Sovren.ParserCustomDataSettings">
            <summary>
            Specifies custom data that is to be collected during parsing.
            </summary>
        </member>
        <member name="P:Sovren.ParserCustomDataSettings.AutoLoadDefinitions">
            <summary>
            When true, all of the definitions in the CUSTOM_DATA_DEFINITIONS data list
            (based on the language setting) will be loaded and used during parsing.
            Default = false.
            </summary>
        </member>
        <member name="P:Sovren.ParserCustomDataSettings.Definitions">
            <summary>
            Definitions of additional custom data items to be collected during parsing
            through the use of regular expressions.
            </summary>
        </member>
        <member name="T:Sovren.ParserInternalSettings">
            <summary>
            Various switches that control parser behavior based on analysis during parsing.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlTaxonomyNameType">
            <summary>
            Summary description for hrxmlTaxonomyNameType.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlServiceDetailType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ServiceDetailType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlReferenceType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ReferenceType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentMilestoneType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentMilestoneType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlLocationSummaryType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for LocationSummaryType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDistributionType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DistributionType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCopyrightDatesType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CopyrightDatesType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAttachmentReferenceType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for AttachmentReferenceType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.FlatSkill">
            <summary>
            FlatSkill is a flattened (simplified, retaining all features) version of hrxmlCompetencyType, 
            with fields for data that would be contained in CompetencyEvidences and CompetencyWeights.  
            We no longer support the exact HR-XML Resume 2.4+ schema /inside/ these objects, as we did 
            in the old hrxmlCompetencyType objects that the FlatSkill type replaces.  
            
            The hrxmlCompetencyType objects were too unwieldy to use for all of our complicated 
            skills/taxonomy calculation/characterization algorithms because much of the data had 
            to be stored in properties that were themselves hrxmlBase derived objects.  
            The object nesting was just too deep to be practical and efficient.
            
            Thus, we have deprecated the old hrxmlCompetencyType and hrxmlCompetency objects and 
            replaced them with FlatSkill and FlatSkills, respectively.  The names describe the 
            difference: we flattened the objects so that there are no nested hrxmlBase-derived 
            properties.  
            
            The GetAsXml() methods will still produce the same valid HR-XML output.  SOME 
            IMPROVEMENTS HAVE BEEN MADE TO THE OUTPUT, HOWEVER.  
            
            For instance, each skill that is a child skill will now have the CompetencyId idOwner attribute 
            set to the SkillId of the parent skill.  Parent skills will have an empty idOwner attribute.
            Similarly, the skill's subtaxonomy is listed 
            as its TaxonomyId, and the top level parent taxonomy id of that subtaxonomy is
            listed in the TaxonomyId idOwner attribute.  The description attribute is now
            populated with a semicolon-delimited list of ALL the resume section types where 
            the skill was found.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkill.GetLastUsedDate">
            <summary>
            Because there are multiple SkillsSections that can be passed in, and each SkillsSection has
            different date ranges associated with it, we have to calculate this property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.FlatSkill.Clear">
            <summary>
            Resets the object to "no data" state.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkill.Populate(System.String,System.String,System.String,System.String,System.String,Sovren.SkillsSection)">
            <summary>
            A method for setting the skill's properties in one pass.
            </summary>
            <param name="skillName">Competency => name</param>
            <param name="skillId">Competency => CompetencyId => id</param>
            <param name="parentSkillId">The SkillId of the parent skill, if any. </param>
            <param name="taxonomyId">Competency => TaxonomyId => id</param>
            <param name="parentTaxonomyId">Competency => TaxonomyId => idOwner</param>
            <param name="sectionWhereFound">The SkillsSection object containing info about where in the resume this instance of the skill was found.  Although
            there can be multiple SkillsSections, only one at a time can be passed here.</param>
        </member>
        <member name="M:Sovren.FlatSkill.Populate(Sovren.TaxonomySkill,Sovren.SkillsSection)">
            <summary>
            Populates the skill from a TaxonomySkill instance and a SkillsSection instance.
            </summary>
            <param name="skill">a TaxonomySkill instance</param>
            <param name="sectionWhereFound">a SkillsSection instance</param>
        </member>
        <member name="M:Sovren.FlatSkill.GetSectionTypesWhereFound">
            <summary>
            Returns a semicolon+space ("; ") delimited list of section types (see the ResumeSections class) 
            where this skill was found.  The list is preceded by "Found in ".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sovren.FlatSkill.GetAsXml">
            <summary>
            Method for converting the object to an HR-XML -compliant XML representation.
            </summary>
            <returns>The object serialized as an XML string.</returns>
        </member>
        <member name="M:Sovren.FlatSkill.GetAsCSV">
            <summary>
            Alternate output format.
            </summary>
            <returns>CSV</returns>
        </member>
        <member name="M:Sovren.FlatSkill.AddFromCsv(System.String[],System.Int32)">
            <summary>
            Provides method to populate this object from CSV.
            </summary>
            <param name="csvFields">The data in CSV form.</param>
            <param name="startFromFieldNbr"></param>
        </member>
        <member name="P:Sovren.FlatSkill.Description">
            <summary>
            Not populated by default, but may be populated with any data you deem appropriate.
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.IsParent">
            <summary>
            Is this skill a parent skill or a child skill?
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.SkillName">
            <summary>
            The name of the skill.  HR-XML: Competency => name
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.SkillId">
            <summary>
            The Id of the skill.  HR-XML: Competency => CompetencyId => id
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.ParentSkillId">
            <summary>
            The Id of the parent skill, if any.
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.ParentTaxonomyId">
            <summary>
            The Id of the parent of TaxonomyId, if TaxonomyId is a child taxonomy.
            HR-XML: Competency => TaxonomyId => idOwner
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.TaxonomyId">
            <summary>
            The Id of the Taxonomy for this Skill.
            HR-XML: Competency => TaxonomyId => id
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.TaxonomyEntryKey">
            <summary>
            The key of the TaxonomyEntry that contains this skill (and the taxonomy...).		
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.SkillLevel">
            <summary>
            This is a user-defined field.  It is NOT output in the HR-XML.
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.LastUsedDate">
            <summary>
            The calculated last date that the skill appears to have been in active use.
            </summary>
        </member>
        <member name="P:Sovren.FlatSkill.CumulativeMonths">
            <summary>
            The cumulative months that the skill appears to have been in use.  NOTE:  This calculation can
            be modified by later algorithms such as some that appear in the ParserMapper class.  For instance,
            say a candidate has three position histories, each lasting exactly 12 months during 2005, 2004, and 2003,
            and that the skill appears in only the first one and the last one.  Further, say that it appears 
            three times in the first one, and that it also appears in the separate skills summary section of 
            the resume.  The cumulative months reported here would be 12 + 0 + 12 + 6 = 30.  However, it
            could be argued (speculated, actually), that the skill was in use during the middle job if it
            was in use before and after that job.  So, the argument could be made that the correct value is
            12 + 12 + 12 + 6 = 42.  There is a way, in the ParserMapper class, to have that logic applied 
            after the fact.  Also, there is a way in the Parser Mapper class to change the value given to 
            a non-date-range appearance in a non-work-history section of the resume, from the default of 
            six months, to a different value.
            </summary>
        </member>
        <member name="T:Sovren.CsvMapper">
            <summary>
            Provides limited conversion of HR-XML parsed results to CSV output;
            </summary>
        </member>
        <member name="T:Sovren.hrxmlUserAreaBestFitTaxonomies">
            <summary>
            Public class for implementing Sovren BestFitTaxonomy extension of HR-XML Resume 2.4 output.
            This is a strongly typed descendant of hrxmlCollection.
            <br/>
            This class represents a hierarchy of best fit taxonomies. Convenience methods are provided
            to easily access the items and their properties at pre-determined points in the hierarchy.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetAsXml(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends hiearchy to an existing StringBuilder.
            </summary>
            <param name="sb">StringBuilder to append to.</param>
            <param name="depth">Levels of depth remaining.</param>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.Get(System.Int32[])">
            <summary>
            Retrieve a taxonomy using multi-dimensional array indexes.
            </summary>
            <param name="indexes"> For example, "0, 1" retrieves the second child of the first item.</param>
            <returns>The requested taxonomy, if it exists; otherwise, null. This method returns null instead of throwing IndexOutOfRangeException.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyId(System.Int32[])">
            <summary>
            Retrieve a taxonomy id using multi-dimensional array indexes.
            </summary>
            <param name="indexes">
            Indexes addressing the desired taxonomy at each level of the hierarchy.
            For example, "0, 1" retrieves the Id of second child of the first item.
            </param>
            <returns>The requested taxonomy id, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyId(System.Int32)">
            <summary>
            Retrieve a taxonomy id from the specified taxonomy.
            </summary>
            <param name="index">Index of the taxonomy within the top-level list.</param>
            <returns>The requested taxonomy id, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyId(System.Int32,System.Int32)">
            <summary>
            Retrieve a taxonomy id from the specified taxonomy.
            </summary>
            <param name="index">Index of a taxonomy within the top-level.</param>
            <param name="subIndex">Index of a child within the taxonomy found with <paramref name="index"/>.</param>
            <returns>The requested taxonomy id, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyName(System.Int32[])">
            <summary>
            Retrieve a taxonomy name using multi-dimensional array indexes.
            </summary>
            <param name="indexes">
            Indexes addressing the desired taxonomy at each level of the hierarchy.
            For example, "0, 1" retrieves the Name of second child of the first item.
            </param>
            <returns>The requested taxonomy name, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyName(System.Int32)">
            <summary>
            Retrieve a taxonomy name from the specified taxonomy.
            </summary>
            <param name="index">Index of the taxonomy within the top-level list.</param>
            <returns>The requested taxonomy name, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="M:Sovren.hrxmlUserAreaBestFitTaxonomies.GetTaxonomyName(System.Int32,System.Int32)">
            <summary>
            Retrieve a taxonomy name from the specified taxonomy.
            </summary>
            <param name="index">Index of a taxonomy within the top-level.</param>
            <param name="subIndex">Index of a child within the taxonomy found with <paramref name="index"/>.</param>
            <returns>The requested taxonomy name, if it exists; otherwise, String.Empty.</returns>
        </member>
        <member name="T:Sovren.WorkHistoryFragment">
            <summary>
            WorkHistoryFragment describes one unified coherent piece of data in
            a WorkHistorySubSection.
            </summary>
        </member>
        <member name="M:Sovren.WorkHistoryFragment.#ctor(Sovren.ParserSettings)">
            <summary>
            INTEGRATORS:  Do not use instances of this class except to parse
            Work History and then read the properties from the container.
            </summary>
        </member>
        <member name="M:Sovren.WorkHistoryFragmentComparer.GetHashCode(Sovren.WorkHistoryFragment)">
            <summary>
            Get hash code for the WorkHistoryFragment.
            </summary>
            <param name="obj">The WorkHistoryFragment.</param>
            <returns>Hash code for the WorkHistoryFragment.</returns>
        </member>
        <member name="M:Sovren.WorkHistoryFragmentPTComparer.GetHashCode(Sovren.WorkHistoryFragment)">
            <summary>
            Get hash code for the WorkHistoryFragment.
            </summary>
            <param name="obj">The WorkHistoryFragment.</param>
            <returns>Hash code for the WorkHistoryFragment.</returns>
        </member>
        <member name="M:Sovren.WorkHistoryFragmentCNComparer.GetHashCode(Sovren.WorkHistoryFragment)">
            <summary>
            Get hash code for the WorkHistoryFragment.
            </summary>
            <param name="obj">The WorkHistoryFragment.</param>
            <returns>Hash code for the WorkHistoryFragment.</returns>
        </member>
        <member name="T:Sovren.StringIntegerArray">
            <summary>
            Like a NameValueCollection, but with integers as the values rather than strings.
            </summary>
        </member>
        <member name="T:Sovren.sovPhone">
            <summary>
            Holds a phone number, fielded into parts.
            </summary>
        </member>
        <member name="M:Sovren.sovPhone.FormatFromParts">
            <summary>
            Use the component parts of the number to build a properly formatted string without any guesswork.
            </summary>
        </member>
        <member name="M:Sovren.sovPhone.FormatFromRawText">
            <summary>
            Test for USA phone numbers and format them accordingly. Leave all other numbers in original format.
            </summary>
        </member>
        <member name="M:Sovren.sovPhone.ScrubNonLatinDigits">
            <summary>
            See Altres 71210-40439.doc where the little dividers are -- get this -- Arabic zeroes!!!!!!!!
             ٠ (808) 206-8672 (H) ٠ (808) 203-9474 
            </summary>
        </member>
        <member name="P:Sovren.sovPhone.UseParts">
            <summary>
            Check to see if the parts have the same number of digits as the original text.
            If so, then it is okay to use the parts rather than the original text.
            </summary>
        </member>
        <member name="P:Sovren.sovPhone.Extension">
            <summary>
            The extension number, if any, excluding preceding text such "x" or "Extn."
            </summary>
        </member>
        <member name="T:Sovren.rrResParse2">
            <summary>
            Contains main detailed parsing routines.  Thes routines are used for
            HR-XML parsing.  Integrators should not need to use them directly.
            </summary>
        </member>
        <member name="M:Sovren.rrResParse2.FindMajor2(Sovren.ParserSettings,System.String,System.String@)">
            <summary>
            Find the first known marker and get the major following it.
            This will often return a "concentration in" type major rather than the true degree major.
            </summary>
        </member>
        <member name="M:Sovren.rrResParse2.FindDegreeMajorBreaker(Sovren.ParserSettings,System.String)">
            <summary>
            Within some possible DegreeMajor text, find the first significant stopping point.
            </summary>
        </member>
        <member name="M:Sovren.rrResParse2.FindShortestDegreeName(Sovren.ParserSettings,System.String,System.String@,System.Int32@)">
            <summary>
            Better be scrubbed text, or you'll get an MA degree for Cambridge, MA !
            Returns the /longest/ raw degree match at the closest offset.
            </summary>
            <param name="settings"></param>
            <param name="InText"></param>
            <param name="ExactDegree"></param>
            <param name="Starts"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrResParse2.FindLongestDegreeName(Sovren.ParserSettings,System.String,System.String@,System.Int32@)">
            <summary>
            Better be scrubbed text, or you'll get an MA degree for Cambridge, MA !
            </summary>
            <param name="settings"></param>
            <param name="InText"></param>
            <param name="LongestDegree"></param>
            <param name="Starts"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.rrResParse2.FindSchoolByList(Sovren.ParserSettings,System.String)">
            <summary>
            Returns longest match from SECONDARY_SCHOOLS list.
            Very short matches must be all upper case, "UW".
            If a match is all lower case, then it must have multiple words.
            </summary>
        </member>
        <member name="M:Sovren.rrResParse2.FindSchools(System.String,Sovren.ParserSettings,System.Boolean)">
            <summary>
            Merges overlaps and contiguous.
            Sorts result by descending length so that first entry is the longest.
            </summary>
        </member>
        <member name="M:Sovren.rrResParse2.CharacterizeManagementLevel(Sovren.ParserSettings,System.Int32,System.String,Sovren.hrxmlUserAreaBestFitTaxonomies)">
            <returns>A string: either "low-or-no-level", "low-level", "mid-level", or "somewhat high-level".</returns>
        </member>
        <member name="M:Sovren.rrResParse2.GetExecutiveFunctionalAreaType(Sovren.TStringList)">
            <summary>
            Private.
            </summary>
        </member>
        <member name="T:Sovren.ListHelper">
            <summary>
            Utility methods for working with lists.
            </summary>
        </member>
        <member name="M:Sovren.ListHelper.Contains``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the list contains the specified value according to the specified comparer.
            </summary>
            <typeparam name="T">The type of the list.</typeparam>
            <param name="list"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Sovren.ListHelper.Join``1(System.Collections.Generic.IList{``0}[])">
            <summary>
            Create a single list that contains all the items in the specified lists in the same order as the original lists.
            </summary>
            <typeparam name="T">The type of lists to join.</typeparam>
            <param name="lists">The lists to join, in the desired order.</param>
            <returns>A list containing all the items from all the lists.</returns>
        </member>
        <member name="M:Sovren.ListHelper.Union``1(System.Collections.Generic.IList{``0}[])">
            <summary>
            Create a single list that contains all the items in the specified lists, with no duplicates.
            </summary>
            <typeparam name="T">The type of lists to union.</typeparam>
            <param name="lists">The lists to union.</param>
            <returns>A list containing all the items but without any duplicates.</returns>
            <remarks>
            List items are compared using the default comparer for type <c>T</c>.
            The resulting list is sorted by the comparer.
            </remarks>
        </member>
        <member name="M:Sovren.ListHelper.Union``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IList{``0}[])">
            <summary>
            Create a single list that contains all the items in the specified lists, sorted by the comparer, with no duplicates.
            </summary>
            <typeparam name="T">The type of lists to union.</typeparam>
            <param name="comparer">The comparer used for comparing items (sorting, removing duplicates).</param>
            <param name="lists">The lists to union.</param>
            <returns>A list containing all the items, sorted by the comparer, with no duplicates.</returns>
            <remarks>The resulting list is sorted by the comparer.</remarks>
        </member>
        <member name="M:Sovren.ListHelper.Union``1(System.Collections.Generic.IComparer{``0},System.Boolean,System.Collections.Generic.IList{``0}[])">
            <summary>
            Create a single list that contains all the items in the specified lists, with no duplicates.
            </summary>
            <typeparam name="T">The type of lists to union.</typeparam>
            <param name="comparer">The comparer used for sorting and comparing items to remove duplicates.</param>
            <param name="sort">When true, the list is sorted to improve performance of duplicate removal.
            When false, the list retains the order of the concatenated lists.</param>
            <param name="lists">The lists to union.</param>
            <returns>A list containing all the items but without any duplicates, optionally sorted.</returns>
        </member>
        <member name="M:Sovren.ListHelper.RemoveDuplicates``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Remove duplicates from a list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">A list containing possible duplicates.</param>
            <param name="comparer">Used to compare items.</param>
            <remarks>
            The original list order is not preserved. The list is sorted in order to improve performance.
            </remarks>
        </member>
        <member name="M:Sovren.ListHelper.RemoveDuplicates``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Remove duplicates from a list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">A list containing possible duplicates.</param>
            <param name="comparer">Used to compare items.</param>
            <param name="sort">When true, the list is sorted to improve performance. When false, the list order is preserved.</param>
            <remarks>
            When sort is true, the original list order is not preserved.
            </remarks>
        </member>
        <member name="M:Sovren.ListHelper.Subtract``1(System.Collections.Generic.List{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Subtract items from a list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be subtracted from.</param>
            <param name="itemsToSubtract">The items to remove from <paramref name="list"/>.</param>
            <param name="comparer">The comparer used to match items.</param>
            <returns>A new list that contains all of the items in <paramref name="list"/> that are not in <paramref name="itemsToSubtract"/>.</returns>
        </member>
        <member name="M:Sovren.ListHelper.Add(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adds the keys and values of one NameValueCollection to another NameValueCollection, with an option to allow duplicates.
            </summary>
            <param name="destination">The NameValueCollection that will hold the combination of the two collections.</param>
            <param name="source">The NameValueCollection that contains the items to be added to the destination collection.</param>
            <param name="allowDuplicates"></param>
        </member>
        <member name="M:Sovren.ListHelper.ToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert an IList of items to an array of items.
            If the list is already an array, this returns the same array.
            Otherwise, a new array is allocated and the items are copied to it.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="items">List of items.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="T:Sovren.hrxmlSupportingMaterialsType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SupportingMaterialsType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlSkillsParserV2">
            <summary>
            hrxmlSkillsParserV2 provides Skills parsing services for HR-XML parsing.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlSkillsParserV2.ParseWithNamedLists(Sovren.SkillsSections,System.Collections.Generic.List{System.String})">
            <summary>
            This is the primary worker method of this class.  
            </summary>
            <param name="sections">A SkillsSections objects that contains all of the sections that
            will be parsed for skills.  By default, this is a subset of the Parser's parsed
            sections.  For instance, Contact Info will not be parsed for skills, nor will References, etc.</param>
            <param name="dataToBeExpunged">Data that should be removed before skills parsing so as to prevent false positives.</param>
            <returns>A FlatSkills instance containing all of the found skills (or empty).</returns>
        </member>
        <member name="T:Sovren.hrxmlSchoolType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for SchoolType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOrganizationUnits">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OrganizationUnits [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlJobCategories">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for JobCategories [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEmployerOrgType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EmployerOrgType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEffectiveDate">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EffectiveDate [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDegreeNameType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DegreeNameType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDegreeMajor">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DegreeMajor [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlCompensationType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for CompensationType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.StringSearchAhoCorasick">
            <summary>
            Class for searching string for one or multiple 
            keywords using efficient Aho-Corasick search algorithm
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._nodes">
            <summary>
            Master list of all TreeNodes, in no particular order.
            All references to these nodes is done through their list index.
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._nodesInfo">
            <summary>
            Transient data for TreeNodes needed only when building the tree. Released by Optimize.
            This list mirrors the _nodes list to provide additional data. Node positions must correlate.
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._nodesComparer">
            <summary>
            Comparer used by Optimize to sort transition nodes by Char.
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._keywords">
            <summary>
            Keywords to search for. This is a read-only copy of the list passed in the constructor.
            TODO: Do we really need to make a copy of this list? Is it possibly safe to skip that step?
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._maxKeywordLength">
            <summary>
            Length of the longest keyword, determined from the _keywords list.
            Used by callers to determine which portions of larger texts should be searched.
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick._ignoreCase">
            <summary>
            Set to true to perform case-insensitive searches
            </summary>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.#ctor(System.String[],System.Boolean)">
            <summary>
            Initialize search algorithm (Build keyword tree)
            </summary>
            <param name="keywords">Keywords to search for.</param>
            <param name="ignoreCase">True to do case insensitive searching.</param>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.BuildTree">
            <summary>
            Build tree from specified keywords
            </summary>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.GetTransition(System.Int32,System.Char)">
            <summary>
            Returns transition to specified character (if exists)
            </summary>
            <returns>Returns node index or -1</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.GetTransition(System.Collections.Generic.List{System.Int32},System.Char)">
            <summary>
            Returns transition to specified character (if exists)
            </summary>
            <returns>Returns node index if found; otherwise, bitwise complement of the insert position.</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.Optimize">
            <summary>
            Optimizes internal data structures after they have been built.
            </summary>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.GetTransitionOptimized(Sovren.StringSearchAhoCorasick.TreeNode@,System.Char)">
            <summary>
            Returns transition to specified character (if exists)
            </summary>
            <param name="node">Node (by ref for performance, will not be modified)</param>
            <param name="c">Character</param>
            <returns>Returns TreeNode or null</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindAll(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns all occurrences of any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindAll(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns all occurrences of any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindAll(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns all occurrences of any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. If null, all results are accepted.</param>
            <returns>List of occurrences</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirst(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirst(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirst(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirst(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns first (shortest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Shortest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLastLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLastLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLastLongest(System.String,System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="prefix">Prefix required for matching terms</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLastLongest(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLastLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns last occurrence of any keyword. If multiple matches end at
            the same place, then this returns only the longest one.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Last occurrence of any keyword (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.ContainsAny(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches passed text and returns true if text contains any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>True when text contains any keyword</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.ContainsAny(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches passed text and returns true if text contains any keyword
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>True when text contains any keyword</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword anywhere within the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword anywhere within the text.
            If more than one keyword of the same length is found, the first one is returned.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Returns the longest keyword anywhere within the text.
            If more than one keyword of the same length is found, the first one is returned.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword in the text (or StringSearchResult.Empty if text does not contain a keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirstLongest(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirstLongest(System.String,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirstLongest(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindFirstLongest(System.String,System.Int32,System.Int32,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches text and returns first (longest) occurrence of any keyword.
            </summary>
            <param name="text">Text to search</param>
            <param name="startAt">Position within text to begin searching</param>
            <param name="length">The number of characters to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword at the earliest index (or StringSearchResult.Empty if text doesn't contain any keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongestStartsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Returns the longest keyword at the start of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword that the text starts with (or StringSearchResult.Empty if text does not start with a keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongestStartsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Returns the longest keyword at the start of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword that the text starts with (or StringSearchResult.Empty if text does not start with a keyword)</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongestEndsWith(System.String,Sovren.StringSearchCompareOptions)">
            <summary>
            Searches the text and returns the longest occurence of a keyword at the end of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <returns>Longest keyword at end of the text (or StringSearchResult.Empty if text does not end with a keyword).</returns>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.FindLongestEndsWith(System.String,Sovren.StringSearchCompareOptions,Sovren.StringSearchResultEvaluator)">
            <summary>
            Searches the text and returns the longest occurence of a keyword at the end of the text.
            </summary>
            <param name="text">Text to search</param>
            <param name="options">Options that control comparison behavior</param>
            <param name="evaluator">Delegate that returns true if a result is acceptable and false if it is not. A null evaluator indicates acceptance of all results.</param>
            <returns>Longest keyword at end of the text (or StringSearchResult.Empty if text does not end with a keyword).</returns>
        </member>
        <member name="P:Sovren.StringSearchAhoCorasick.Keywords">
            <summary>
            Keywords associated with this searcher.
            </summary>
        </member>
        <member name="P:Sovren.StringSearchAhoCorasick.MaxKeywordLength">
            <summary>
            The length of the longest keyword.
            </summary>
        </member>
        <member name="T:Sovren.StringSearchAhoCorasick.TreeNode">
            <summary>
            Tree node representing character and its transition and failure function.
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick.TreeNode.Char">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:Sovren.StringSearchAhoCorasick.TreeNode.Failure">
            <summary>
            Failure function - descendant node
            </summary>
        </member>
        <member name="M:Sovren.StringSearchAhoCorasick.TreeNode.#ctor(System.Char)">
            <summary>
            Initialize tree node with specified character
            </summary>
        </member>
        <member name="T:Sovren.CustomDataParser">
            <summary>
            Does the parsing of all custom data items defined in ParserSettings.CustomData.
            </summary>
        </member>
        <member name="M:Sovren.CustomDataParser.#ctor">
            <summary>
            This is the constructor to use.
            </summary>
        </member>
        <member name="M:Sovren.CustomDataParser.Parse(System.String,Sovren.ParserSettings)">
            <summary>
            Parse all the Custom Data Definitions and return a collection of matches
            in the same order as the matches were found in the document.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="settings"></param>
            <returns>Collection of custom data matches that were found in the text.</returns>
        </member>
        <member name="M:Sovren.CustomDataParser.ParseOne(Sovren.CustomDataMatchCollection,System.String,System.String,System.String,Sovren.ParserSettings)">
            <summary>
            Parses one definition and returns the matching values..
            </summary>
            <param name="results">Matches for this parse will be added to this collection.</param>
            <param name="text">The text to be inspected.</param>
            <param name="type">The type of the item that you wish to parse for. Please use XML-legal names.</param>
            <param name="pattern">The regular expression pattern to use. Remember, all desired regular
            expression options (see Regex.RegexOptions in the .NET Framework) must be embedded in this pattern.</param>
            <param name="settings">The settings that control parsing.</param>
        </member>
        <member name="T:Sovren.CustomDataDefinition">
            <summary>
            Represents the definition of a new type of custom data item to parse for.
            </summary>
        </member>
        <member name="M:Sovren.CustomDataDefinition.#ctor">
            <summary>
            Create a new definition. At minimum, the Type property must be set.
            </summary>
        </member>
        <member name="M:Sovren.CustomDataDefinition.#ctor(System.String)">
            <summary>
            Create a definition with just a Type name. During parsing, the Pattern is
            loaded from the CUSTOM_DATA_DEFINITIONS data list.
            </summary>
            <param name="type">Name of the definition.</param>
        </member>
        <member name="M:Sovren.CustomDataDefinition.#ctor(System.String,System.String)">
            <summary>
            Create a definition.
            </summary>
            <param name="type">Name of the definition.</param>
            <param name="pattern">.NET Regular Expression that will match the desired data for this definition.</param>
        </member>
        <member name="P:Sovren.CustomDataDefinition.Type">
            <summary>
            Name for this type of custom data item. This name will be reported by the parser
            for each instance of this custom data item that is found. When null or empty,
            this definition is ignored.
            </summary>
        </member>
        <member name="P:Sovren.CustomDataDefinition.Pattern">
            <summary>
            The .NET Regular Expression pattern that matches data for this type.
            When null, the parser attempts to load the pattern from the CUSTOM_DATA_DEFINITIONS
            data list of the same language as the resume.
            </summary>
        </member>
        <member name="T:Sovren.CustomDataDefinitionCollection">
            <summary>
            Holds a collection of customer-defined definitions that will gather custom data items
            during parsing. Currently, these definitions use regular expressions.
            <br/>
            ================================================================
            <br/>
            WARNING: 
            Most regular expressions are safe, but it is possible to write an expressions that perform
            poorly and some that even behave like an infinite loop, in which case the parser will
            appear to hang. You must stress test your expressions to ensure that they do not hang.
            <br/>
            ================================================================
            <br/>
            Add new definitions by calling <see mref="AddDefinition"/>. After parsing is done,
            you can retrieve data from the <see mref="Matches">parser.Resume.UserArea.CustomData.Matches</see> property
            or in the HR-XML at Resume/UserArea/ResumeUserArea/CustomData/CustomDataItem.
            </summary>
        </member>
        <member name="M:Sovren.CustomDataDefinitionCollection.AddDefinition(System.String)">
            <summary>
            Adds a definition that has already been defined in the CUSTOM_DATA_DEFINITIONS data list.
            </summary>
            <param name="name">The name of the item that you wish to parse for. Please use XML-legal names.</param>
        </member>
        <member name="M:Sovren.CustomDataDefinitionCollection.AddDefinition(System.String,System.String)">
            <summary>
            Adds a definition to be used during parsing.
            </summary>
            <param name="name">The name of the item that you wish to parse for. Please use XML-legal names.</param>
            <param name="pattern">The regular expression pattern to use. All desired regular
            expression options (see Regex.RegexOptions in the .NET Framework) must be embedded in this pattern.</param>
        </member>
        <member name="M:Sovren.CustomDataDefinitionCollection.Clone">
            <summary>
            Does a shallow clone of the definitions. Should this be a deep clone?
            </summary>
            <returns>Shallow clone of the definitions collection.</returns>
        </member>
        <member name="T:Sovren.CustomDataMatch">
            <summary>
            Information about a match found during parsing of <see mref="ParserCustomDataSettings.Definitions">Custom Data Definitions</see>.
            </summary>
        </member>
        <member name="P:Sovren.CustomDataMatch.Type">
            <summary>
            The type of the match. See <see mref="CustomDataDefinition.Type"/>.
            </summary>
        </member>
        <member name="P:Sovren.CustomDataMatch.Value">
            <summary>
            The custom data value found within the resume text.
            </summary>
        </member>
        <member name="P:Sovren.CustomDataMatch.Index">
            <summary>
            The position of the first character of <see mref="Value"/> within the resume text.
            </summary>
        </member>
        <member name="T:Sovren.CustomDataMatchCollection">
            <summary>
            A collection of <see cref="T:Sovren.CustomDataMatch"/> that holds the results of all matches
            found during parsing of <see mref="ParserCustomDataSettings.Definitions">Custom Data Definitions</see>..
            </summary>
        </member>
        <member name="T:Sovren.hrxmlResumeUserAreaCustomData">
            <summary>
            Container that holds all of the results of parsing for custom data.
            </summary>
        </member>
        <member name="M:Sovren.hrxmlResumeUserAreaCustomData.#ctor(Sovren.ParserSettings)">
            <summary>
            Default constructor.
            </summary>
            <param name="settings">Settings that control the output format.</param>
        </member>
        <member name="M:Sovren.hrxmlResumeUserAreaCustomData.GetAsXml">
            <summary>
            Outputs each found item in an XML element styled as <![CDATA[<sov:CustomDataMatch type="customType">DATA_HERE</sov:CustomDataMatch>]]>.
            </summary>
            <returns>The XML output as a string</returns>
        </member>
        <member name="P:Sovren.hrxmlResumeUserAreaCustomData.Matches">
            <summary>
            Collection of custom data items found within the resume text according to the
            <see mref="ParserCustomDataSettings.Definitions">Custom Data Definitions</see>.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlQualifications">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Qualifications [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlPatentDetailType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for PatentDetailType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOtherHonorsType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OtherHonorsType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOrgName">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OrgName [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlOrgInfo">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for OrgInfo [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlJobLevel">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for JobLevel [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlFormattedPublicationDescription">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for FormattedPublicationDescription [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlFlexibleDatesType">
            <summary>
            hrxmlFlexibleDatesType implements the HR-XML Resume 2.4 hrxmlFlexibleDatesType.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlFlexibleDatesType.AsDateTime">
            <summary>
            Returns the date as a DateTime value.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlFlexibleDatesType.IsCurrent">
            <summary>
            Returns true when the date value represents the floating "current" date rather than an explicit date.
            </summary>
        </member>
        <member name="P:Sovren.hrxmlFlexibleDatesType.HasValue">
            <summary>
            Returns true when the date has any non-empty value.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEmployerContactInfoType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EmployerContactInfoType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlEducationalMeasureType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for EducationalMeasureType [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.DegreesByDateDescendingComparer">
            <summary>
            This is an IComparer implementation to allow sorting of Degree entries by date, descending.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDegrees">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for Degrees [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlDegreeMinor">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for DegreeMinor [CPO 1_1_1].
            This is a strongly typed descendant of hrxmlCollection.
            </summary>
        </member>
        <member name="T:Sovren.hrxmlContactInfo">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for ContactInfo [CPO 1_1_1]
            </summary>
        </member>
        <member name="T:Sovren.hrxmlAffixType">
            <summary>
            Public class for implementing HR-XML Resume 2.4 output for AffixType [CPO 1_1_1]
            </summary>
        </member>
        <member name="F:Sovren.hrxmlAffixType.FValue">
            <summary>
            Has (needed) side effects.
            </summary>
        </member>
        <member name="T:Sovren.FlatSkills">
            <summary>
            FlatSkills holds an ArrayList of FlatSkill items.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkills.Clear">
            <summary>
            Clear the list.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkills.Add(Sovren.FlatSkill)">
            <summary>
            Add a FlatSkill.  Does NOT check for duplicates!!!!
            </summary>
            <param name="Skill"></param>
        </member>
        <member name="M:Sovren.FlatSkills.AddOrUpdate(Sovren.TaxonomySkill,Sovren.SkillsSection,System.String)">
            <summary>
            If the skill does not already appear in the list (based on SkillId, not SkillName),
            then it will be added.  Otherwise, the data will be updated.  
            </summary>
            <param name="skill">A TaxonomySkill instance that was used to find this skill.</param>
            <param name="sectionWhereFound">A SkillsSection instance describing where this skill
            was found in the resume.</param>
            <param name="useThisAsSkillName">Some TaxonomySkill instances have regular expressions
            rather than skill names.  These skills' names start with REGEX.  Because the skill
            name is really not a name but a regular expression, it is desireable to pass in the 
            actual skill found by the regular expression, and this is where that should be passed.</param>
        </member>
        <member name="M:Sovren.FlatSkills.SortBySkillDuration(System.Boolean)">
            <summary>
            Sort the list of skills by their CumulativeMonths values.
            </summary>
            <param name="descending">
            Set false to sort list in ascending order (least to most duration).
            Set false for descending order (most to least duration).
            </param>
        </member>
        <member name="M:Sovren.FlatSkills.SortBySkillName(System.Boolean)">
            <summary>
            Sort the list of skills by SkillName.
            </summary>
            <param name="descending">Set false to sort list in ascending order. Set false for descending order.</param>
        </member>
        <member name="M:Sovren.FlatSkills.DeleteByName(System.String)">
            <summary>
            Remove all skills having the specified value for <see cref="P:Sovren.FlatSkill.SkillName"/>.
            </summary>
            <param name="skillName">Value of the <see cref="P:Sovren.FlatSkill.SkillName"/> to be removed.</param>
        </member>
        <member name="M:Sovren.FlatSkills.Remove(System.String)">
            <summary>
            Remove all skills having the specified value for <see cref="P:Sovren.FlatSkill.SkillName"/>.
            </summary>
            <param name="skillName">Value of the <see cref="P:Sovren.FlatSkill.SkillName"/> to be removed.</param>
        </member>
        <member name="M:Sovren.FlatSkills.GetSkillWithId(System.String)">
            <summary>
            Retrieves an instance, if any, of a found skill that has this skill id.
            </summary>
            <param name="skillId">HR-XML: Competency => CompetencyId => id</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.FlatSkills.GetFirstSkillWithName(System.String)">
            <summary>
            Retrieves an instance, if any, of a found skill that has this skill name.
            </summary>
            <param name="skillName">HR-XML: Competency => name</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.FlatSkills.GetFirstSkillWithName(System.String,System.StringComparison)">
            <summary>
            Retrieves an instance, if any, of a found skill that has this skill name.
            </summary>
            <param name="skillName">HR-XML: Competency => name</param>
            <param name="comparisonType">The type of string comparison to perform.</param>
            <returns></returns>
        </member>
        <member name="M:Sovren.FlatSkills.CreateParentSkillsWhereNeeded">
            <summary>
            If you want to work with or see the parent skills of any child skills that were found
            in the resume, then this method will create them and add them to the list.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkills.GetAllWithParentSkills">
            <summary>
            Get a read-only list that contains the found skills and all their parents. This
            method does not modify the internal FlatSkills list.
            </summary>
            <returns>List of skills</returns>
        </member>
        <member name="M:Sovren.FlatSkills.CreateParentsOfSkills(System.Collections.Generic.List{Sovren.FlatSkill})">
            <summary>
            Walk through the list of skills, adding parent skills to the end.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Sovren.FlatSkills.CreateParentsOfSkill(Sovren.FlatSkill,System.Collections.Generic.List{Sovren.FlatSkill})">
            <summary>
            Create the parent chain for a skill, and copy the section information into it
            so that it can properly report its sections and dates.
            </summary>
            <param name="skill">The child skill.</param>
            <param name="list">The list to which new parent skills should be added.</param>
        </member>
        <member name="M:Sovren.FlatSkills.GetAsXml">
            <summary>
            This method will output valid HR-XML.
            </summary>
        </member>
        <member name="M:Sovren.FlatSkills.GetBestFitTaxonomies">
            <summary>
            Get a list of the best fit taxonomies for this list of skills.
            </summary>
            <returns>
            A hierarchy of weighted taxonomies, sorted from highest weight to lowest weight.
            This list includes values for each matching level of the taxonomy structure.
            </returns>
        </member>
        <member name="P:Sovren.FlatSkills.Item(System.Int32)">
            <summary>
            The indexer for this class.  Will return null if the index is out of range, rather
            than throwing an exception.
            </summary>
        </member>
        <member name="T:Sovren.FlatSkills.SortFlatSkillsByName">
            <summary>
            This is an IComparer implementation to allow sorting of skills by SkillName.
            </summary>
        </member>
        <member name="T:Sovren.FlatSkills.SortFlatSkillsByMonths">
            <summary>
            This is an IComparer implementation to allow sorting of skills by
            CumulativeMonths, then by LastUsedDate, and finally by ascending SkillName and SkillId.
            </summary>
        </member>
        <member name="M:Sovren.EducationSection.ProbablyInvalid(System.String)">
            <summary>
            Is the phrase almost certainly NOT a valid SchoolName or Major?
            </summary>
            <param name="Phrase"></param>
            <returns></returns>
        </member>
        <member name="T:Sovren.StringWriterWithEncoding">
            <summary>
            This class helps workaround the default XmlWriter behavior of outputting the XML declaration
            with encoding="utf-16".
            </summary>
        </member>
        <member name="T:Sovren.ParserFactory">
            <summary>
            This class is provided for COM clients to create new instances
            of the ParserMapper class, which requires ParserSettings during
            its constructor.
            </summary>
        </member>
        <member name="M:Sovren.ParserFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sovren.ParserFactory.CreateParser(Sovren.ParserSettings)">
            <summary>
            Equivalent to calling the <see cref="M:Sovren.ParserMapper.#ctor(Sovren.ParserSettings)"/> constructor
            to create a new parser instance. Be sure to read the documentation for that constructor
            to understand how to properly use the settings before and after the parser is constrcuted.
            </summary>
            <param name="settings">The parser settings.</param>
            <returns>A new parser instance, constructed from the specified settings.</returns>
        </member>
    </members>
</doc>
